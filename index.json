{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome to the Scripting Reference!",
    "keywords": "Welcome to the Scripting Reference! Select the API to view the detail."
  },
  "api/ProjectDawn.Collections.CollectionChecks.html": {
    "href": "api/ProjectDawn.Collections.CollectionChecks.html",
    "title": "Class CollectionChecks",
    "keywords": "Class CollectionChecks Inheritance System.Object CollectionChecks Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ProjectDawn.Collections Assembly : ProjectDawn.Collections.dll Syntax [BurstCompatible] public static class CollectionChecks Methods | Improve this Doc View Source CheckAllocator(AllocatorManager.AllocatorHandle) Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public static void CheckAllocator(AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description Unity.Collections.AllocatorManager.AllocatorHandle allocator | Improve this Doc View Source CheckCapacity(Int32) Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] [Conditional(\"UNITY_DOTS_DEBUG\")] public static void CheckCapacity(int capacity) Parameters Type Name Description System.Int32 capacity | Improve this Doc View Source CheckCapacityInRange(Int32, Int32) Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] [Conditional(\"UNITY_DOTS_DEBUG\")] public static void CheckCapacityInRange(int capacity, int length) Parameters Type Name Description System.Int32 capacity System.Int32 length | Improve this Doc View Source CheckIndexInRange(Int32, Int32) Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] [Conditional(\"UNITY_DOTS_DEBUG\")] public static void CheckIndexInRange(int index, int length) Parameters Type Name Description System.Int32 index System.Int32 length | Improve this Doc View Source CheckIsUnmanaged<T>() Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] [BurstDiscard] public static void CheckIsUnmanaged<T>() Type Parameters Name Description T | Improve this Doc View Source CheckNull<T>(T*) Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public static void CheckNull<T>(T*listData) where T : struct Parameters Type Name Description T* listData Type Parameters Name Description T | Improve this Doc View Source CheckPositive(Int32) Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public static void CheckPositive(int value) Parameters Type Name Description System.Int32 value | Improve this Doc View Source CheckReinterpret<T>(Int32) Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public static void CheckReinterpret<T>(int size) where T : struct Parameters Type Name Description System.Int32 size Type Parameters Name Description T | Improve this Doc View Source ShouldDeallocate(AllocatorManager.AllocatorHandle) Declaration public static bool ShouldDeallocate(AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description Unity.Collections.AllocatorManager.AllocatorHandle allocator Returns Type Description System.Boolean"
  },
  "api/ProjectDawn.Collections.html": {
    "href": "api/ProjectDawn.Collections.html",
    "title": "Namespace ProjectDawn.Collections",
    "keywords": "Namespace ProjectDawn.Collections Classes CollectionChecks NativeLinkedListSort NativeListExtensnios Structs NativeAABBTree<T> An unmanaged, resizable aabb tree. AABB tree (short for axis aligned bounding box tree) is a space-partitioning data structure for organizing bounding shapes in space. As structure uses generic it is not only usable for boxes, but any shape that implements interfaces. AABB trees are a useful data structure for fast searching bounding shapes in space. AABB trees are a special case of binary space partitioning trees. Based on https://box2d.org/files/ErinCatto_DynamicBVH_GDC2019.pdf . NativeAABBTree<T>.Iterator Linked list iterator. NativeHeapPriorityQueue<TKey, TValue> An unmanaged, resizable priority queue. Priority queue main difference from regular queue that it is sorted. It is implemented using heap. Peek = O(1), Enqueue = O(log n), Dequeue = O(log n). NativeKdTree<TValue, TComparer> An unmanaged, resizable k-d tree. K-d tree (short for k-dimensional tree) is a space-partitioning data structure for organizing points in a k-dimensional space. K-d trees are a useful data structure for several applications, such as searches involving a multidimensional search key (e.g. range searches and nearest neighbor searches) and creating point clouds. K-d trees are a special case of binary space partitioning trees. NativeKdTree<TValue, TComparer>.Iterator Linked list iterator. NativeLinkedList<T> An unmanaged, resizable linked list. Linked list is efficient at inserting and removing elements. However, not so efficient with cache usage. Linked list is implemented using double linked nodes, where each node knows its next-node link and previous-node link. NativeLinkedList<T>.Iterator Linked list iterator. NativeLinkedListSort.DefaultComparer<T> A comparer that uses IComparable.CompareTo(). For primitive types, this is an ascending sort. NativeLinkedPriorityQueue<TValue, TComparer> An unmanaged, resizable priority queue. Priority queue main difference from regular queue that before element enqueue it executes insert sort. It is implemented using linked list. Peek = O(1), Enqueue = O(Log n), Dequeue = O(Log 1). NativePriorityQueue<TValue, TComparer> An unmanaged, resizable priority queue. Priority queue main difference from regular queue that before element enqueue it executes insert sort. It is implemented using heap. Peek = O(1), Enqueue = O(Log n), Dequeue = O(Log 1). NativeStack<T> An managed, resizable stack. Limited version of that only operates with the last element at the time. NativeStack<T>.ParallelWriter Returns parallel writer instance. NativeStructureList UnsafePriorityQueue<TValue, TComparer> An unmanaged, resizable priority queue, without any thread safety check features. Priority queue main difference from regular queue that before element enqueue it executes insert sort. It is implemented using linked nodes as a result, inserting does not require pushing data around. Interfaces IKdTreeComparer<T> Comparer used for sorting elements in k-d tree. IOverlap<T> ISurfaceArea<T> IUnion<T>"
  },
  "api/ProjectDawn.Collections.IKdTreeComparer-1.html": {
    "href": "api/ProjectDawn.Collections.IKdTreeComparer-1.html",
    "title": "Interface IKdTreeComparer<T>",
    "keywords": "Interface IKdTreeComparer<T> Comparer used for sorting elements in k-d tree. Namespace : ProjectDawn.Collections Assembly : ProjectDawn.Collections.dll Syntax public interface IKdTreeComparer<in T> Type Parameters Name Description T Methods | Improve this Doc View Source Compare(T, T, Int32) Compares tree elements at specific node height. Almost same as . Declaration int Compare(T x, T y, int height) Parameters Type Name Description T x First element. T y Second element. System.Int32 height The node height. Returns Type Description System.Int32 | Improve this Doc View Source DistanceSq(T, T) Returns distance between tree elements. Declaration float DistanceSq(T x, T y) Parameters Type Name Description T x T y Returns Type Description System.Single | Improve this Doc View Source DistanceToSplitSq(T, T, Int32) Returns distance between tree elements at specific node height. Declaration float DistanceToSplitSq(T x, T y, int height) Parameters Type Name Description T x First element. T y Second element. System.Int32 height The node height. Returns Type Description System.Single"
  },
  "api/ProjectDawn.Collections.IOverlap-1.html": {
    "href": "api/ProjectDawn.Collections.IOverlap-1.html",
    "title": "Interface IOverlap<T>",
    "keywords": "Interface IOverlap<T> Namespace : ProjectDawn.Collections Assembly : ProjectDawn.Collections.dll Syntax public interface IOverlap<T> where T : struct Type Parameters Name Description T Methods | Improve this Doc View Source Overlap(T) Returns true if overlaps. Declaration bool Overlap(T value) Parameters Type Name Description T value Returns Type Description System.Boolean"
  },
  "api/ProjectDawn.Collections.ISurfaceArea-1.html": {
    "href": "api/ProjectDawn.Collections.ISurfaceArea-1.html",
    "title": "Interface ISurfaceArea<T>",
    "keywords": "Interface ISurfaceArea<T> Namespace : ProjectDawn.Collections Assembly : ProjectDawn.Collections.dll Syntax public interface ISurfaceArea<T> where T : struct Type Parameters Name Description T Methods | Improve this Doc View Source SurfaceArea() Returns surface area of the shape. Declaration float SurfaceArea() Returns Type Description System.Single"
  },
  "api/ProjectDawn.Collections.IUnion-1.html": {
    "href": "api/ProjectDawn.Collections.IUnion-1.html",
    "title": "Interface IUnion<T>",
    "keywords": "Interface IUnion<T> Namespace : ProjectDawn.Collections Assembly : ProjectDawn.Collections.dll Syntax public interface IUnion<T> where T : struct Type Parameters Name Description T Methods | Improve this Doc View Source Union(T) Returns combined volume. Declaration T Union(T value) Parameters Type Name Description T value Returns Type Description T"
  },
  "api/ProjectDawn.Collections.LowLevel.Unsafe.html": {
    "href": "api/ProjectDawn.Collections.LowLevel.Unsafe.html",
    "title": "Namespace ProjectDawn.Collections.LowLevel.Unsafe",
    "keywords": "Namespace ProjectDawn.Collections.LowLevel.Unsafe Structs UnsafeAABBTree<T> An unmanaged, resizable aabb tree, without any thread safety check features. AABB tree (short for axis aligned bounding box tree) is a space-partitioning data structure for organizing bounding shapes in space. As structure uses generic it is not only usable for boxes, but any shape that implements interfaces. AABB trees are a useful data structure for fast searching bounding shapes in space. AABB trees are a special case of binary space partitioning trees. Based on https://box2d.org/files/ErinCatto_DynamicBVH_GDC2019.pdf . UnsafeAABBTree<T>.Handle Kd Tree iterator. UnsafeHeap<TKey, TValue> An unmanaged, resizable min heap, without any thread safety check features. UnsafeKdTree<TValue, TComparer> An unmanaged, resizable k-d tree, without any thread safety check features. K-d tree (short for k-dimensional tree) is a space-partitioning data structure for organizing points in a k-dimensional space. K-d trees are a useful data structure for several applications, such as searches involving a multidimensional search key (e.g. range searches and nearest neighbor searches) and creating point clouds. K-d trees are a special case of binary space partitioning trees. UnsafeKdTree<TValue, TComparer>.Handle Kd Tree iterator. UnsafeLinkedList<T> An unmanaged, resizable linked list, without any thread safety check features. UnsafeLinkedList<T>.Enumerator UnsafeLinkedList<T>.Handle Linked list iterator. UnsafeLinkedPriorityQueue<TValue, TComparer> An unmanaged, resizable priority queue, without any thread safety check features. Priority queue main difference from regular queue that before element enqueue it executes insert sort. It is implemented using linked list. Peek = O(1), Enqueue = O(n), Dequeue = O(1). UnsafeStack<T> An managed, resizable stack, without any thread safety check features. Limited version of that allows only adding to list back or removing. UnsafeStructureList"
  },
  "api/ProjectDawn.Collections.LowLevel.Unsafe.UnsafeAABBTree-1.Handle.html": {
    "href": "api/ProjectDawn.Collections.LowLevel.Unsafe.UnsafeAABBTree-1.Handle.html",
    "title": "Struct UnsafeAABBTree<T>.Handle",
    "keywords": "Struct UnsafeAABBTree<T>.Handle Kd Tree iterator. Implements System.IEquatable < UnsafeAABBTree.Handle <>> Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Collections.LowLevel.Unsafe Assembly : ProjectDawn.Collections.dll Syntax public struct Handle : IEquatable<UnsafeAABBTree<T>.Handle> Properties | Improve this Doc View Source Valid Returns true if handle is valid. Declaration public bool Valid { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Equals(UnsafeAABBTree<T>.Handle) Declaration public bool Equals(UnsafeAABBTree<T>.Handle other) Parameters Type Name Description UnsafeAABBTree.Handle <> other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(UnsafeAABBTree<T>.Handle, UnsafeAABBTree<T>.Handle) Declaration public static bool operator ==(UnsafeAABBTree<T>.Handle lhs, UnsafeAABBTree<T>.Handle rhs) Parameters Type Name Description UnsafeAABBTree.Handle <> lhs UnsafeAABBTree.Handle <> rhs Returns Type Description System.Boolean | Improve this Doc View Source Implicit(UnsafeAABBTree<T>.Handle to Int32) Declaration public static implicit operator int (UnsafeAABBTree<T>.Handle handled) Parameters Type Name Description UnsafeAABBTree.Handle <> handled Returns Type Description System.Int32 | Improve this Doc View Source Inequality(UnsafeAABBTree<T>.Handle, UnsafeAABBTree<T>.Handle) Declaration public static bool operator !=(UnsafeAABBTree<T>.Handle lhs, UnsafeAABBTree<T>.Handle rhs) Parameters Type Name Description UnsafeAABBTree.Handle <> lhs UnsafeAABBTree.Handle <> rhs Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "api/ProjectDawn.Collections.LowLevel.Unsafe.UnsafeAABBTree-1.html": {
    "href": "api/ProjectDawn.Collections.LowLevel.Unsafe.UnsafeAABBTree-1.html",
    "title": "Struct UnsafeAABBTree<T>",
    "keywords": "Struct UnsafeAABBTree<T> An unmanaged, resizable aabb tree, without any thread safety check features. AABB tree (short for axis aligned bounding box tree) is a space-partitioning data structure for organizing bounding shapes in space. As structure uses generic it is not only usable for boxes, but any shape that implements interfaces. AABB trees are a useful data structure for fast searching bounding shapes in space. AABB trees are a special case of binary space partitioning trees. Based on https://box2d.org/files/ErinCatto_DynamicBVH_GDC2019.pdf . Implements System.IDisposable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Collections.LowLevel.Unsafe Assembly : ProjectDawn.Collections.dll Syntax public struct UnsafeAABBTree<T> : IDisposable where T : struct, ISurfaceArea<T>, IUnion<T> Type Parameters Name Description T The type of the bounding shape. Constructors | Improve this Doc View Source UnsafeAABBTree(Int32, AllocatorManager.AllocatorHandle) Initialized and returns an instance of NativeAABBTree. Declaration public UnsafeAABBTree(int initialCapacity, AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the priority queue. Unity.Collections.AllocatorManager.AllocatorHandle allocator The allocator to use. Properties | Improve this Doc View Source Capacity The number of elements that fit in the current allocation. Declaration public int Capacity { get; } Property Value Type Description System.Int32 The number of elements that fit in the current allocation. | Improve this Doc View Source IsCreated Whether this tree has been allocated (and not yet deallocated). Declaration public bool IsCreated { get; } Property Value Type Description System.Boolean True if this tree has been allocated (and not yet deallocated). | Improve this Doc View Source IsEmpty Whether the tree is empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean True if the tree is empty or the tree has not been constructed. | Improve this Doc View Source Item[UnsafeAABBTree<T>.Handle] The element at a given position. Declaration public T this[UnsafeAABBTree<T>.Handle handle] { get; } Parameters Type Name Description UnsafeAABBTree.Handle <> handle Handle of the element. Property Value Type Description T | Improve this Doc View Source Length The number of elements. Declaration public int Length { get; } Property Value Type Description System.Int32 The number of elements. | Improve this Doc View Source Root Returns the tree root. Declaration public UnsafeAABBTree<T>.Handle Root { get; } Property Value Type Description UnsafeAABBTree.Handle <> Methods | Improve this Doc View Source Add(T) Add element to the tree. Declaration public UnsafeAABBTree<T>.Handle Add(T value) Parameters Type Name Description T value The value to add. Returns Type Description UnsafeAABBTree.Handle <> | Improve this Doc View Source Build(NativeArray<T>) Builds aabb tree with given array of values. Declaration public void Build(in NativeArray<T> array) Parameters Type Name Description Unity.Collections.NativeArray <T> array | Improve this Doc View Source Clear() Removes all nodes of this tree. Declaration public void Clear() Remarks Does not change the capacity. | Improve this Doc View Source Cost() Returns the sum of all non leaf surface area. The lower the number is, the more optimal a tree will be. Declaration public float Cost() Returns Type Description System.Single | Improve this Doc View Source CountLeafs() Returns the number leaf nodes in this aabb tree. Declaration public int CountLeafs() Returns Type Description System.Int32 Returns the number leaf nodes in this aabb tree. | Improve this Doc View Source Create(Int32, AllocatorManager.AllocatorHandle) Creates a new container with the specified initial capacity and type of memory allocation. Declaration public static UnsafeAABBTree<T>*Create(int initialCapacity, AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the list. If the list grows larger than its capacity, the internal array is copied to a new, larger array. Unity.Collections.AllocatorManager.AllocatorHandle allocator A member of the Unity.Collections.Allocator enumeration. Returns Type Description UnsafeAABBTree <T>* | Improve this Doc View Source Destroy(UnsafeAABBTree<T>*) Destroys container. Declaration public static void Destroy(UnsafeAABBTree<T>*data) Parameters Type Name Description UnsafeAABBTree <T>* data | Improve this Doc View Source Dispose() Releases all resources (memory and safety handles). Declaration public void Dispose() | Improve this Doc View Source FindOverlap<U>(U, ref NativeList<T>) Find all bounding shapes that overlap with value. Declaration public int FindOverlap<U>(in U value, ref NativeList<T> result) where U : struct, IOverlap<T> Parameters Type Name Description U value Value that will be used for testing overlap. Unity.Collections.NativeList <T> result Array of the bounding shapes that overlap. Returns Type Description System.Int32 Returns the number of bounding shapes overlap. Type Parameters Name Description U | Improve this Doc View Source GetBalancedTreeFactor() Returns factor from zero to one. Where one represents if tree is balanced and zero is unbalanced. This value can be used to decide if tree needs balancing. Declaration public float GetBalancedTreeFactor() Returns Type Description System.Single Returns factor from zero to one. Where zero represents if tree is balanced and one is unbalanced. | Improve this Doc View Source GetDepth() Returns the depth of the tree. It is the maximum height of all nodes. Declaration public int GetDepth() Returns Type Description System.Int32 | Improve this Doc View Source IsLeaf(UnsafeAABBTree<T>.Handle) Returns true if handle does not have childs. Declaration public bool IsLeaf(UnsafeAABBTree<T>.Handle handle) Parameters Type Name Description UnsafeAABBTree.Handle <> handle Returns Type Description System.Boolean | Improve this Doc View Source Left(UnsafeAABBTree<T>.Handle) Returns left child of handle. Declaration public UnsafeAABBTree<T>.Handle Left(UnsafeAABBTree<T>.Handle handle) Parameters Type Name Description UnsafeAABBTree.Handle <> handle Returns Type Description UnsafeAABBTree.Handle <> | Improve this Doc View Source Parent(UnsafeAABBTree<T>.Handle) Returns parents of the handle. Declaration public UnsafeAABBTree<T>.Handle Parent(UnsafeAABBTree<T>.Handle handle) Parameters Type Name Description UnsafeAABBTree.Handle <> handle Returns Type Description UnsafeAABBTree.Handle <> | Improve this Doc View Source RemoveAt(UnsafeAABBTree<T>.Handle) Removes node from the tree at givent iterator value. Declaration public void RemoveAt(UnsafeAABBTree<T>.Handle iterator) Parameters Type Name Description UnsafeAABBTree.Handle <> iterator Position from which node will be removed. | Improve this Doc View Source Right(UnsafeAABBTree<T>.Handle) Returns right child of handle. Declaration public UnsafeAABBTree<T>.Handle Right(UnsafeAABBTree<T>.Handle handle) Parameters Type Name Description UnsafeAABBTree.Handle <> handle Returns Type Description UnsafeAABBTree.Handle <> Implements System.IDisposable"
  },
  "api/ProjectDawn.Collections.LowLevel.Unsafe.UnsafeHeap-2.html": {
    "href": "api/ProjectDawn.Collections.LowLevel.Unsafe.UnsafeHeap-2.html",
    "title": "Struct UnsafeHeap<TKey, TValue>",
    "keywords": "Struct UnsafeHeap<TKey, TValue> An unmanaged, resizable min heap, without any thread safety check features. Implements System.IDisposable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Collections.LowLevel.Unsafe Assembly : ProjectDawn.Collections.dll Syntax public struct UnsafeHeap<TKey, TValue> : IDisposable where TKey : struct, IComparable<TKey> where TValue : struct Type Parameters Name Description TKey The type of the key. TValue The type of the element. Constructors | Improve this Doc View Source UnsafeHeap(Int32, AllocatorManager.AllocatorHandle) Initialized and returns an instance of heap. Declaration public UnsafeHeap(int initialCapacity, AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description System.Int32 initialCapacity Unity.Collections.AllocatorManager.AllocatorHandle allocator The allocator to use. Properties | Improve this Doc View Source Capacity The number of elements that can fit in the internal buffer. Declaration public int Capacity { get; set; } Property Value Type Description System.Int32 The number of elements that can fit in the internal buffer. | Improve this Doc View Source IsCreated Whether this heap has been allocated (and not yet deallocated). Declaration public bool IsCreated { get; } Property Value Type Description System.Boolean True if this heap has been allocated (and not yet deallocated). | Improve this Doc View Source IsEmpty Whether the heap is empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean True if the heap is empty or the queue has not been constructed. | Improve this Doc View Source Length The number of elements. Declaration public int Length { get; set; } Property Value Type Description System.Int32 The number of elements. Methods | Improve this Doc View Source Clear() Sets the length to 0. Declaration public void Clear() Remarks Does not change the capacity. | Improve this Doc View Source Create(Int32, AllocatorManager.AllocatorHandle) Creates a new container with the specified initial capacity and type of memory allocation. Declaration public static UnsafeHeap<TKey, TValue>*Create(int initialCapacity, AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the list. If the list grows larger than its capacity, the internal array is copied to a new, larger array. Unity.Collections.AllocatorManager.AllocatorHandle allocator A member of the Unity.Collections.Allocator enumeration. Returns Type Description UnsafeHeap <TKey, TValue>* | Improve this Doc View Source Destroy(UnsafeHeap<TKey, TValue>*) Destroys container. Declaration public static void Destroy(UnsafeHeap<TKey, TValue>*data) Parameters Type Name Description UnsafeHeap <TKey, TValue>* data | Improve this Doc View Source Dispose() Releases all resources (memory). Declaration public void Dispose() | Improve this Doc View Source GetKeyArray(AllocatorManager.AllocatorHandle) Returns an array with a copy of all this heap map's keys (in no particular order). Declaration public NativeArray<TKey> GetKeyArray(AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description Unity.Collections.AllocatorManager.AllocatorHandle allocator The allocator to use. Returns Type Description Unity.Collections.NativeArray <TKey> An array with a copy of all this hash map's keys (in no particular order). | Improve this Doc View Source GetValueArray(AllocatorManager.AllocatorHandle) Returns an array with a copy of all this heap map's values (in no particular order). Declaration public NativeArray<TValue> GetValueArray(AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description Unity.Collections.AllocatorManager.AllocatorHandle allocator The allocator to use. Returns Type Description Unity.Collections.NativeArray <TValue> An array with a copy of all this hash map's values (in no particular order). | Improve this Doc View Source Peek() Returns value with minimum key. Declaration public TValue Peek() Returns Type Description TValue Returns value with minimum key. | Improve this Doc View Source Pop() Returns value with minimum key. Declaration public TValue Pop() Returns Type Description TValue Returns value with minimum key. | Improve this Doc View Source Push(TKey, TValue) Adds new key and element to the heap. Declaration public bool Push(TKey key, TValue value) Parameters Type Name Description TKey key The key to be added. TValue value The value to be added. Returns Type Description System.Boolean | Improve this Doc View Source Resize(Int32, NativeArrayOptions) Sets the length, expanding the capacity if necessary. Declaration public void Resize(int length, NativeArrayOptions options = NativeArrayOptions.UninitializedMemory) Parameters Type Name Description System.Int32 length The new length. Unity.Collections.NativeArrayOptions options Whether newly allocated bytes should be zeroed out. | Improve this Doc View Source SetCapacity(Int32) Sets the capacity. Declaration public void SetCapacity(int capacity) Parameters Type Name Description System.Int32 capacity The new capacity. | Improve this Doc View Source TrimExcess() Sets the capacity to match the length. Declaration public void TrimExcess() | Improve this Doc View Source TryPop(out TValue) Returns value with minimum key. Declaration public bool TryPop(out TValue value) Parameters Type Name Description TValue value Outputs the element removed. Returns Type Description System.Boolean True if an element was removed. Remarks Does nothing if the queue is empty. Implements System.IDisposable"
  },
  "api/ProjectDawn.Collections.LowLevel.Unsafe.UnsafeKdTree-2.Handle.html": {
    "href": "api/ProjectDawn.Collections.LowLevel.Unsafe.UnsafeKdTree-2.Handle.html",
    "title": "Struct UnsafeKdTree<TValue, TComparer>.Handle",
    "keywords": "Struct UnsafeKdTree<TValue, TComparer>.Handle Kd Tree iterator. Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Collections.LowLevel.Unsafe Assembly : ProjectDawn.Collections.dll Syntax public struct Handle Properties | Improve this Doc View Source Valid Returns true if handle is valid. Declaration public bool Valid { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(UnsafeKdTree<TValue, TComparer>.Handle, UnsafeKdTree<TValue, TComparer>.Handle) Declaration public static bool operator ==(UnsafeKdTree<TValue, TComparer>.Handle lhs, UnsafeKdTree<TValue, TComparer>.Handle rhs) Parameters Type Name Description UnsafeKdTree.Handle <> lhs UnsafeKdTree.Handle <> rhs Returns Type Description System.Boolean | Improve this Doc View Source Implicit(UnsafeKdTree<TValue, TComparer>.Handle to Int32) Declaration public static implicit operator int (UnsafeKdTree<TValue, TComparer>.Handle handled) Parameters Type Name Description UnsafeKdTree.Handle <> handled Returns Type Description System.Int32 | Improve this Doc View Source Inequality(UnsafeKdTree<TValue, TComparer>.Handle, UnsafeKdTree<TValue, TComparer>.Handle) Declaration public static bool operator !=(UnsafeKdTree<TValue, TComparer>.Handle lhs, UnsafeKdTree<TValue, TComparer>.Handle rhs) Parameters Type Name Description UnsafeKdTree.Handle <> lhs UnsafeKdTree.Handle <> rhs Returns Type Description System.Boolean"
  },
  "api/ProjectDawn.Collections.LowLevel.Unsafe.UnsafeKdTree-2.html": {
    "href": "api/ProjectDawn.Collections.LowLevel.Unsafe.UnsafeKdTree-2.html",
    "title": "Struct UnsafeKdTree<TValue, TComparer>",
    "keywords": "Struct UnsafeKdTree<TValue, TComparer> An unmanaged, resizable k-d tree, without any thread safety check features. K-d tree (short for k-dimensional tree) is a space-partitioning data structure for organizing points in a k-dimensional space. K-d trees are a useful data structure for several applications, such as searches involving a multidimensional search key (e.g. range searches and nearest neighbor searches) and creating point clouds. K-d trees are a special case of binary space partitioning trees. Implements System.IDisposable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Collections.LowLevel.Unsafe Assembly : ProjectDawn.Collections.dll Syntax public struct UnsafeKdTree<TValue, TComparer> : IDisposable where TValue : struct where TComparer : struct, IKdTreeComparer<TValue> Type Parameters Name Description TValue The type of the elements. TComparer The type of the comparer for sorting elements. Constructors | Improve this Doc View Source UnsafeKdTree(Int32, AllocatorManager.AllocatorHandle, TComparer) Initialized and returns an instance of NativeKdTree. Declaration public UnsafeKdTree(int initialCapacity, AllocatorManager.AllocatorHandle allocator, TComparer comparer = default(TComparer)) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the priority queue. Unity.Collections.AllocatorManager.AllocatorHandle allocator The allocator to use. TComparer comparer The element comparer to use. Properties | Improve this Doc View Source Capacity The number of elements that fit in the current allocation. Declaration public int Capacity { get; } Property Value Type Description System.Int32 The number of elements that fit in the current allocation. | Improve this Doc View Source IsCreated Whether this tree has been allocated (and not yet deallocated). Declaration public bool IsCreated { get; } Property Value Type Description System.Boolean True if this tree has been allocated (and not yet deallocated). | Improve this Doc View Source IsEmpty Whether the tree is empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean True if the tree is empty or the tree has not been constructed. | Improve this Doc View Source Item[UnsafeKdTree<TValue, TComparer>.Handle] The element at a given position. Declaration public TValue this[UnsafeKdTree<TValue, TComparer>.Handle handle] { get; set; } Parameters Type Name Description UnsafeKdTree.Handle <> handle Handle of the element. Property Value Type Description TValue | Improve this Doc View Source Length The number of elements. Declaration public int Length { get; } Property Value Type Description System.Int32 The number of elements. | Improve this Doc View Source Root Returns the tree root. Declaration public UnsafeKdTree<TValue, TComparer>.Handle Root { get; } Property Value Type Description UnsafeKdTree.Handle <> Methods | Improve this Doc View Source Add(TValue) Add element to the tree. Declaration public UnsafeKdTree<TValue, TComparer>.Handle Add(TValue value) Parameters Type Name Description TValue value The value to add. Returns Type Description UnsafeKdTree.Handle <> | Improve this Doc View Source Build(NativeArray<TValue>) Builds balanced tree from elements. Declaration public void Build(NativeArray<TValue> values) Parameters Type Name Description Unity.Collections.NativeArray <TValue> values The values that will be used for building tree. | Improve this Doc View Source Clear() Removes all nodes of this tree. Declaration public void Clear() Remarks Does not change the capacity. | Improve this Doc View Source Create(Int32, AllocatorManager.AllocatorHandle, TComparer) Creates a new container with the specified initial capacity and type of memory allocation. Declaration public static UnsafeKdTree<TValue, TComparer>*Create(int initialCapacity, AllocatorManager.AllocatorHandle allocator, TComparer comparer = default(TComparer)) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the list. If the list grows larger than its capacity, the internal array is copied to a new, larger array. Unity.Collections.AllocatorManager.AllocatorHandle allocator A member of the Unity.Collections.Allocator enumeration. TComparer comparer Returns Type Description UnsafeKdTree <TValue, TComparer>* | Improve this Doc View Source Destroy(UnsafeKdTree<TValue, TComparer>*) Destroys container. Declaration public static void Destroy(UnsafeKdTree<TValue, TComparer>*data) Parameters Type Name Description UnsafeKdTree <TValue, TComparer>* data | Improve this Doc View Source Dispose() Releases all resources (memory and safety handles). Declaration public void Dispose() | Improve this Doc View Source FindNearest(TValue, out Int32, Int32) Declaration public UnsafeKdTree<TValue, TComparer>.Handle FindNearest(TValue value, out int numSearch, int maxSearch = 2147483647) Parameters Type Name Description TValue value System.Int32 numSearch System.Int32 maxSearch Returns Type Description UnsafeKdTree.Handle <> | Improve this Doc View Source FindNearestRange(TValue, Int32, ref NativeList<TValue>, out Int32, Int32) The k-d nearest n neighbor search. Declaration public void FindNearestRange(TValue value, int maxResult, ref NativeList<TValue> result, out int numSearch, int maxSearch = 2147483647) Parameters Type Name Description TValue value The value used for searching element. System.Int32 maxResult The number of nearest neighbors to search. Unity.Collections.NativeList <TValue> result Outputs the found elements. System.Int32 numSearch The number of elements searched. System.Int32 maxSearch The maximum number elements that can be searched. Quite useful for approximate search. | Improve this Doc View Source FindRadius(TValue, Single, ref NativeList<TValue>, out Int32, Int32) The k-d radius search. Declaration public void FindRadius(TValue value, float maxDistance, ref NativeList<TValue> result, out int numSearch, int maxSearch = 2147483647) Parameters Type Name Description TValue value The value used for searching element. System.Single maxDistance The maximum distance from value used for searching. Unity.Collections.NativeList <TValue> result Outputs the found elements. System.Int32 numSearch The number of elements searched. System.Int32 maxSearch The maximum number elements that can be searched. Quite useful for approximate search. | Improve this Doc View Source GetDepth() Returns the depth of the tree. It is the maximum height of all nodes. Declaration public int GetDepth() Returns Type Description System.Int32 | Improve this Doc View Source Left(UnsafeKdTree<TValue, TComparer>.Handle) Returns left child of handle. Declaration public UnsafeKdTree<TValue, TComparer>.Handle Left(UnsafeKdTree<TValue, TComparer>.Handle handle) Parameters Type Name Description UnsafeKdTree.Handle <> handle Returns Type Description UnsafeKdTree.Handle <> | Improve this Doc View Source Parent(UnsafeKdTree<TValue, TComparer>.Handle) Returns parents fo the handle/ Declaration public UnsafeKdTree<TValue, TComparer>.Handle Parent(UnsafeKdTree<TValue, TComparer>.Handle handle) Parameters Type Name Description UnsafeKdTree.Handle <> handle Returns Type Description UnsafeKdTree.Handle <> | Improve this Doc View Source RemoveAt(UnsafeKdTree<TValue, TComparer>.Handle) Removes node from the tree at givent iterator value. Declaration public void RemoveAt(UnsafeKdTree<TValue, TComparer>.Handle iterator) Parameters Type Name Description UnsafeKdTree.Handle <> iterator Position from which node will be removed. | Improve this Doc View Source Right(UnsafeKdTree<TValue, TComparer>.Handle) Returns right child of handle. Declaration public UnsafeKdTree<TValue, TComparer>.Handle Right(UnsafeKdTree<TValue, TComparer>.Handle handle) Parameters Type Name Description UnsafeKdTree.Handle <> handle Returns Type Description UnsafeKdTree.Handle <> Implements System.IDisposable"
  },
  "api/ProjectDawn.Collections.LowLevel.Unsafe.UnsafeLinkedList-1.Enumerator.html": {
    "href": "api/ProjectDawn.Collections.LowLevel.Unsafe.UnsafeLinkedList-1.Enumerator.html",
    "title": "Struct UnsafeLinkedList<T>.Enumerator",
    "keywords": "Struct UnsafeLinkedList<T>.Enumerator Implements System.Collections.Generic.IEnumerator <T> System.Collections.IEnumerator System.IDisposable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Collections.LowLevel.Unsafe Assembly : ProjectDawn.Collections.dll Syntax public struct Enumerator : IEnumerator<T>, IEnumerator, IDisposable Properties | Improve this Doc View Source Current Declaration public T Current { get; } Property Value Type Description T Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description System.Boolean | Improve this Doc View Source Reset() Declaration public void Reset() Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description System.Object Implements System.Collections.Generic.IEnumerator<T> System.Collections.IEnumerator System.IDisposable"
  },
  "api/ProjectDawn.Collections.LowLevel.Unsafe.UnsafeLinkedList-1.Handle.html": {
    "href": "api/ProjectDawn.Collections.LowLevel.Unsafe.UnsafeLinkedList-1.Handle.html",
    "title": "Struct UnsafeLinkedList<T>.Handle",
    "keywords": "Struct UnsafeLinkedList<T>.Handle Linked list iterator. Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Collections.LowLevel.Unsafe Assembly : ProjectDawn.Collections.dll Syntax public struct Handle Constructors | Improve this Doc View Source Handle(Int32) Declaration public Handle(int handle) Parameters Type Name Description System.Int32 handle Properties | Improve this Doc View Source Valid Returns true if handle is valid. Declaration public bool Valid { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(UnsafeLinkedList<T>.Handle, UnsafeLinkedList<T>.Handle) Declaration public static bool operator ==(UnsafeLinkedList<T>.Handle lhs, UnsafeLinkedList<T>.Handle rhs) Parameters Type Name Description UnsafeLinkedList.Handle <> lhs UnsafeLinkedList.Handle <> rhs Returns Type Description System.Boolean | Improve this Doc View Source Implicit(UnsafeLinkedList<T>.Handle to Int32) Declaration public static implicit operator int (UnsafeLinkedList<T>.Handle handled) Parameters Type Name Description UnsafeLinkedList.Handle <> handled Returns Type Description System.Int32 | Improve this Doc View Source Inequality(UnsafeLinkedList<T>.Handle, UnsafeLinkedList<T>.Handle) Declaration public static bool operator !=(UnsafeLinkedList<T>.Handle lhs, UnsafeLinkedList<T>.Handle rhs) Parameters Type Name Description UnsafeLinkedList.Handle <> lhs UnsafeLinkedList.Handle <> rhs Returns Type Description System.Boolean"
  },
  "api/ProjectDawn.Collections.LowLevel.Unsafe.UnsafeLinkedList-1.html": {
    "href": "api/ProjectDawn.Collections.LowLevel.Unsafe.UnsafeLinkedList-1.html",
    "title": "Struct UnsafeLinkedList<T>",
    "keywords": "Struct UnsafeLinkedList<T> An unmanaged, resizable linked list, without any thread safety check features. Implements System.IDisposable System.Collections.Generic.IEnumerable <T> System.Collections.IEnumerable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Collections.LowLevel.Unsafe Assembly : ProjectDawn.Collections.dll Syntax public struct UnsafeLinkedList<T> : IDisposable, IEnumerable<T>, IEnumerable where T : struct Type Parameters Name Description T The type of the elements. Remarks The elements are not stored contiguously in a buffer rather than in true linked nodes. Constructors | Improve this Doc View Source UnsafeLinkedList(Int32, AllocatorManager.AllocatorHandle) Initializes and returns an instance of UnsafeLinkedList. Declaration public UnsafeLinkedList(int initialCapacity, AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the list. Unity.Collections.AllocatorManager.AllocatorHandle allocator The allocator to use. Properties | Improve this Doc View Source Allocator Allocator used by this data structure. Declaration public AllocatorManager.AllocatorHandle Allocator { get; } Property Value Type Description Unity.Collections.AllocatorManager.AllocatorHandle | Improve this Doc View Source Begin Returns an iterator pointing to the first element in the list container. Declaration public UnsafeLinkedList<T>.Handle Begin { get; } Property Value Type Description UnsafeLinkedList.Handle <> | Improve this Doc View Source Capacity The number of elements that fit in the current allocation. Declaration public int Capacity { get; } Property Value Type Description System.Int32 The number of elements that fit in the current allocation. | Improve this Doc View Source End Returns an iterator referring to the past-the-end element in the list container. The past-the-end element is the theoretical element that would follow the last element in the list container. It does not point to any element, and thus shall not be dereferenced. Declaration public UnsafeLinkedList<T>.Handle End { get; } Property Value Type Description UnsafeLinkedList.Handle <> | Improve this Doc View Source IsCreated Whether this list has been allocated (and not yet deallocated). Declaration public bool IsCreated { get; } Property Value Type Description System.Boolean True if this queue has been allocated (and not yet deallocated). | Improve this Doc View Source Item[UnsafeLinkedList<T>.Handle] The element at a given position. Declaration public T this[UnsafeLinkedList<T>.Handle handle] { get; set; } Parameters Type Name Description UnsafeLinkedList.Handle <> handle Handle of the element. Property Value Type Description T | Improve this Doc View Source Length The number of elements. Declaration public int Length { get; } Property Value Type Description System.Int32 The number of elements. Methods | Improve this Doc View Source Add(T) Appends an element to the end of this list. Declaration public UnsafeLinkedList<T>.Handle Add(in T value) Parameters Type Name Description T value The value to add to the end of this list. Returns Type Description UnsafeLinkedList.Handle <> Remarks Length is incremented by 1. If necessary, the capacity is increased. | Improve this Doc View Source Clear() Removes all elements of this queue. Declaration public void Clear() Remarks Does not change the capacity. | Improve this Doc View Source Create(Int32, AllocatorManager.AllocatorHandle) Creates a new container with the specified initial capacity and type of memory allocation. Declaration public static UnsafeLinkedList<T>*Create(int initialCapacity, AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the list. If the list grows larger than its capacity, the internal array is copied to a new, larger array. Unity.Collections.AllocatorManager.AllocatorHandle allocator A member of the Unity.Collections.Allocator enumeration. Returns Type Description UnsafeLinkedList <T>* | Improve this Doc View Source Destroy(UnsafeLinkedList<T>*) Destroys container. Declaration public static void Destroy(UnsafeLinkedList<T>*data) Parameters Type Name Description UnsafeLinkedList <T>* data | Improve this Doc View Source Dispose() Releases all resources (memory and safety handles). Declaration public void Dispose() | Improve this Doc View Source GetEnumerator() Returns an enumerator over the elements of this linked list. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> | Improve this Doc View Source GetUnsafePtr(UnsafeLinkedList<T>.Handle) Declaration public T*GetUnsafePtr(UnsafeLinkedList<T>.Handle handle) Parameters Type Name Description UnsafeLinkedList.Handle <> handle Returns Type Description T* | Improve this Doc View Source Insert(UnsafeLinkedList<T>.Handle, T) The container is extended by inserting new elements before the element at the specified position. Declaration public UnsafeLinkedList<T>.Handle Insert(in UnsafeLinkedList<T>.Handle iterator, in T value) Parameters Type Name Description UnsafeLinkedList.Handle <> iterator Position in the container where the new elements are inserted. T value Value to be copied (or moved) to the inserted elements. Returns Type Description UnsafeLinkedList.Handle <> Remarks Length is incremented by 1. If necessary, the capacity is increased. | Improve this Doc View Source Next(UnsafeLinkedList<T>.Handle) Returns next handle. Declaration public UnsafeLinkedList<T>.Handle Next(UnsafeLinkedList<T>.Handle handle) Parameters Type Name Description UnsafeLinkedList.Handle <> handle Returns Type Description UnsafeLinkedList.Handle <> | Improve this Doc View Source Previous(UnsafeLinkedList<T>.Handle) Returns previous handle. Declaration public UnsafeLinkedList<T>.Handle Previous(UnsafeLinkedList<T>.Handle handle) Parameters Type Name Description UnsafeLinkedList.Handle <> handle Returns Type Description UnsafeLinkedList.Handle <> | Improve this Doc View Source RemoveAt(UnsafeLinkedList<T>.Handle) Removes the element at an position. Decrements the length by 1. Declaration public void RemoveAt(in UnsafeLinkedList<T>.Handle iterator) Parameters Type Name Description UnsafeLinkedList.Handle <> iterator Position in the container where the element will be removed. | Improve this Doc View Source Sort<U>(ref UnsafeLinkedList<T>.Handle, ref UnsafeLinkedList<T>.Handle, U) Sorts this list using a custom comparison. Uses insertion sort algorithm. Declaration public void Sort<U>(ref UnsafeLinkedList<T>.Handle begin, ref UnsafeLinkedList<T>.Handle end, U comparer) where U : struct, IComparer<T> Parameters Type Name Description UnsafeLinkedList.Handle <> begin Sort begin iterator. UnsafeLinkedList.Handle <> end Sort end iterator. U comparer The comparison function used to determine the relative order of the elements. Type Parameters Name Description U The comparer type. | Improve this Doc View Source ToArray(Allocator) Returns an array containing a copy of this list's content. Declaration public NativeArray<T> ToArray(Allocator allocator) Parameters Type Name Description Unity.Collections.Allocator allocator The allocator to use. Returns Type Description Unity.Collections.NativeArray <T> An array containing a copy of this queue's content. Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.IDisposable System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/ProjectDawn.Collections.LowLevel.Unsafe.UnsafeLinkedPriorityQueue-2.html": {
    "href": "api/ProjectDawn.Collections.LowLevel.Unsafe.UnsafeLinkedPriorityQueue-2.html",
    "title": "Struct UnsafeLinkedPriorityQueue<TValue, TComparer>",
    "keywords": "Struct UnsafeLinkedPriorityQueue<TValue, TComparer> An unmanaged, resizable priority queue, without any thread safety check features. Priority queue main difference from regular queue that before element enqueue it executes insert sort. It is implemented using linked list. Peek = O(1), Enqueue = O(n), Dequeue = O(1). Implements System.IDisposable System.Collections.Generic.IEnumerable <TValue> System.Collections.IEnumerable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Collections.LowLevel.Unsafe Assembly : ProjectDawn.Collections.dll Syntax public struct UnsafeLinkedPriorityQueue<TValue, TComparer> : IDisposable, IEnumerable<TValue>, IEnumerable where TValue : struct where TComparer : struct, IComparer<TValue> Type Parameters Name Description TValue The type of the elements. TComparer The type of comparer used for comparing elements. Constructors | Improve this Doc View Source UnsafeLinkedPriorityQueue(Int32, AllocatorManager.AllocatorHandle, TComparer) Initialized and returns an instance of NativePriorityQueue. Declaration public UnsafeLinkedPriorityQueue(int initialCapacity, AllocatorManager.AllocatorHandle allocator, TComparer comparer = default(TComparer)) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the priority queue. Unity.Collections.AllocatorManager.AllocatorHandle allocator The allocator to use. TComparer comparer The element comparer to use. Fields | Improve this Doc View Source m_Data Declaration public UnsafeLinkedList<TValue> m_Data Field Value Type Description UnsafeLinkedList <TValue> Properties | Improve this Doc View Source Allocator Allocator used by this data structure. Declaration public AllocatorManager.AllocatorHandle Allocator { get; } Property Value Type Description Unity.Collections.AllocatorManager.AllocatorHandle | Improve this Doc View Source Capacity The number of elements that fit in the current allocation. Declaration public int Capacity { get; } Property Value Type Description System.Int32 The number of elements that fit in the current allocation. | Improve this Doc View Source IsCreated Whether this queue has been allocated (and not yet deallocated). Declaration public bool IsCreated { get; } Property Value Type Description System.Boolean True if this queue has been allocated (and not yet deallocated). | Improve this Doc View Source IsEmpty Whether the queue is empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean True if the queue is empty or the queue has not been constructed. | Improve this Doc View Source Length The number of elements. Declaration public int Length { get; } Property Value Type Description System.Int32 The number of elements. Methods | Improve this Doc View Source Clear() Removes all elements of this queue. Declaration public void Clear() Remarks Does not change the capacity. | Improve this Doc View Source Create(Int32, AllocatorManager.AllocatorHandle, TComparer) Creates a new container with the specified initial capacity and type of memory allocation. Declaration public static UnsafeLinkedPriorityQueue<TValue, TComparer>*Create(int initialCapacity, AllocatorManager.AllocatorHandle allocator, TComparer comparer = default(TComparer)) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the list. If the list grows larger than its capacity, the internal array is copied to a new, larger array. Unity.Collections.AllocatorManager.AllocatorHandle allocator A member of the Unity.Collections.Allocator enumeration. TComparer comparer The element comparer to use. Returns Type Description UnsafeLinkedPriorityQueue <TValue, TComparer>* | Improve this Doc View Source Dequeue() Removes the element from the end of the queue. Declaration public TValue Dequeue() Returns Type Description TValue Returns the removed element. Exceptions Type Condition System.InvalidOperationException Thrown if the queue was empty. | Improve this Doc View Source Destroy(UnsafeLinkedPriorityQueue<TValue, TComparer>*) Destroys container. Declaration public static void Destroy(UnsafeLinkedPriorityQueue<TValue, TComparer>*data) Parameters Type Name Description UnsafeLinkedPriorityQueue <TValue, TComparer>* data | Improve this Doc View Source Dispose() Releases all resources (memory and safety handles). Declaration public void Dispose() | Improve this Doc View Source Enqueue(TValue) Adds an element at the front of the queue. Declaration public void Enqueue(in TValue value) Parameters Type Name Description TValue value The value to be added. | Improve this Doc View Source EnqueueUnique(TValue) Adds an unique element at the front of the queue. Returns false if element already exists in queue. Declaration public bool EnqueueUnique(in TValue value) Parameters Type Name Description TValue value The value to be added. Returns Type Description System.Boolean Returns false if element already exists in queue. | Improve this Doc View Source GetEnumerator() Returns an enumerator over the elements of this linked list. Declaration public IEnumerator<TValue> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <TValue> | Improve this Doc View Source Peek() Returns the element at the end of this queue without removing it. Declaration public TValue Peek() Returns Type Description TValue The element at the end of this queue. | Improve this Doc View Source ToArray(Allocator) Returns an array containing a copy of this queue's content. Declaration public NativeArray<TValue> ToArray(Allocator allocator) Parameters Type Name Description Unity.Collections.Allocator allocator The allocator to use. Returns Type Description Unity.Collections.NativeArray <TValue> An array containing a copy of this queue's content. | Improve this Doc View Source TryDequeue(out TValue) Removes the element from the end of the queue. Declaration public bool TryDequeue(out TValue value) Parameters Type Name Description TValue value Outputs the element removed. Returns Type Description System.Boolean True if an element was removed. Remarks Does nothing if the queue is empty. Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.IDisposable System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/ProjectDawn.Collections.LowLevel.Unsafe.UnsafeStack-1.html": {
    "href": "api/ProjectDawn.Collections.LowLevel.Unsafe.UnsafeStack-1.html",
    "title": "Struct UnsafeStack<T>",
    "keywords": "Struct UnsafeStack<T> An managed, resizable stack, without any thread safety check features. Limited version of that allows only adding to list back or removing. Implements System.IDisposable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Collections.LowLevel.Unsafe Assembly : ProjectDawn.Collections.dll Syntax public struct UnsafeStack<T> : IDisposable where T : struct Type Parameters Name Description T Source type of elements Constructors | Improve this Doc View Source UnsafeStack(T*, Int32) Constructs stack as view into memory. Declaration public UnsafeStack(T*ptr, int length) Parameters Type Name Description T* ptr System.Int32 length | Improve this Doc View Source UnsafeStack(Int32, AllocatorManager.AllocatorHandle, NativeArrayOptions) Constructs a new stack using the specified type of memory allocation. Declaration public UnsafeStack(int initialCapacity, AllocatorManager.AllocatorHandle allocator, NativeArrayOptions options = NativeArrayOptions.UninitializedMemory) Parameters Type Name Description System.Int32 initialCapacity Unity.Collections.AllocatorManager.AllocatorHandle allocator A member of the Unity.Collections.Allocator enumeration. Unity.Collections.NativeArrayOptions options Memory should be cleared on allocation or left uninitialized. Remarks The stack initially has a capacity of one. To avoid reallocating memory for the stack, specify sufficient capacity up front. Fields | Improve this Doc View Source Allocator Declaration public AllocatorManager.AllocatorHandle Allocator Field Value Type Description Unity.Collections.AllocatorManager.AllocatorHandle | Improve this Doc View Source capacity Declaration public int capacity Field Value Type Description System.Int32 | Improve this Doc View Source length Declaration public int length Field Value Type Description System.Int32 | Improve this Doc View Source Ptr Declaration [NativeDisableUnsafePtrRestriction] public T*Ptr Field Value Type Description T* Properties | Improve this Doc View Source Capacity The number of elements that fit in the current allocation. Declaration public int Capacity { get; set; } Property Value Type Description System.Int32 The number of elements that fit in the current allocation. | Improve this Doc View Source IsCreated Reports whether memory for the container is allocated. Declaration public bool IsCreated { get; } Property Value Type Description System.Boolean True if this container object's internal storage has been allocated. Remarks Note that the container storage is not created if you use the default constructor. You must specify at least an allocation type to construct a usable container. | Improve this Doc View Source IsEmpty Whether the stack is empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean True if the stack is empty or the stack has not been constructed. | Improve this Doc View Source Length The number of elements. Declaration public int Length { get; } Property Value Type Description System.Int32 The number of elements. Methods | Improve this Doc View Source Clear() Clears the container. Declaration public void Clear() Remarks Stack Capacity remains unchanged. | Improve this Doc View Source Create(Int32, AllocatorManager.AllocatorHandle, NativeArrayOptions) Creates a new container with the specified initial capacity and type of memory allocation. Declaration public static UnsafeStack<T>*Create(int initialCapacity, AllocatorManager.AllocatorHandle allocator, NativeArrayOptions options = NativeArrayOptions.UninitializedMemory) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the list. If the list grows larger than its capacity, the internal array is copied to a new, larger array. Unity.Collections.AllocatorManager.AllocatorHandle allocator A member of the Unity.Collections.Allocator enumeration. Unity.Collections.NativeArrayOptions options Memory should be cleared on allocation or left uninitialized. Returns Type Description UnsafeStack <T>* | Improve this Doc View Source Destroy(UnsafeStack<T>*) Destroys container. Declaration public static void Destroy(UnsafeStack<T>*data) Parameters Type Name Description UnsafeStack <T>* data | Improve this Doc View Source Dispose() Disposes of this container and deallocates its memory immediately. Declaration public void Dispose() | Improve this Doc View Source Dispose(JobHandle) Safely disposes of this container and deallocates its memory when the jobs that use it have completed. Declaration public JobHandle Dispose(JobHandle inputDeps) Parameters Type Name Description Unity.Jobs.JobHandle inputDeps The job handle or handles for any scheduled jobs that use this container. Returns Type Description Unity.Jobs.JobHandle A new job handle containing the prior handles as well as the handle for the job that deletes the container. Remarks You can call this function dispose of the container immediately after scheduling the job. Pass the JobHandle returned by the Job.Schedule method using the jobHandle parameter so the job scheduler can dispose the container after all jobs using it have run. | Improve this Doc View Source Pop() Removes the element from the end of the stack. Declaration public T Pop() Returns Type Description T | Improve this Doc View Source Push(T) Pushs an element to the stack. Declaration public void Push(T value) Parameters Type Name Description T value The struct to be added at the end of the stack. | Improve this Doc View Source PushNoResize(T) Pushs an element to the container. Declaration public void PushNoResize(T value) Parameters Type Name Description T value The value to be added at the end of the container. Remarks If the stack has reached its current capacity, internal array won't be resized, and exception will be thrown. | Improve this Doc View Source PushRangeNoResize(Void*, Int32) Pushs the elements to this container. Declaration public void PushRangeNoResize(void *ptr, int length) Parameters Type Name Description System.Void * ptr A pointer to the buffer. System.Int32 length The number of elements to add to the container. Remarks If the stack has reached its current capacity, internal array won't be resized, and exception will be thrown. | Improve this Doc View Source SetCapacity(Int32) Set the number of items that can fit in the stack. Declaration public void SetCapacity(int capacity) Parameters Type Name Description System.Int32 capacity The number of items that the stack can hold before it resizes its internal storage. | Improve this Doc View Source TrimExcess() Sets the capacity to the actual number of elements in the container. Declaration public void TrimExcess() | Improve this Doc View Source TryPop(out T) Removes the element from the end of the stack. Declaration public bool TryPop(out T value) Parameters Type Name Description T value Outputs the element removed. Returns Type Description System.Boolean True if an element was removed. Remarks Does nothing if the queue is empty. Implements System.IDisposable"
  },
  "api/ProjectDawn.Collections.LowLevel.Unsafe.UnsafeStructureList.html": {
    "href": "api/ProjectDawn.Collections.LowLevel.Unsafe.UnsafeStructureList.html",
    "title": "Struct UnsafeStructureList",
    "keywords": "Struct UnsafeStructureList Implements System.IDisposable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Collections.LowLevel.Unsafe Assembly : ProjectDawn.Collections.dll Syntax public struct UnsafeStructureList : IDisposable Constructors | Improve this Doc View Source UnsafeStructureList(Int32, NativeArray<Int32>, AllocatorManager.AllocatorHandle) Initializes and returns an instance of UnsafeStructureList. Declaration public UnsafeStructureList(int initialCapacity, NativeArray<int> sizes, AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the list. Unity.Collections.NativeArray < System.Int32 > sizes Unity.Collections.AllocatorManager.AllocatorHandle allocator The allocator to use. Properties | Improve this Doc View Source ArrayCount The number of arrays. Declaration public int ArrayCount { get; } Property Value Type Description System.Int32 The number of arrays. | Improve this Doc View Source Capacity The number of elements that fit in the current allocation. Declaration public int Capacity { get; } Property Value Type Description System.Int32 The number of elements that fit in the current allocation. | Improve this Doc View Source IsCreated Whether this list has been allocated (and not yet deallocated). Declaration public bool IsCreated { get; } Property Value Type Description System.Boolean True if this queue has been allocated (and not yet deallocated). | Improve this Doc View Source IsEmpty Whether the list is empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean True if the list is empty or the list has not been constructed. | Improve this Doc View Source Length The number of elements. Declaration public int Length { get; } Property Value Type Description System.Int32 The number of elements. Methods | Improve this Doc View Source Clear() Removes all elements of this queue. Declaration public void Clear() Remarks Does not change the capacity. | Improve this Doc View Source Create(Int32, NativeArray<Int32>, AllocatorManager.AllocatorHandle) Creates a new container with the specified initial capacity and type of memory allocation. Declaration public static UnsafeStructureList*Create(int initialCapacity, NativeArray<int> sizes, AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the list. If the list grows larger than its capacity, the internal array is copied to a new, larger array. Unity.Collections.NativeArray < System.Int32 > sizes Unity.Collections.AllocatorManager.AllocatorHandle allocator A member of the Unity.Collections.Allocator enumeration. Returns Type Description UnsafeStructureList * | Improve this Doc View Source Destroy(UnsafeStructureList*) Destroys container. Declaration public static void Destroy(UnsafeStructureList*data) Parameters Type Name Description UnsafeStructureList * data | Improve this Doc View Source Dispose() Releases all resources (memory and safety handles). Declaration public void Dispose() | Improve this Doc View Source GetUnsafeArrayPointer<T>(Int32) Returns unsafe pointer to array at index. Declaration public T*GetUnsafeArrayPointer<T>(int index) where T : struct Parameters Type Name Description System.Int32 index The index of array. Returns Type Description T* Returns unsafe pointer to array at index. Type Parameters Name Description T The type of the array. | Improve this Doc View Source Resize(Int32, NativeArrayOptions) Sets the length, expanding the capacity if necessary. Declaration public void Resize(int length, NativeArrayOptions options = NativeArrayOptions.UninitializedMemory) Parameters Type Name Description System.Int32 length The new length. Unity.Collections.NativeArrayOptions options Whether newly allocated bytes should be zeroed out. | Improve this Doc View Source SetCapacity(Int32) Sets the capacity. Declaration public void SetCapacity(int capacity) Parameters Type Name Description System.Int32 capacity The new capacity. Implements System.IDisposable"
  },
  "api/ProjectDawn.Collections.NativeAABBTree-1.html": {
    "href": "api/ProjectDawn.Collections.NativeAABBTree-1.html",
    "title": "Struct NativeAABBTree<T>",
    "keywords": "Struct NativeAABBTree<T> An unmanaged, resizable aabb tree. AABB tree (short for axis aligned bounding box tree) is a space-partitioning data structure for organizing bounding shapes in space. As structure uses generic it is not only usable for boxes, but any shape that implements interfaces. AABB trees are a useful data structure for fast searching bounding shapes in space. AABB trees are a special case of binary space partitioning trees. Based on https://box2d.org/files/ErinCatto_DynamicBVH_GDC2019.pdf . Implements System.IDisposable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Collections Assembly : ProjectDawn.Collections.dll Syntax [NativeContainer] public struct NativeAABBTree<T> : IDisposable where T : struct, ISurfaceArea<T>, IUnion<T> Type Parameters Name Description T The type of the bounding shape. Constructors | Improve this Doc View Source NativeAABBTree(Int32, Allocator) Initialized and returns an instance of NativeAABBTree. Declaration public NativeAABBTree(int initialCapacity, Allocator allocator) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the priority queue. Unity.Collections.Allocator allocator The allocator to use. Properties | Improve this Doc View Source Capacity The number of elements that fit in the current allocation. Declaration public int Capacity { get; } Property Value Type Description System.Int32 The number of elements that fit in the current allocation. | Improve this Doc View Source IsCreated Whether this tree has been allocated (and not yet deallocated). Declaration public bool IsCreated { get; } Property Value Type Description System.Boolean True if this tree has been allocated (and not yet deallocated). | Improve this Doc View Source IsEmpty Whether the tree is empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean True if the tree is empty or the tree has not been constructed. | Improve this Doc View Source Length The number of elements. Declaration public int Length { get; } Property Value Type Description System.Int32 The number of elements. | Improve this Doc View Source Root Returns the tree root. Declaration public NativeAABBTree<T>.Iterator Root { get; } Property Value Type Description NativeAABBTree.Iterator <> Methods | Improve this Doc View Source Add(T) Add element to the tree. Declaration public NativeAABBTree<T>.Iterator Add(T value) Parameters Type Name Description T value The value to add. Returns Type Description NativeAABBTree.Iterator <> | Improve this Doc View Source Build(NativeArray<T>) Builds aabb tree with given array of values. Declaration public void Build(in NativeArray<T> array) Parameters Type Name Description Unity.Collections.NativeArray <T> array | Improve this Doc View Source Clear() Removes all nodes of this tree. Declaration public void Clear() Remarks Does not change the capacity. | Improve this Doc View Source Cost() Returns the sum of all non leaf surface area. The lower the number is, the more optimal a tree will be. Declaration public float Cost() Returns Type Description System.Single | Improve this Doc View Source CountLeafs() Returns the number leaf nodes in this aabb tree. Declaration public int CountLeafs() Returns Type Description System.Int32 Returns the number leaf nodes in this aabb tree. | Improve this Doc View Source Dispose() Releases all resources (memory and safety handles). Declaration public void Dispose() | Improve this Doc View Source FindOverlap<U>(U, ref NativeList<T>) Find all bounding shapes that overlap with value. Declaration public int FindOverlap<U>(U value, ref NativeList<T> result) where U : struct, IOverlap<T> Parameters Type Name Description U value Value that will be used for testing overlap. Unity.Collections.NativeList <T> result Array of the bounding shapes that overlap. Returns Type Description System.Int32 Returns the number of bounding shapes overlap. Type Parameters Name Description U | Improve this Doc View Source GetBalancedTreeFactor() Returns factor from zero to one. Where one represents if tree is balanced and zero is unbalanced. This value can be used to decide if tree needs balancing. Declaration public float GetBalancedTreeFactor() Returns Type Description System.Single Returns factor from zero to one. Where zero represents if tree is balanced and one is unbalanced. | Improve this Doc View Source GetDepth() Returns the depth of the tree. It is the maximum height of all nodes. Declaration public int GetDepth() Returns Type Description System.Int32 | Improve this Doc View Source RemoveAt(NativeAABBTree<T>.Iterator) Removes node from the tree at givent iterator value. Declaration public void RemoveAt(NativeAABBTree<T>.Iterator iterator) Parameters Type Name Description NativeAABBTree.Iterator <> iterator Position from which node will be removed. Implements System.IDisposable"
  },
  "api/ProjectDawn.Collections.NativeAABBTree-1.Iterator.html": {
    "href": "api/ProjectDawn.Collections.NativeAABBTree-1.Iterator.html",
    "title": "Struct NativeAABBTree<T>.Iterator",
    "keywords": "Struct NativeAABBTree<T>.Iterator Linked list iterator. Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Collections Assembly : ProjectDawn.Collections.dll Syntax public struct Iterator Properties | Improve this Doc View Source IsLeaf Returns true if iterator does not have childs. Declaration public bool IsLeaf { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Left Returns iterator that references to left child. Declaration public NativeAABBTree<T>.Iterator Left { get; } Property Value Type Description NativeAABBTree.Iterator <> | Improve this Doc View Source Parent Returns iterator that references to parent. Declaration public NativeAABBTree<T>.Iterator Parent { get; } Property Value Type Description NativeAABBTree.Iterator <> | Improve this Doc View Source Right Returns iterator that references to right child. Declaration public NativeAABBTree<T>.Iterator Right { get; } Property Value Type Description NativeAABBTree.Iterator <> | Improve this Doc View Source Valid Returns true if handle is valid. Declaration public bool Valid { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Value Iterator referenced value. Declaration public T Value { get; } Property Value Type Description T Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(NativeAABBTree<T>.Iterator, NativeAABBTree<T>.Iterator) Declaration public static bool operator ==(NativeAABBTree<T>.Iterator lhs, NativeAABBTree<T>.Iterator rhs) Parameters Type Name Description NativeAABBTree.Iterator <> lhs NativeAABBTree.Iterator <> rhs Returns Type Description System.Boolean | Improve this Doc View Source Implicit(NativeAABBTree<T>.Iterator to UnsafeAABBTree<T>.Handle) Declaration public static implicit operator UnsafeAABBTree<T>.Handle(NativeAABBTree<T>.Iterator iterator) Parameters Type Name Description NativeAABBTree.Iterator <> iterator Returns Type Description UnsafeAABBTree.Handle <> | Improve this Doc View Source Inequality(NativeAABBTree<T>.Iterator, NativeAABBTree<T>.Iterator) Declaration public static bool operator !=(NativeAABBTree<T>.Iterator lhs, NativeAABBTree<T>.Iterator rhs) Parameters Type Name Description NativeAABBTree.Iterator <> lhs NativeAABBTree.Iterator <> rhs Returns Type Description System.Boolean"
  },
  "api/ProjectDawn.Collections.NativeHeapPriorityQueue-2.html": {
    "href": "api/ProjectDawn.Collections.NativeHeapPriorityQueue-2.html",
    "title": "Struct NativeHeapPriorityQueue<TKey, TValue>",
    "keywords": "Struct NativeHeapPriorityQueue<TKey, TValue> An unmanaged, resizable priority queue. Priority queue main difference from regular queue that it is sorted. It is implemented using heap. Peek = O(1), Enqueue = O(log n), Dequeue = O(log n). Implements System.IDisposable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Collections Assembly : ProjectDawn.Collections.dll Syntax [NativeContainer] public struct NativeHeapPriorityQueue<TKey, TValue> : IDisposable where TKey : struct, IComparable<TKey> where TValue : struct Type Parameters Name Description TKey The type of the key. TValue The type of the element. Constructors | Improve this Doc View Source NativeHeapPriorityQueue(Int32, Allocator) Initialized and returns an instance of NativePriorityQueue. Declaration public NativeHeapPriorityQueue(int initialCapacity, Allocator allocator) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the priority queue. Unity.Collections.Allocator allocator The allocator to use. | Improve this Doc View Source NativeHeapPriorityQueue(Allocator) Initialized and returns an instance of NativePriorityQueue. Declaration public NativeHeapPriorityQueue(Allocator allocator) Parameters Type Name Description Unity.Collections.Allocator allocator The allocator to use. Properties | Improve this Doc View Source Capacity The number of elements that fit in the current allocation. Declaration public int Capacity { get; set; } Property Value Type Description System.Int32 The number of elements that fit in the current allocation. | Improve this Doc View Source IsCreated Whether this queue has been allocated (and not yet deallocated). Declaration public bool IsCreated { get; } Property Value Type Description System.Boolean True if this queue has been allocated (and not yet deallocated). | Improve this Doc View Source IsEmpty Whether the queue is empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean True if the queue is empty or the queue has not been constructed. | Improve this Doc View Source Length The number of elements. Declaration public int Length { get; set; } Property Value Type Description System.Int32 The number of elements. Methods | Improve this Doc View Source Clear() Removes all elements of this queue. Declaration public void Clear() Remarks Does not change the capacity. | Improve this Doc View Source Dequeue() Removes the element from the end of the queue. Declaration public TValue Dequeue() Returns Type Description TValue Returns the removed element. Exceptions Type Condition System.InvalidOperationException Thrown if the queue was empty. | Improve this Doc View Source Dispose() Releases all resources (memory and safety handles). Declaration public void Dispose() | Improve this Doc View Source Enqueue(TKey, TValue) Adds an element at the front of the queue. Declaration public void Enqueue(in TKey key, in TValue value) Parameters Type Name Description TKey key TValue value The value to be added. | Improve this Doc View Source GetKeyArray(AllocatorManager.AllocatorHandle) Returns an array with a copy of all this heap map's keys (in no particular order). Declaration public NativeArray<TKey> GetKeyArray(AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description Unity.Collections.AllocatorManager.AllocatorHandle allocator The allocator to use. Returns Type Description Unity.Collections.NativeArray <TKey> An array with a copy of all this hash map's keys (in no particular order). | Improve this Doc View Source GetValueArray(AllocatorManager.AllocatorHandle) Returns an array with a copy of all this heap map's values (in no particular order). Declaration public NativeArray<TValue> GetValueArray(AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description Unity.Collections.AllocatorManager.AllocatorHandle allocator The allocator to use. Returns Type Description Unity.Collections.NativeArray <TValue> An array with a copy of all this hash map's values (in no particular order). | Improve this Doc View Source Peek() Returns the element at the end of this queue without removing it. Declaration public TValue Peek() Returns Type Description TValue The element at the end of this queue. | Improve this Doc View Source TryDequeue(out TValue) Removes the element from the end of the queue. Declaration public bool TryDequeue(out TValue value) Parameters Type Name Description TValue value Returns Type Description System.Boolean True if an element was removed. Remarks Does nothing if the queue is empty. Implements System.IDisposable"
  },
  "api/ProjectDawn.Collections.NativeKdTree-2.html": {
    "href": "api/ProjectDawn.Collections.NativeKdTree-2.html",
    "title": "Struct NativeKdTree<TValue, TComparer>",
    "keywords": "Struct NativeKdTree<TValue, TComparer> An unmanaged, resizable k-d tree. K-d tree (short for k-dimensional tree) is a space-partitioning data structure for organizing points in a k-dimensional space. K-d trees are a useful data structure for several applications, such as searches involving a multidimensional search key (e.g. range searches and nearest neighbor searches) and creating point clouds. K-d trees are a special case of binary space partitioning trees. Implements System.IDisposable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Collections Assembly : ProjectDawn.Collections.dll Syntax [NativeContainer] public struct NativeKdTree<TValue, TComparer> : IDisposable where TValue : struct where TComparer : struct, IKdTreeComparer<TValue> Type Parameters Name Description TValue The type of the elements. TComparer The type of the comparer for sorting elements. Constructors | Improve this Doc View Source NativeKdTree(Int32, Allocator, TComparer) Initialized and returns an instance of NativeKdTree. Declaration public NativeKdTree(int initialCapacity, Allocator allocator, TComparer comparer = default(TComparer)) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the priority queue. Unity.Collections.Allocator allocator The allocator to use. TComparer comparer The element comparer to use. | Improve this Doc View Source NativeKdTree(Allocator, TComparer) Initialized and returns an instance of NativeKdTree. Declaration public NativeKdTree(Allocator allocator, TComparer comparer = default(TComparer)) Parameters Type Name Description Unity.Collections.Allocator allocator The allocator to use. TComparer comparer The element comparer to use. Properties | Improve this Doc View Source Capacity The number of elements that fit in the current allocation. Declaration public int Capacity { get; } Property Value Type Description System.Int32 The number of elements that fit in the current allocation. | Improve this Doc View Source IsCreated Whether this tree has been allocated (and not yet deallocated). Declaration public bool IsCreated { get; } Property Value Type Description System.Boolean True if this tree has been allocated (and not yet deallocated). | Improve this Doc View Source IsEmpty Whether the tree is empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean True if the tree is empty or the tree has not been constructed. | Improve this Doc View Source Length The number of elements. Declaration public int Length { get; } Property Value Type Description System.Int32 The number of elements. | Improve this Doc View Source Root Returns the tree root. Declaration public NativeKdTree<TValue, TComparer>.Iterator Root { get; } Property Value Type Description NativeKdTree.Iterator <> Methods | Improve this Doc View Source Add(TValue) Add element to the tree. Declaration public NativeKdTree<TValue, TComparer>.Iterator Add(TValue value) Parameters Type Name Description TValue value The value to add. Returns Type Description NativeKdTree.Iterator <> | Improve this Doc View Source Build(NativeArray<TValue>) Builds balanced tree from elements. Declaration public void Build(NativeArray<TValue> values) Parameters Type Name Description Unity.Collections.NativeArray <TValue> values The values that will be used for building tree. | Improve this Doc View Source Clear() Removes all nodes of this tree. Declaration public void Clear() Remarks Does not change the capacity. | Improve this Doc View Source Dispose() Releases all resources (memory and safety handles). Declaration public void Dispose() | Improve this Doc View Source FindNearest(TValue, out Int32, Int32) The k-d nearest neighbor search. Returns iterator to nearest element. Declaration public NativeKdTree<TValue, TComparer>.Iterator FindNearest(TValue value, out int numSearch, int maxSearch = 2147483647) Parameters Type Name Description TValue value The value used for searching element. System.Int32 numSearch The number of elements searched. System.Int32 maxSearch The maximum number elements that can be searched. Quite useful for approximate search. Returns Type Description NativeKdTree.Iterator <> Returns iterator to nearest element. | Improve this Doc View Source FindNearestRange(TValue, Int32, ref NativeList<TValue>, out Int32, Int32) The k-d nearest n neighbor search. Declaration public void FindNearestRange(TValue value, int maxResult, ref NativeList<TValue> result, out int numSearch, int maxSearch = 2147483647) Parameters Type Name Description TValue value The value used for searching element. System.Int32 maxResult The number of nearest neighbors to search. Unity.Collections.NativeList <TValue> result Outputs the found elements. System.Int32 numSearch The number of elements searched. System.Int32 maxSearch The maximum number elements that can be searched. Quite useful for approximate search. | Improve this Doc View Source FindRadius(TValue, Single, ref NativeList<TValue>, out Int32, Int32) The k-d radius search. Declaration public void FindRadius(TValue value, float maxDistance, ref NativeList<TValue> result, out int numSearch, int maxSearch = 2147483647) Parameters Type Name Description TValue value The value used for searching element. System.Single maxDistance The maximum distance from value used for searching. Unity.Collections.NativeList <TValue> result Outputs the found elements. System.Int32 numSearch The number of elements searched. System.Int32 maxSearch The maximum number elements that can be searched. Quite useful for approximate search. | Improve this Doc View Source GetDepth() Returns the depth of the tree. It is the maximum height of all nodes. Declaration public int GetDepth() Returns Type Description System.Int32 | Improve this Doc View Source RemoveAt(NativeKdTree<TValue, TComparer>.Iterator) Removes node from the tree at givent iterator value. Declaration public void RemoveAt(NativeKdTree<TValue, TComparer>.Iterator iterator) Parameters Type Name Description NativeKdTree.Iterator <> iterator Position from which node will be removed. Implements System.IDisposable"
  },
  "api/ProjectDawn.Collections.NativeKdTree-2.Iterator.html": {
    "href": "api/ProjectDawn.Collections.NativeKdTree-2.Iterator.html",
    "title": "Struct NativeKdTree<TValue, TComparer>.Iterator",
    "keywords": "Struct NativeKdTree<TValue, TComparer>.Iterator Linked list iterator. Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Collections Assembly : ProjectDawn.Collections.dll Syntax public struct Iterator Properties | Improve this Doc View Source Left Returns iterator that references to left child. Declaration public NativeKdTree<TValue, TComparer>.Iterator Left { get; } Property Value Type Description NativeKdTree.Iterator <> | Improve this Doc View Source Parent Returns iterator that references to parent. Declaration public NativeKdTree<TValue, TComparer>.Iterator Parent { get; } Property Value Type Description NativeKdTree.Iterator <> | Improve this Doc View Source Right Returns iterator that references to right child. Declaration public NativeKdTree<TValue, TComparer>.Iterator Right { get; } Property Value Type Description NativeKdTree.Iterator <> | Improve this Doc View Source Valid Returns true if handle is valid. Declaration public bool Valid { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Value Iterator referenced value. Declaration public TValue Value { get; } Property Value Type Description TValue Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(NativeKdTree<TValue, TComparer>.Iterator, NativeKdTree<TValue, TComparer>.Iterator) Declaration public static bool operator ==(NativeKdTree<TValue, TComparer>.Iterator lhs, NativeKdTree<TValue, TComparer>.Iterator rhs) Parameters Type Name Description NativeKdTree.Iterator <> lhs NativeKdTree.Iterator <> rhs Returns Type Description System.Boolean | Improve this Doc View Source Implicit(NativeKdTree<TValue, TComparer>.Iterator to UnsafeKdTree<TValue, TComparer>.Handle) Declaration public static implicit operator UnsafeKdTree<TValue, TComparer>.Handle(NativeKdTree<TValue, TComparer>.Iterator iterator) Parameters Type Name Description NativeKdTree.Iterator <> iterator Returns Type Description UnsafeKdTree.Handle <> | Improve this Doc View Source Inequality(NativeKdTree<TValue, TComparer>.Iterator, NativeKdTree<TValue, TComparer>.Iterator) Declaration public static bool operator !=(NativeKdTree<TValue, TComparer>.Iterator lhs, NativeKdTree<TValue, TComparer>.Iterator rhs) Parameters Type Name Description NativeKdTree.Iterator <> lhs NativeKdTree.Iterator <> rhs Returns Type Description System.Boolean"
  },
  "api/ProjectDawn.Collections.NativeLinkedList-1.html": {
    "href": "api/ProjectDawn.Collections.NativeLinkedList-1.html",
    "title": "Struct NativeLinkedList<T>",
    "keywords": "Struct NativeLinkedList<T> An unmanaged, resizable linked list. Linked list is efficient at inserting and removing elements. However, not so efficient with cache usage. Linked list is implemented using double linked nodes, where each node knows its next-node link and previous-node link. Implements System.IDisposable System.Collections.Generic.IEnumerable <T> System.Collections.IEnumerable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Collections Assembly : ProjectDawn.Collections.dll Syntax [NativeContainer] public struct NativeLinkedList<T> : IDisposable, IEnumerable<T>, IEnumerable where T : struct Type Parameters Name Description T The type of the elements. Remarks The elements are not stored contiguously in a buffer rather than in true linked nodes. Constructors | Improve this Doc View Source NativeLinkedList(Int32, Allocator) Initializes and returns an instance of NativeLinkedList. Declaration public NativeLinkedList(int initialCapacity, Allocator allocator) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the list. Unity.Collections.Allocator allocator The allocator to use. | Improve this Doc View Source NativeLinkedList(Allocator) Initializes and returns an instance of NativeLinkedList. Declaration public NativeLinkedList(Allocator allocator) Parameters Type Name Description Unity.Collections.Allocator allocator The allocator to use. Properties | Improve this Doc View Source Begin Returns an iterator pointing to the first element in the list container. Declaration public NativeLinkedList<T>.Iterator Begin { get; } Property Value Type Description NativeLinkedList.Iterator <> | Improve this Doc View Source BeginRO Returns an iterator pointing to the first element in the list container. Read only iterator. Declaration public NativeLinkedList<T>.Iterator BeginRO { get; } Property Value Type Description NativeLinkedList.Iterator <> | Improve this Doc View Source Capacity The number of elements that fit in the current allocation. Declaration public int Capacity { get; } Property Value Type Description System.Int32 The number of elements that fit in the current allocation. | Improve this Doc View Source End Returns an iterator referring to the past-the-end element in the list container. The past-the-end element is the theoretical element that would follow the last element in the list container. It does not point to any element, and thus shall not be dereferenced. Declaration public NativeLinkedList<T>.Iterator End { get; } Property Value Type Description NativeLinkedList.Iterator <> | Improve this Doc View Source EndRO Returns an iterator referring to the past-the-end element in the list container. The past-the-end element is the theoretical element that would follow the last element in the list container. It does not point to any element, and thus shall not be dereferenced. Read only iterator. Declaration public NativeLinkedList<T>.Iterator EndRO { get; } Property Value Type Description NativeLinkedList.Iterator <> | Improve this Doc View Source IsCreated Whether this list has been allocated (and not yet deallocated). Declaration public bool IsCreated { get; } Property Value Type Description System.Boolean True if this queue has been allocated (and not yet deallocated). | Improve this Doc View Source Length The number of elements. Declaration public int Length { get; } Property Value Type Description System.Int32 The number of elements. Methods | Improve this Doc View Source Add(T) Appends an element to the end of this list. Declaration public NativeLinkedList<T>.Iterator Add(in T value) Parameters Type Name Description T value The value to add to the end of this list. Returns Type Description NativeLinkedList.Iterator <> Remarks Length is incremented by 1. If necessary, the capacity is increased. | Improve this Doc View Source Clear() Removes all elements of this queue. Declaration public void Clear() Remarks Does not change the capacity. | Improve this Doc View Source Dispose() Releases all resources (memory and safety handles). Declaration public void Dispose() | Improve this Doc View Source GetEnumerator() Returns an enumerator over the elements of this linked list. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> | Improve this Doc View Source Insert(NativeLinkedList<T>.Iterator, T) The container is extended by inserting new elements before the element at the specified position. Declaration public NativeLinkedList<T>.Iterator Insert(in NativeLinkedList<T>.Iterator iterator, in T value) Parameters Type Name Description NativeLinkedList.Iterator <> iterator Position in the container where the new elements are inserted. T value Value to be copied (or moved) to the inserted elements. Returns Type Description NativeLinkedList.Iterator <> Remarks Length is incremented by 1. If necessary, the capacity is increased. | Improve this Doc View Source RemoveAt(NativeLinkedList<T>.Iterator) Removes the element at an position. Decrements the length by 1. Declaration public void RemoveAt(in NativeLinkedList<T>.Iterator iterator) Parameters Type Name Description NativeLinkedList.Iterator <> iterator Position in the container where the element will be removed. | Improve this Doc View Source Sort<U>(ref NativeLinkedList<T>.Iterator, ref NativeLinkedList<T>.Iterator, U) Sorts this list using a custom comparison. Uses insertion sort algorithm. Declaration public void Sort<U>(ref NativeLinkedList<T>.Iterator begin, ref NativeLinkedList<T>.Iterator end, U comparer) where U : struct, IComparer<T> Parameters Type Name Description NativeLinkedList.Iterator <> begin Sort begin iterator. NativeLinkedList.Iterator <> end Sort end iterator. U comparer The comparison function used to determine the relative order of the elements. Type Parameters Name Description U The comparer type. | Improve this Doc View Source ToArray(Allocator) Returns an array containing a copy of this queue's content. Declaration public NativeArray<T> ToArray(Allocator allocator) Parameters Type Name Description Unity.Collections.Allocator allocator The allocator to use. Returns Type Description Unity.Collections.NativeArray <T> An array containing a copy of this queue's content. Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.IDisposable System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods NativeLinkedListSort.Middle<T>(NativeLinkedList<T>, NativeLinkedList<T>.Iterator, NativeLinkedList<T>.Iterator) NativeLinkedListSort.Count<T>(NativeLinkedList<T>, NativeLinkedList<T>.Iterator, NativeLinkedList<T>.Iterator)"
  },
  "api/ProjectDawn.Collections.NativeLinkedList-1.Iterator.html": {
    "href": "api/ProjectDawn.Collections.NativeLinkedList-1.Iterator.html",
    "title": "Struct NativeLinkedList<T>.Iterator",
    "keywords": "Struct NativeLinkedList<T>.Iterator Linked list iterator. Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Collections Assembly : ProjectDawn.Collections.dll Syntax public struct Iterator Properties | Improve this Doc View Source Next Returns iterator to next element. Declaration public NativeLinkedList<T>.Iterator Next { get; } Property Value Type Description NativeLinkedList.Iterator <> | Improve this Doc View Source Previous Returns iterator to previous element. Declaration public NativeLinkedList<T>.Iterator Previous { get; } Property Value Type Description NativeLinkedList.Iterator <> | Improve this Doc View Source ReadOnly Returns true if iterator is read only. Declaration public bool ReadOnly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Value Iterator referenced value. Declaration public T Value { get; set; } Property Value Type Description T Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source MoveNext() Move iterator to next element. Declaration public NativeLinkedList<T>.Iterator MoveNext() Returns Type Description NativeLinkedList.Iterator <> Returns iterator to next element. | Improve this Doc View Source MovePrevious() Move iterator to previous element. Declaration public NativeLinkedList<T>.Iterator MovePrevious() Returns Type Description NativeLinkedList.Iterator <> Returns iterator to previous element. Operators | Improve this Doc View Source Equality(NativeLinkedList<T>.Iterator, NativeLinkedList<T>.Iterator) Declaration public static bool operator ==(NativeLinkedList<T>.Iterator lhs, NativeLinkedList<T>.Iterator rhs) Parameters Type Name Description NativeLinkedList.Iterator <> lhs NativeLinkedList.Iterator <> rhs Returns Type Description System.Boolean | Improve this Doc View Source Implicit(NativeLinkedList<T>.Iterator to UnsafeLinkedList<T>.Handle) Declaration public static implicit operator UnsafeLinkedList<T>.Handle(NativeLinkedList<T>.Iterator iterator) Parameters Type Name Description NativeLinkedList.Iterator <> iterator Returns Type Description UnsafeLinkedList.Handle <> | Improve this Doc View Source Inequality(NativeLinkedList<T>.Iterator, NativeLinkedList<T>.Iterator) Declaration public static bool operator !=(NativeLinkedList<T>.Iterator lhs, NativeLinkedList<T>.Iterator rhs) Parameters Type Name Description NativeLinkedList.Iterator <> lhs NativeLinkedList.Iterator <> rhs Returns Type Description System.Boolean"
  },
  "api/ProjectDawn.Collections.NativeLinkedListSort.DefaultComparer-1.html": {
    "href": "api/ProjectDawn.Collections.NativeLinkedListSort.DefaultComparer-1.html",
    "title": "Struct NativeLinkedListSort.DefaultComparer<T>",
    "keywords": "Struct NativeLinkedListSort.DefaultComparer<T> A comparer that uses IComparable.CompareTo(). For primitive types, this is an ascending sort. Implements System.Collections.Generic.IComparer <T> Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Collections Assembly : ProjectDawn.Collections.dll Syntax [BurstCompatible(GenericTypeArguments = new Type[]{typeof(int)})] public struct DefaultComparer<T> : IComparer<T> where T : IComparable<T> Type Parameters Name Description T Source type of elements Methods | Improve this Doc View Source Compare(T, T) Compares two values. Declaration public int Compare(T x, T y) Parameters Type Name Description T x First value to compare. T y Second value to compare. Returns Type Description System.Int32 A signed integer that denotes the relative values of x and y : 0 if they're equal, negative if x &lt; y , and positive if x > y . Implements System.Collections.Generic.IComparer<T>"
  },
  "api/ProjectDawn.Collections.NativeLinkedListSort.html": {
    "href": "api/ProjectDawn.Collections.NativeLinkedListSort.html",
    "title": "Class NativeLinkedListSort",
    "keywords": "Class NativeLinkedListSort Inheritance System.Object NativeLinkedListSort Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ProjectDawn.Collections Assembly : ProjectDawn.Collections.dll Syntax public static class NativeLinkedListSort Methods | Improve this Doc View Source Count<T>(NativeLinkedList<T>, NativeLinkedList<T>.Iterator, NativeLinkedList<T>.Iterator) Returns number of elements between iterators. Declaration public static int Count<T>(this NativeLinkedList<T> list, NativeLinkedList<T>.Iterator first, NativeLinkedList<T>.Iterator last) where T : struct Parameters Type Name Description NativeLinkedList <T> list NativeLinkedList.Iterator <> first NativeLinkedList.Iterator <> last Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source Middle<T>(NativeLinkedList<T>, NativeLinkedList<T>.Iterator, NativeLinkedList<T>.Iterator) Based on https://www.geeksforgeeks.org/merge-sort-for-linked-list/ . Declaration public static NativeLinkedList<T>.Iterator Middle<T>(this NativeLinkedList<T> list, NativeLinkedList<T>.Iterator first, NativeLinkedList<T>.Iterator last) where T : struct Parameters Type Name Description NativeLinkedList <T> list NativeLinkedList.Iterator <> first NativeLinkedList.Iterator <> last Returns Type Description NativeLinkedList.Iterator <> Type Parameters Name Description T | Improve this Doc View Source Sort<T>(NativeLinkedList<T>) Sorts this list using a custom comparison. Declaration public static void Sort<T>(this NativeLinkedList<T> list) where T : struct, IComparable<T> Parameters Type Name Description NativeLinkedList <T> list Type Parameters Name Description T"
  },
  "api/ProjectDawn.Collections.NativeLinkedPriorityQueue-2.html": {
    "href": "api/ProjectDawn.Collections.NativeLinkedPriorityQueue-2.html",
    "title": "Struct NativeLinkedPriorityQueue<TValue, TComparer>",
    "keywords": "Struct NativeLinkedPriorityQueue<TValue, TComparer> An unmanaged, resizable priority queue. Priority queue main difference from regular queue that before element enqueue it executes insert sort. It is implemented using linked list. Peek = O(1), Enqueue = O(Log n), Dequeue = O(Log 1). Implements System.IDisposable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Collections Assembly : ProjectDawn.Collections.dll Syntax [NativeContainer] public struct NativeLinkedPriorityQueue<TValue, TComparer> : IDisposable where TValue : struct where TComparer : struct, IComparer<TValue> Type Parameters Name Description TValue The type of the elements. TComparer The type of comparer used for comparing elements. Constructors | Improve this Doc View Source NativeLinkedPriorityQueue(Int32, Allocator, TComparer) Initialized and returns an instance of NativePriorityQueue. Declaration public NativeLinkedPriorityQueue(int initialCapacity, Allocator allocator, TComparer comparer = default(TComparer)) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the priority queue. Unity.Collections.Allocator allocator The allocator to use. TComparer comparer The element comparer to use. | Improve this Doc View Source NativeLinkedPriorityQueue(Allocator, TComparer) Initialized and returns an instance of NativePriorityQueue. Declaration public NativeLinkedPriorityQueue(Allocator allocator, TComparer comparer = default(TComparer)) Parameters Type Name Description Unity.Collections.Allocator allocator The allocator to use. TComparer comparer The element comparer to use. Properties | Improve this Doc View Source Capacity The number of elements that fit in the current allocation. Declaration public int Capacity { get; } Property Value Type Description System.Int32 The number of elements that fit in the current allocation. | Improve this Doc View Source IsCreated Whether this queue has been allocated (and not yet deallocated). Declaration public bool IsCreated { get; } Property Value Type Description System.Boolean True if this queue has been allocated (and not yet deallocated). | Improve this Doc View Source IsEmpty Whether the queue is empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean True if the queue is empty or the queue has not been constructed. | Improve this Doc View Source Length The number of elements. Declaration public int Length { get; } Property Value Type Description System.Int32 The number of elements. Methods | Improve this Doc View Source Clear() Removes all elements of this queue. Declaration public void Clear() Remarks Does not change the capacity. | Improve this Doc View Source Dequeue() Removes the element from the end of the queue. Declaration public TValue Dequeue() Returns Type Description TValue Returns the removed element. Exceptions Type Condition System.InvalidOperationException Thrown if the queue was empty. | Improve this Doc View Source Dispose() Releases all resources (memory and safety handles). Declaration public void Dispose() | Improve this Doc View Source Enqueue(TValue) Adds an element at the front of the queue. Declaration public void Enqueue(in TValue value) Parameters Type Name Description TValue value The value to be added. | Improve this Doc View Source EnqueueUnique(TValue) Adds an unique element at the front of the queue. Returns false if element already exists in queue. Declaration public bool EnqueueUnique(in TValue value) Parameters Type Name Description TValue value The value to be added. Returns Type Description System.Boolean Returns false if element already exists in queue. | Improve this Doc View Source GetEnumerator() Returns an enumerator over the elements of this linked list. Declaration public IEnumerator<TValue> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <TValue> | Improve this Doc View Source Peek() Returns the element at the end of this queue without removing it. Declaration public TValue Peek() Returns Type Description TValue The element at the end of this queue. | Improve this Doc View Source ToArray(Allocator) Returns an array containing a copy of this queue's content. Declaration public NativeArray<TValue> ToArray(Allocator allocator) Parameters Type Name Description Unity.Collections.Allocator allocator The allocator to use. Returns Type Description Unity.Collections.NativeArray <TValue> An array containing a copy of this queue's content. | Improve this Doc View Source TryDequeue(out TValue) Removes the element from the end of the queue. Declaration public bool TryDequeue(out TValue value) Parameters Type Name Description TValue value Returns Type Description System.Boolean True if an element was removed. Remarks Does nothing if the queue is empty. Implements System.IDisposable"
  },
  "api/ProjectDawn.Collections.NativeListExtensnios.html": {
    "href": "api/ProjectDawn.Collections.NativeListExtensnios.html",
    "title": "Class NativeListExtensnios",
    "keywords": "Class NativeListExtensnios Inheritance System.Object NativeListExtensnios Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ProjectDawn.Collections Assembly : ProjectDawn.Collections.dll Syntax public static class NativeListExtensnios Methods | Improve this Doc View Source Insert<T>(NativeList<T>, T, Int32) Inserts new element at specific index. Declaration public static void Insert<T>(this NativeList<T> list, T value, int index) where T : struct Parameters Type Name Description Unity.Collections.NativeList <T> list T value Element that will be inserted. System.Int32 index Index at wich element will be inserted. Type Parameters Name Description T The type of the element."
  },
  "api/ProjectDawn.Collections.NativePriorityQueue-2.html": {
    "href": "api/ProjectDawn.Collections.NativePriorityQueue-2.html",
    "title": "Struct NativePriorityQueue<TValue, TComparer>",
    "keywords": "Struct NativePriorityQueue<TValue, TComparer> An unmanaged, resizable priority queue. Priority queue main difference from regular queue that before element enqueue it executes insert sort. It is implemented using heap. Peek = O(1), Enqueue = O(Log n), Dequeue = O(Log 1). Implements System.IDisposable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Collections Assembly : ProjectDawn.Collections.dll Syntax [NativeContainer] [Obsolete(\"This structure is obsolete from 1.7, please use either NativeLinkedPriorityQueue or NativeHeapPriorityQueue\")] public struct NativePriorityQueue<TValue, TComparer> : IDisposable where TValue : struct where TComparer : struct, IComparer<TValue> Type Parameters Name Description TValue The type of the elements. TComparer The type of comparer used for comparing elements. Constructors | Improve this Doc View Source NativePriorityQueue(Int32, Allocator, TComparer) Initialized and returns an instance of NativePriorityQueue. Declaration public NativePriorityQueue(int initialCapacity, Allocator allocator, TComparer comparer = default(TComparer)) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the priority queue. Unity.Collections.Allocator allocator The allocator to use. TComparer comparer The element comparer to use. | Improve this Doc View Source NativePriorityQueue(Allocator, TComparer) Initialized and returns an instance of NativePriorityQueue. Declaration public NativePriorityQueue(Allocator allocator, TComparer comparer = default(TComparer)) Parameters Type Name Description Unity.Collections.Allocator allocator The allocator to use. TComparer comparer The element comparer to use. Properties | Improve this Doc View Source Capacity The number of elements that fit in the current allocation. Declaration public int Capacity { get; } Property Value Type Description System.Int32 The number of elements that fit in the current allocation. | Improve this Doc View Source IsCreated Whether this queue has been allocated (and not yet deallocated). Declaration public bool IsCreated { get; } Property Value Type Description System.Boolean True if this queue has been allocated (and not yet deallocated). | Improve this Doc View Source IsEmpty Whether the queue is empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean True if the queue is empty or the queue has not been constructed. | Improve this Doc View Source Length The number of elements. Declaration public int Length { get; } Property Value Type Description System.Int32 The number of elements. Methods | Improve this Doc View Source Clear() Removes all elements of this queue. Declaration public void Clear() Remarks Does not change the capacity. | Improve this Doc View Source Dequeue() Removes the element from the end of the queue. Declaration public TValue Dequeue() Returns Type Description TValue Returns the removed element. Exceptions Type Condition System.InvalidOperationException Thrown if the queue was empty. | Improve this Doc View Source Dispose() Releases all resources (memory and safety handles). Declaration public void Dispose() | Improve this Doc View Source Enqueue(TValue) Adds an element at the front of the queue. Declaration public void Enqueue(in TValue value) Parameters Type Name Description TValue value The value to be added. | Improve this Doc View Source EnqueueUnique(TValue) Adds an unique element at the front of the queue. Returns false if element already exists in queue. Declaration public bool EnqueueUnique(in TValue value) Parameters Type Name Description TValue value The value to be added. Returns Type Description System.Boolean Returns false if element already exists in queue. | Improve this Doc View Source GetEnumerator() Returns an enumerator over the elements of this linked list. Declaration public IEnumerator<TValue> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <TValue> | Improve this Doc View Source Peek() Returns the element at the end of this queue without removing it. Declaration public TValue Peek() Returns Type Description TValue The element at the end of this queue. | Improve this Doc View Source ToArray(Allocator) Returns an array containing a copy of this queue's content. Declaration public NativeArray<TValue> ToArray(Allocator allocator) Parameters Type Name Description Unity.Collections.Allocator allocator The allocator to use. Returns Type Description Unity.Collections.NativeArray <TValue> An array containing a copy of this queue's content. | Improve this Doc View Source TryDequeue(out TValue) Removes the element from the end of the queue. Declaration public bool TryDequeue(out TValue value) Parameters Type Name Description TValue value Returns Type Description System.Boolean True if an element was removed. Remarks Does nothing if the queue is empty. Implements System.IDisposable"
  },
  "api/ProjectDawn.Collections.NativeStack-1.html": {
    "href": "api/ProjectDawn.Collections.NativeStack-1.html",
    "title": "Struct NativeStack<T>",
    "keywords": "Struct NativeStack<T> An managed, resizable stack. Limited version of that only operates with the last element at the time. Implements System.IDisposable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Collections Assembly : ProjectDawn.Collections.dll Syntax [NativeContainer] public struct NativeStack<T> : IDisposable where T : struct Type Parameters Name Description T Source type of elements Constructors | Improve this Doc View Source NativeStack(Int32, Allocator, NativeArrayOptions) Constructs a new stack using the specified type of memory allocation. Declaration public NativeStack(int initialCapacity, Allocator allocator, NativeArrayOptions options = NativeArrayOptions.UninitializedMemory) Parameters Type Name Description System.Int32 initialCapacity Unity.Collections.Allocator allocator A member of the Unity.Collections.Allocator enumeration. Unity.Collections.NativeArrayOptions options Memory should be cleared on allocation or left uninitialized. Remarks The stack initially has a capacity of one. To avoid reallocating memory for the stack, specify sufficient capacity up front. | Improve this Doc View Source NativeStack(Allocator, NativeArrayOptions) Initializes and returns an instance of NativeLinkedList. Declaration public NativeStack(Allocator allocator, NativeArrayOptions options = NativeArrayOptions.UninitializedMemory) Parameters Type Name Description Unity.Collections.Allocator allocator The allocator to use. Unity.Collections.NativeArrayOptions options Memory should be cleared on allocation or left uninitialized. Properties | Improve this Doc View Source Capacity The number of elements that fit in the current allocation. Declaration public int Capacity { get; set; } Property Value Type Description System.Int32 The number of elements that fit in the current allocation. | Improve this Doc View Source IsCreated Reports whether memory for the container is allocated. Declaration public bool IsCreated { get; } Property Value Type Description System.Boolean True if this container object's internal storage has been allocated. Remarks Note that the container storage is not created if you use the default constructor. You must specify at least an allocation type to construct a usable container. | Improve this Doc View Source IsEmpty Whether the stack is empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean True if the stack is empty or the stack has not been constructed. | Improve this Doc View Source Length The number of elements. Declaration public int Length { get; } Property Value Type Description System.Int32 The number of elements. Methods | Improve this Doc View Source AsParallelWriter() Declaration public NativeStack<T>.ParallelWriter AsParallelWriter() Returns Type Description NativeStack.ParallelWriter <> | Improve this Doc View Source Clear() Clears the container. Declaration public void Clear() Remarks Stack Capacity remains unchanged. | Improve this Doc View Source Dispose() Disposes of this container and deallocates its memory immediately. Declaration public void Dispose() | Improve this Doc View Source Dispose(JobHandle) Safely disposes of this container and deallocates its memory when the jobs that use it have completed. Declaration public JobHandle Dispose(JobHandle inputDeps) Parameters Type Name Description Unity.Jobs.JobHandle inputDeps The job handle or handles for any scheduled jobs that use this container. Returns Type Description Unity.Jobs.JobHandle A new job handle containing the prior handles as well as the handle for the job that deletes the container. Remarks You can call this function dispose of the container immediately after scheduling the job. Pass the JobHandle returned by the Job.Schedule method using the jobHandle parameter so the job scheduler can dispose the container after all jobs using it have run. | Improve this Doc View Source Pop() Removes the element from the end of the stack. Declaration public T Pop() Returns Type Description T | Improve this Doc View Source Push(T) Pushs an element to the stack. Declaration public void Push(T value) Parameters Type Name Description T value The struct to be added at the end of the stack. | Improve this Doc View Source PushNoResize(T) Pushs an element to the container. Declaration public void PushNoResize(T value) Parameters Type Name Description T value The value to be added at the end of the container. Remarks If the stack has reached its current capacity, internal array won't be resized, and exception will be thrown. | Improve this Doc View Source TryPop(out T) Removes the element from the end of the stack. Declaration public bool TryPop(out T value) Parameters Type Name Description T value Outputs the element removed. Returns Type Description System.Boolean True if an element was removed. Remarks Does nothing if the queue is empty. Implements System.IDisposable"
  },
  "api/ProjectDawn.Collections.NativeStack-1.ParallelWriter.html": {
    "href": "api/ProjectDawn.Collections.NativeStack-1.ParallelWriter.html",
    "title": "Struct NativeStack<T>.ParallelWriter",
    "keywords": "Struct NativeStack<T>.ParallelWriter Returns parallel writer instance. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Collections Assembly : ProjectDawn.Collections.dll Syntax [NativeContainer] [NativeContainerIsAtomicWriteOnly] public struct ParallelWriter Constructors | Improve this Doc View Source ParallelWriter(Void*, UnsafeStack<T>*) Declaration public ParallelWriter(void *ptr, UnsafeStack<T>*data) Parameters Type Name Description System.Void * ptr UnsafeStack <T>* data Methods | Improve this Doc View Source PushNoResize(T) Push an element to the stack. Declaration public void PushNoResize(T value) Parameters Type Name Description T value The value to be added at the end of the stack. Remarks If the stack has reached its current capacity, internal array won't be resized, and exception will be thrown. | Improve this Doc View Source PushRangeNoResize(Void*, Int32) Declaration public void PushRangeNoResize(void *ptr, int length) Parameters Type Name Description System.Void * ptr System.Int32 length"
  },
  "api/ProjectDawn.Collections.NativeStructureList.html": {
    "href": "api/ProjectDawn.Collections.NativeStructureList.html",
    "title": "Struct NativeStructureList",
    "keywords": "Struct NativeStructureList Implements Unity.Collections.INativeDisposable System.IDisposable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Collections Assembly : ProjectDawn.Collections.dll Syntax [NativeContainer] public struct NativeStructureList : INativeDisposable, IDisposable Constructors | Improve this Doc View Source NativeStructureList(Int32, NativeArray<Int32>, Allocator) Initializes and returns an instance of NativeStructureList. Declaration public NativeStructureList(int initialCapacity, NativeArray<int> sizes, Allocator allocator) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the list. Unity.Collections.NativeArray < System.Int32 > sizes Unity.Collections.Allocator allocator The allocator to use. Properties | Improve this Doc View Source ArrayCount The number of arrays. Declaration public int ArrayCount { get; } Property Value Type Description System.Int32 The number of arrays. | Improve this Doc View Source Capacity The number of elements that fit in the current allocation. Declaration public int Capacity { get; set; } Property Value Type Description System.Int32 The number of elements that fit in the current allocation. Exceptions Type Condition System.ArgumentOutOfRangeException Thrown if the new capacity is smaller than the length. | Improve this Doc View Source IsCreated Whether this list has been allocated (and not yet deallocated). Declaration public bool IsCreated { get; } Property Value Type Description System.Boolean True if this queue has been allocated (and not yet deallocated). | Improve this Doc View Source IsEmpty Whether the list is empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean True if the list is empty or the list has not been constructed. | Improve this Doc View Source Length The count of elements. Declaration public int Length { get; set; } Property Value Type Description System.Int32 The current count of elements. Always less than or equal to the capacity. Remarks To decrease the memory used by a list, set Capacity after reducing the length of the list. Methods | Improve this Doc View Source AsArray<T>(Int32) Returns a native array that aliases the array at the index. Declaration public NativeArray<T> AsArray<T>(int index) where T : struct Parameters Type Name Description System.Int32 index Returns Type Description Unity.Collections.NativeArray <T> A native array that aliases the content of this list. Type Parameters Name Description T | Improve this Doc View Source Clear() Removes all elements of this queue. Declaration public void Clear() Remarks Does not change the capacity. | Improve this Doc View Source Dispose() Releases all resources (memory and safety handles). Declaration public void Dispose() | Improve this Doc View Source Dispose(JobHandle) Creates and schedules a job that frees the memory of this list. Declaration public JobHandle Dispose(JobHandle inputDeps) Parameters Type Name Description Unity.Jobs.JobHandle inputDeps The dependency for the new job. Returns Type Description Unity.Jobs.JobHandle The handle of the new job. The job depends upon inputDeps and frees the memory of this list. | Improve this Doc View Source GetUnsafeStructureArray() Returns the internal unsafe structure array. Declaration public UnsafeStructureList*GetUnsafeStructureArray() Returns Type Description UnsafeStructureList * The internal unsafe vertex data. Remarks Internally, the elements of a UnsafeStructureArray are stored in an UnsafeStructureArray. | Improve this Doc View Source Resize(Int32, NativeArrayOptions) Sets the length of this list, increasing the capacity if necessary. Declaration public void Resize(int length, NativeArrayOptions options) Parameters Type Name Description System.Int32 length The new length of this list. Unity.Collections.NativeArrayOptions options Whether to clear any newly allocated bytes to all zeroes. | Improve this Doc View Source ResizeUninitialized(Int32) Sets the length of this list, increasing the capacity if necessary. Declaration public void ResizeUninitialized(int length) Parameters Type Name Description System.Int32 length The new length of this list. Remarks Does not clear newly allocated bytes. | Improve this Doc View Source SetCapacity(Int32) Sets the capacity. Declaration public void SetCapacity(int capacity) Parameters Type Name Description System.Int32 capacity The new capacity. Implements Unity.Collections.INativeDisposable System.IDisposable"
  },
  "api/ProjectDawn.Collections.UnsafePriorityQueue-2.html": {
    "href": "api/ProjectDawn.Collections.UnsafePriorityQueue-2.html",
    "title": "Struct UnsafePriorityQueue<TValue, TComparer>",
    "keywords": "Struct UnsafePriorityQueue<TValue, TComparer> An unmanaged, resizable priority queue, without any thread safety check features. Priority queue main difference from regular queue that before element enqueue it executes insert sort. It is implemented using linked nodes as a result, inserting does not require pushing data around. Implements System.IDisposable System.Collections.Generic.IEnumerable <TValue> System.Collections.IEnumerable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Collections Assembly : ProjectDawn.Collections.dll Syntax [Obsolete(\"This structure is obsolete from 1.7, please use either UnsafeLinkedPriorityQueue or UnsafeHeap\")] public struct UnsafePriorityQueue<TValue, TComparer> : IDisposable, IEnumerable<TValue>, IEnumerable where TValue : struct where TComparer : struct, IComparer<TValue> Type Parameters Name Description TValue The type of the elements. TComparer The type of comparer used for comparing elements. Constructors | Improve this Doc View Source UnsafePriorityQueue(Int32, AllocatorManager.AllocatorHandle, TComparer) Initialized and returns an instance of NativePriorityQueue. Declaration public UnsafePriorityQueue(int initialCapacity, AllocatorManager.AllocatorHandle allocator, TComparer comparer = default(TComparer)) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the priority queue. Unity.Collections.AllocatorManager.AllocatorHandle allocator The allocator to use. TComparer comparer The element comparer to use. Fields | Improve this Doc View Source m_Data Declaration public UnsafeLinkedList<TValue> m_Data Field Value Type Description UnsafeLinkedList <TValue> Properties | Improve this Doc View Source Allocator Allocator used by this data structure. Declaration public AllocatorManager.AllocatorHandle Allocator { get; } Property Value Type Description Unity.Collections.AllocatorManager.AllocatorHandle | Improve this Doc View Source Capacity The number of elements that fit in the current allocation. Declaration public int Capacity { get; } Property Value Type Description System.Int32 The number of elements that fit in the current allocation. | Improve this Doc View Source IsCreated Whether this queue has been allocated (and not yet deallocated). Declaration public bool IsCreated { get; } Property Value Type Description System.Boolean True if this queue has been allocated (and not yet deallocated). | Improve this Doc View Source IsEmpty Whether the queue is empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean True if the queue is empty or the queue has not been constructed. | Improve this Doc View Source Length The number of elements. Declaration public int Length { get; } Property Value Type Description System.Int32 The number of elements. Methods | Improve this Doc View Source Clear() Removes all elements of this queue. Declaration public void Clear() Remarks Does not change the capacity. | Improve this Doc View Source Create(Int32, AllocatorManager.AllocatorHandle, TComparer) Creates a new container with the specified initial capacity and type of memory allocation. Declaration public static UnsafePriorityQueue<TValue, TComparer>*Create(int initialCapacity, AllocatorManager.AllocatorHandle allocator, TComparer comparer = default(TComparer)) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the list. If the list grows larger than its capacity, the internal array is copied to a new, larger array. Unity.Collections.AllocatorManager.AllocatorHandle allocator A member of the Unity.Collections.Allocator enumeration. TComparer comparer The element comparer to use. Returns Type Description UnsafePriorityQueue <TValue, TComparer>* | Improve this Doc View Source Dequeue() Removes the element from the end of the queue. Declaration public TValue Dequeue() Returns Type Description TValue Returns the removed element. Exceptions Type Condition System.InvalidOperationException Thrown if the queue was empty. | Improve this Doc View Source Destroy(UnsafeLinkedPriorityQueue<TValue, TComparer>*) Destroys container. Declaration public static void Destroy(UnsafeLinkedPriorityQueue<TValue, TComparer>*data) Parameters Type Name Description UnsafeLinkedPriorityQueue <TValue, TComparer>* data | Improve this Doc View Source Dispose() Releases all resources (memory and safety handles). Declaration public void Dispose() | Improve this Doc View Source Enqueue(TValue) Adds an element at the front of the queue. Declaration public void Enqueue(in TValue value) Parameters Type Name Description TValue value The value to be added. | Improve this Doc View Source EnqueueUnique(TValue) Adds an unique element at the front of the queue. Returns false if element already exists in queue. Declaration public bool EnqueueUnique(in TValue value) Parameters Type Name Description TValue value The value to be added. Returns Type Description System.Boolean Returns false if element already exists in queue. | Improve this Doc View Source GetEnumerator() Returns an enumerator over the elements of this linked list. Declaration public IEnumerator<TValue> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <TValue> | Improve this Doc View Source Peek() Returns the element at the end of this queue without removing it. Declaration public TValue Peek() Returns Type Description TValue The element at the end of this queue. | Improve this Doc View Source ToArray(Allocator) Returns an array containing a copy of this queue's content. Declaration public NativeArray<TValue> ToArray(Allocator allocator) Parameters Type Name Description Unity.Collections.Allocator allocator The allocator to use. Returns Type Description Unity.Collections.NativeArray <TValue> An array containing a copy of this queue's content. | Improve this Doc View Source TryDequeue(out TValue) Removes the element from the end of the queue. Declaration public bool TryDequeue(out TValue value) Parameters Type Name Description TValue value Outputs the element removed. Returns Type Description System.Boolean True if an element was removed. Remarks Does nothing if the queue is empty. Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.IDisposable System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/ProjectDawn.Geometry2D.Capsule.html": {
    "href": "api/ProjectDawn.Geometry2D.Capsule.html",
    "title": "Struct Capsule",
    "keywords": "Struct Capsule A capsule is a circle that is extended across the line. Implements System.IEquatable < Capsule > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Geometry2D Assembly : ProjectDawn.Geometry.dll Syntax [Serializable] public struct Capsule : IEquatable<Capsule> Constructors | Improve this Doc View Source Capsule(Line, Single) Declaration public Capsule(Line line, float radius) Parameters Type Name Description Line line System.Single radius | Improve this Doc View Source Capsule(float2, Single, Single) Declaration public Capsule(float2 center, float height, float radius) Parameters Type Name Description Unity.Mathematics.float2 center System.Single height System.Single radius Fields | Improve this Doc View Source Line Line through capsule extends. Declaration public Line Line Field Value Type Description Line | Improve this Doc View Source Radius Radius of the capsule. Declaration public float Radius Field Value Type Description System.Single Properties | Improve this Doc View Source Area Returns the area of the capsule. Declaration public float Area { get; } Property Value Type Description System.Single | Improve this Doc View Source Center Center of the capsule. Declaration public float2 Center { get; } Property Value Type Description Unity.Mathematics.float2 | Improve this Doc View Source Diameter Diameter of the capsule. Diameter = 2 * Radius. Declaration public float Diameter { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Height Height of the capsule; Declaration public float Height { get; } Property Value Type Description System.Single | Improve this Doc View Source Perimeter Returns the perimeter of the capsule. Declaration public float Perimeter { get; } Property Value Type Description System.Single Methods | Improve this Doc View Source Equals(Capsule) Declaration public bool Equals(Capsule other) Parameters Type Name Description Capsule other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Overlap(Capsule) Returns true if shapes surfaces overlap. Declaration public bool Overlap(Capsule capsule) Parameters Type Name Description Capsule capsule Returns Type Description System.Boolean | Improve this Doc View Source Overlap(Circle) Returns true if shapes surfaces overlap. Declaration public bool Overlap(Circle circle) Parameters Type Name Description Circle circle Returns Type Description System.Boolean | Improve this Doc View Source Overlap(Line) Returns true if shapes surfaces overlap. Declaration public bool Overlap(Line line) Parameters Type Name Description Line line Returns Type Description System.Boolean | Improve this Doc View Source Overlap(Rectangle) Returns true if shapes surfaces overlap. Declaration public bool Overlap(Rectangle rectangle) Parameters Type Name Description Rectangle rectangle Returns Type Description System.Boolean | Improve this Doc View Source Overlap(float2) Returns true if shapes surfaces overlap. Declaration public bool Overlap(float2 point) Parameters Type Name Description Unity.Mathematics.float2 point Returns Type Description System.Boolean Operators | Improve this Doc View Source Equality(Capsule, Capsule) Declaration public static bool operator ==(Capsule lhs, Capsule rhs) Parameters Type Name Description Capsule lhs Capsule rhs Returns Type Description System.Boolean | Improve this Doc View Source Inequality(Capsule, Capsule) Declaration public static bool operator !=(Capsule lhs, Capsule rhs) Parameters Type Name Description Capsule lhs Capsule rhs Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "api/ProjectDawn.Geometry2D.Circle.html": {
    "href": "api/ProjectDawn.Geometry2D.Circle.html",
    "title": "Struct Circle",
    "keywords": "Struct Circle A circle is a shape consisting of all points in a plane that are at a given distance from a given point, the centre. Implements System.IEquatable < Circle > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Geometry2D Assembly : ProjectDawn.Geometry.dll Syntax [Serializable] public struct Circle : IEquatable<Circle> Constructors | Improve this Doc View Source Circle(float2, Single) Declaration public Circle(float2 center, float radius) Parameters Type Name Description Unity.Mathematics.float2 center System.Single radius Fields | Improve this Doc View Source Center Center of the circle. Declaration public float2 Center Field Value Type Description Unity.Mathematics.float2 | Improve this Doc View Source Radius Radius of the circle. Declaration public float Radius Field Value Type Description System.Single Properties | Improve this Doc View Source Area Returns the area of the circle. Declaration public float Area { get; } Property Value Type Description System.Single | Improve this Doc View Source Diameter Diameter of the circle. Diameter = 2 * Radius. Declaration public float Diameter { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Perimeter Returns the perimeter of the circle. The perimeter of a circle is its boundary or the complete arc length of the periphery of a circle. Declaration public float Perimeter { get; } Property Value Type Description System.Single Methods | Improve this Doc View Source BoundingRectangle() Returns minimum rectangle that fully covers shape. Declaration public Rectangle BoundingRectangle() Returns Type Description Rectangle | Improve this Doc View Source ClosestPoint(float2) Returns a point on the perimeter of this circle that is closest to the specified point. Declaration public float2 ClosestPoint(float2 point) Parameters Type Name Description Unity.Mathematics.float2 point Returns Type Description Unity.Mathematics.float2 | Improve this Doc View Source Distance(Circle) Returns minimum distance between shapes. Declaration public float Distance(Circle circle) Parameters Type Name Description Circle circle Returns Type Description System.Single | Improve this Doc View Source Distance(Rectangle) Returns minimum distance between shapes. Declaration public float Distance(Rectangle rectangle) Parameters Type Name Description Rectangle rectangle Returns Type Description System.Single | Improve this Doc View Source Equals(Circle) Declaration public bool Equals(Circle other) Parameters Type Name Description Circle other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Overlap(Capsule) Declaration public bool Overlap(Capsule capsule) Parameters Type Name Description Capsule capsule Returns Type Description System.Boolean | Improve this Doc View Source Overlap(Circle) Declaration public bool Overlap(Circle circle) Parameters Type Name Description Circle circle Returns Type Description System.Boolean | Improve this Doc View Source Overlap(Line) Declaration public bool Overlap(Line line) Parameters Type Name Description Line line Returns Type Description System.Boolean | Improve this Doc View Source Overlap(Rectangle) Declaration public bool Overlap(Rectangle rectangle) Parameters Type Name Description Rectangle rectangle Returns Type Description System.Boolean | Improve this Doc View Source Overlap(float2) Returns true if shapes surfaces overlap. Declaration public bool Overlap(float2 point) Parameters Type Name Description Unity.Mathematics.float2 point Returns Type Description System.Boolean | Improve this Doc View Source Union(Circle, Circle) Returns minimum bounding circle that contains both circles. Declaration public static Circle Union(Circle a, Circle b) Parameters Type Name Description Circle a Circle b Returns Type Description Circle Operators | Improve this Doc View Source Equality(Circle, Circle) Declaration public static bool operator ==(Circle lhs, Circle rhs) Parameters Type Name Description Circle lhs Circle rhs Returns Type Description System.Boolean | Improve this Doc View Source Inequality(Circle, Circle) Declaration public static bool operator !=(Circle lhs, Circle rhs) Parameters Type Name Description Circle lhs Circle rhs Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "api/ProjectDawn.Geometry2D.ConvexPolygon-1.html": {
    "href": "api/ProjectDawn.Geometry2D.ConvexPolygon-1.html",
    "title": "Struct ConvexPolygon<T>",
    "keywords": "Struct ConvexPolygon<T> A convex polygon composed of counter clockwise ordered points. Implements System.IDisposable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Geometry2D Assembly : ProjectDawn.Geometry.dll Syntax public struct ConvexPolygon<T> : IDisposable where T : struct, ITransformFloat2 Type Parameters Name Description T Constructors | Improve this Doc View Source ConvexPolygon(Int32, Allocator, T, NativeArrayOptions) Declaration public ConvexPolygon(int length, Allocator allocator, T transform = default(T), NativeArrayOptions option = NativeArrayOptions.ClearMemory) Parameters Type Name Description System.Int32 length Unity.Collections.Allocator allocator T transform Unity.Collections.NativeArrayOptions option Properties | Improve this Doc View Source IsCreated Whether this polygon has been allocated (and not yet deallocated). Declaration public bool IsCreated { get; } Property Value Type Description System.Boolean True if this polygon has been allocated (and not yet deallocated). | Improve this Doc View Source Item[Int32] The element at an index. Declaration public float2 this[int index] { get; set; } Parameters Type Name Description System.Int32 index An index. Property Value Type Description Unity.Mathematics.float2 The element at the index. | Improve this Doc View Source Length The number of elements. Declaration public int Length { get; } Property Value Type Description System.Int32 The number of elements. | Improve this Doc View Source Points Declaration public NativeSlice<float2> Points { get; } Property Value Type Description Unity.Collections.NativeSlice < Unity.Mathematics.float2 > | Improve this Doc View Source Transform Tranform used for modifying points before each operation. Declaration public T Transform { get; set; } Property Value Type Description T Methods | Improve this Doc View Source BoundingRectangle() Returns minimum rectangle that fully covers shape. Declaration public Rectangle BoundingRectangle() Returns Type Description Rectangle | Improve this Doc View Source ContainsPoint(float2) Returns minimum distance between two convex polygons. Polygon points must be convex and sorted counter clockwise. Declaration public bool ContainsPoint(float2 point) Parameters Type Name Description Unity.Mathematics.float2 point Returns Type Description System.Boolean | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Distance(ConvexPolygon<T>) Returns minimum distance between two convex polygons. Polygon points must be convex and sorted counter clockwise. Declaration public float Distance(ConvexPolygon<T> polygon) Parameters Type Name Description ConvexPolygon <T> polygon Returns Type Description System.Single | Improve this Doc View Source GetArea() Returns area of convex polygon. Polygon points must be convex and sorted counter clockwise. Declaration public float GetArea() Returns Type Description System.Single | Improve this Doc View Source GetCentroid() Returns centroid of convex polygon. Polygon points must be convex and sorted counter clockwise. Based on https://en.wikipedia.org/wiki/Centroid . Declaration public float2 GetCentroid() Returns Type Description Unity.Mathematics.float2 | Improve this Doc View Source InscribedCircle() Returns maximum circle that is inside the shape. Declaration public Circle InscribedCircle() Returns Type Description Circle | Improve this Doc View Source IsValid() Returns true if points form convex polygon. Declaration public bool IsValid() Returns Type Description System.Boolean | Improve this Doc View Source SortCounterClockwise() Sort points into counter clockwise convex polygon. Declaration public void SortCounterClockwise() Implements System.IDisposable"
  },
  "api/ProjectDawn.Geometry2D.ConvexPolygonUtility.html": {
    "href": "api/ProjectDawn.Geometry2D.ConvexPolygonUtility.html",
    "title": "Class ConvexPolygonUtility",
    "keywords": "Class ConvexPolygonUtility A static class to contain various convex polygon functions. All operations that uses points requires points to form convex polygon and be sorted counter clockwise order. Inheritance System.Object ConvexPolygonUtility Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ProjectDawn.Geometry2D Assembly : ProjectDawn.Geometry.dll Syntax public static class ConvexPolygonUtility Methods | Improve this Doc View Source BoundingRectangle<TTranform>(NativeSlice<float2>, TTranform) Returns minimum rectangle that fully covers shape. Declaration public static Rectangle BoundingRectangle<TTranform>(NativeSlice<float2> points, TTranform tranform) where TTranform : struct, ITransformFloat2 Parameters Type Name Description Unity.Collections.NativeSlice < Unity.Mathematics.float2 > points TTranform tranform Returns Type Description Rectangle Type Parameters Name Description TTranform | Improve this Doc View Source CheckIsCounterClockwiseConvexPolygon(NativeSlice<float2>) Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public static void CheckIsCounterClockwiseConvexPolygon(NativeSlice<float2> points) Parameters Type Name Description Unity.Collections.NativeSlice < Unity.Mathematics.float2 > points | Improve this Doc View Source ContainsPoint<TTranform>(NativeSlice<float2>, TTranform, float2) Returns minimum distance between two convex polygons. Polygon points must be convex and sorted counter clockwise. Declaration public static bool ContainsPoint<TTranform>(NativeSlice<float2> points, TTranform tranform, float2 point) where TTranform : struct, ITransformFloat2 Parameters Type Name Description Unity.Collections.NativeSlice < Unity.Mathematics.float2 > points TTranform tranform Unity.Mathematics.float2 point Returns Type Description System.Boolean Type Parameters Name Description TTranform | Improve this Doc View Source Distance<TTranform>(NativeSlice<float2>, TTranform, NativeSlice<float2>, TTranform) Returns minimum distance between two convex polygons. Polygon points must be convex and sorted counter clockwise. Declaration public static float Distance<TTranform>(NativeSlice<float2> pointsA, TTranform tranformA, NativeSlice<float2> pointsB, TTranform transformB) where TTranform : struct, ITransformFloat2 Parameters Type Name Description Unity.Collections.NativeSlice < Unity.Mathematics.float2 > pointsA TTranform tranformA Unity.Collections.NativeSlice < Unity.Mathematics.float2 > pointsB TTranform transformB Returns Type Description System.Single Type Parameters Name Description TTranform | Improve this Doc View Source GetArea<TTranform>(NativeSlice<float2>, TTranform) Returns area of convex polygon. Polygon points must be convex and sorted counter clockwise. Declaration public static float GetArea<TTranform>(NativeSlice<float2> points, TTranform tranform) where TTranform : struct, ITransformFloat2 Parameters Type Name Description Unity.Collections.NativeSlice < Unity.Mathematics.float2 > points TTranform tranform Returns Type Description System.Single Type Parameters Name Description TTranform | Improve this Doc View Source GetCentroid<TTranform>(NativeSlice<float2>, TTranform) Returns centroid of convex polygon. Polygon points must be convex and sorted counter clockwise. Based on https://en.wikipedia.org/wiki/Centroid . Declaration public static float2 GetCentroid<TTranform>(NativeSlice<float2> points, TTranform tranform) where TTranform : struct, ITransformFloat2 Parameters Type Name Description Unity.Collections.NativeSlice < Unity.Mathematics.float2 > points TTranform tranform Returns Type Description Unity.Mathematics.float2 Type Parameters Name Description TTranform | Improve this Doc View Source InscribedCircle<TTranform>(NativeSlice<float2>, TTranform) Returns maximum circle that is inside the shape. Declaration public static Circle InscribedCircle<TTranform>(NativeSlice<float2> points, TTranform tranform) where TTranform : struct, ITransformFloat2 Parameters Type Name Description Unity.Collections.NativeSlice < Unity.Mathematics.float2 > points TTranform tranform Returns Type Description Circle Type Parameters Name Description TTranform | Improve this Doc View Source IsCounterClockwiseConvexPolygon(NativeSlice<float2>) Returns true if points form counter clockwise convex polygon. Declaration public static bool IsCounterClockwiseConvexPolygon(NativeSlice<float2> points) Parameters Type Name Description Unity.Collections.NativeSlice < Unity.Mathematics.float2 > points Returns Type Description System.Boolean | Improve this Doc View Source SortCounterClockwise(NativeSlice<float2>) Sorts point in counter clockwise. Polygon points must be convex. Declaration public static void SortCounterClockwise(NativeSlice<float2> points) Parameters Type Name Description Unity.Collections.NativeSlice < Unity.Mathematics.float2 > points"
  },
  "api/ProjectDawn.Geometry2D.DelaunayTriangulation.html": {
    "href": "api/ProjectDawn.Geometry2D.DelaunayTriangulation.html",
    "title": "Struct DelaunayTriangulation",
    "keywords": "Struct DelaunayTriangulation Delaunay trinagulation composed of triangles and points. Use Construct<T>(ref T) to construct this delaunay triangulation. Implements IVoronoiOutput System.IDisposable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Geometry2D Assembly : ProjectDawn.Geometry.dll Syntax public struct DelaunayTriangulation : IVoronoiOutput, IDisposable Constructors | Improve this Doc View Source DelaunayTriangulation(Int32, AllocatorManager.AllocatorHandle) Declaration public DelaunayTriangulation(int numSites, AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description System.Int32 numSites Unity.Collections.AllocatorManager.AllocatorHandle allocator Fields | Improve this Doc View Source Indices List of triangles indices. Declaration public NativeList<int3> Indices Field Value Type Description Unity.Collections.NativeList < Unity.Mathematics.int3 > | Improve this Doc View Source Points List of points. Declaration public NativeList<float2> Points Field Value Type Description Unity.Collections.NativeList < Unity.Mathematics.float2 > Methods | Improve this Doc View Source Build() Callback after VoronoiBuilder finished building. Declaration public void Build() | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source ProcessEdge(Double, Double, Double, Int32, Int32, Int32, Int32) Callback after VoronoiBuilder processes the edge. Declaration public void ProcessEdge(double a, double b, double c, int leftVertexIndex, int rightVertexIndex, int leftSiteIndex, int rightSiteIndex) Parameters Type Name Description System.Double a Standard line a coefficient. System.Double b Standard line b coefficient. System.Double c Standard line c coefficient. System.Int32 leftVertexIndex System.Int32 rightVertexIndex System.Int32 leftSiteIndex System.Int32 rightSiteIndex | Improve this Doc View Source ProcessSite(double2, Int32) Callback after VoronoiBuilder processes the site. Declaration public void ProcessSite(double2 point, int siteIndex) Parameters Type Name Description Unity.Mathematics.double2 point The point of site. System.Int32 siteIndex | Improve this Doc View Source ProcessVertex(double2, Int32, Int32, Int32) Callback after VoronoiBuilder processes the vertex. Declaration public int ProcessVertex(double2 point, int siteIndexA, int siteIndexB, int siteIndexC) Parameters Type Name Description Unity.Mathematics.double2 point The point of vertex. System.Int32 siteIndexA System.Int32 siteIndexB System.Int32 siteIndexC Returns Type Description System.Int32 The index of the vertex. Implements IVoronoiOutput System.IDisposable"
  },
  "api/ProjectDawn.Geometry2D.html": {
    "href": "api/ProjectDawn.Geometry2D.html",
    "title": "Namespace ProjectDawn.Geometry2D",
    "keywords": "Namespace ProjectDawn.Geometry2D Classes ConvexPolygonUtility A static class to contain various convex polygon functions. All operations that uses points requires points to form convex polygon and be sorted counter clockwise order. ShapeGizmos Helper class for drawing shapes using gizmos. ShapeUtility Helper class for finding intersection between 2d geometry shapes. Structs Capsule A capsule is a circle that is extended across the line. Circle A circle is a shape consisting of all points in a plane that are at a given distance from a given point, the centre. ConvexPolygon<T> A convex polygon composed of counter clockwise ordered points. DelaunayTriangulation Delaunay trinagulation composed of triangles and points. Use Construct<T>(ref T) to construct this delaunay triangulation. Line Line segment that has start and end points. Ray Parametric line that is specified by center and direction. Rectangle A rectangle shape. VoronoiBuilder Voronoi builder used for construcing varonoi shapes. VoronoiCell The cell (a.k.a region) of voronoi diagram. VoronoiDiagram Voronoi diagram composed of cells, edges and vertices. Voronoi diagram is a partition of a plane into regions close to each of a given set of objects. In the simplest case, these objects are just finitely many points in the plane (called seeds, sites, or generators). For each seed there is a corresponding region, called a Voronoi cell, consisting of all points of the plane closer to that seed than to any other. Use Construct<T>(ref T) to construct this voronoi diagram. VoronoiEdge The edge of voronoi diagram. VoronoiVertex Vertex of voronoi diagram. Interfaces ITransformFloat2 IVoronoiOutput Interface of the voronoi output used by Construct<T>(ref T) to construct voronoi shape. Enums VoronoiVertexType The type of voronoi vertex. Delegates ShapeGizmos.ChartFunction"
  },
  "api/ProjectDawn.Geometry2D.ITransformFloat2.html": {
    "href": "api/ProjectDawn.Geometry2D.ITransformFloat2.html",
    "title": "Interface ITransformFloat2",
    "keywords": "Interface ITransformFloat2 Namespace : ProjectDawn.Geometry2D Assembly : ProjectDawn.Geometry.dll Syntax public interface ITransformFloat2 Methods | Improve this Doc View Source Transform(float2) Returns transformed point. Declaration float2 Transform(float2 point) Parameters Type Name Description Unity.Mathematics.float2 point Returns Type Description Unity.Mathematics.float2"
  },
  "api/ProjectDawn.Geometry2D.IVoronoiOutput.html": {
    "href": "api/ProjectDawn.Geometry2D.IVoronoiOutput.html",
    "title": "Interface IVoronoiOutput",
    "keywords": "Interface IVoronoiOutput Interface of the voronoi output used by Construct<T>(ref T) to construct voronoi shape. Namespace : ProjectDawn.Geometry2D Assembly : ProjectDawn.Geometry.dll Syntax public interface IVoronoiOutput Methods | Improve this Doc View Source Build() Callback after VoronoiBuilder finished building. Declaration void Build() | Improve this Doc View Source ProcessEdge(Double, Double, Double, Int32, Int32, Int32, Int32) Callback after VoronoiBuilder processes the edge. Declaration void ProcessEdge(double a, double b, double c, int leftVertexIndex, int rightVertexIndex, int leftSiteIndex, int rightSiteIndex) Parameters Type Name Description System.Double a Standard line a coefficient. System.Double b Standard line b coefficient. System.Double c Standard line c coefficient. System.Int32 leftVertexIndex System.Int32 rightVertexIndex System.Int32 leftSiteIndex System.Int32 rightSiteIndex | Improve this Doc View Source ProcessSite(double2, Int32) Callback after VoronoiBuilder processes the site. Declaration void ProcessSite(double2 point, int index) Parameters Type Name Description Unity.Mathematics.double2 point The point of site. System.Int32 index Index of site. | Improve this Doc View Source ProcessVertex(double2, Int32, Int32, Int32) Callback after VoronoiBuilder processes the vertex. Declaration int ProcessVertex(double2 point, int siteIndexA, int siteIndexB, int siteIndexC) Parameters Type Name Description Unity.Mathematics.double2 point The point of vertex. System.Int32 siteIndexA System.Int32 siteIndexB System.Int32 siteIndexC Returns Type Description System.Int32 The index of the vertex."
  },
  "api/ProjectDawn.Geometry2D.Line.html": {
    "href": "api/ProjectDawn.Geometry2D.Line.html",
    "title": "Struct Line",
    "keywords": "Struct Line Line segment that has start and end points. Implements System.IEquatable < Line > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Geometry2D Assembly : ProjectDawn.Geometry.dll Syntax [Serializable] public struct Line : IEquatable<Line> Constructors | Improve this Doc View Source Line(float2, float2) Declaration public Line(float2 from, float2 to) Parameters Type Name Description Unity.Mathematics.float2 from Unity.Mathematics.float2 to Fields | Improve this Doc View Source From Line start position. Declaration public float2 From Field Value Type Description Unity.Mathematics.float2 | Improve this Doc View Source To Line end position. Declaration public float2 To Field Value Type Description Unity.Mathematics.float2 Properties | Improve this Doc View Source Direction Returns direction of the line. Declaration public float2 Direction { get; } Property Value Type Description Unity.Mathematics.float2 | Improve this Doc View Source Length Returns length of the line. Declaration public float Length { get; } Property Value Type Description System.Single | Improve this Doc View Source MidPoint Mid point of the line. Declaration public float2 MidPoint { get; } Property Value Type Description Unity.Mathematics.float2 | Improve this Doc View Source Towards Line vector. Declaration public float2 Towards { get; } Property Value Type Description Unity.Mathematics.float2 Methods | Improve this Doc View Source BoundingRectangle() Returns minimum rectangle that fully covers shape. Declaration public Rectangle BoundingRectangle() Returns Type Description Rectangle | Improve this Doc View Source CircumscribedCircle() Returns minimum circle that fully covers shape. Declaration public Circle CircumscribedCircle() Returns Type Description Circle | Improve this Doc View Source ClosestPoint(float2) Returns a point on the perimeter of this rectangle that is closest to the specified point. Declaration public float2 ClosestPoint(float2 point) Parameters Type Name Description Unity.Mathematics.float2 point Returns Type Description Unity.Mathematics.float2 | Improve this Doc View Source Distance(float2) Returns minimum distance between shapes. Declaration public float Distance(float2 point) Parameters Type Name Description Unity.Mathematics.float2 point Returns Type Description System.Single | Improve this Doc View Source Equals(Line) Declaration public bool Equals(Line other) Parameters Type Name Description Line other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Overlap(Capsule) Declaration public bool Overlap(Capsule capsule) Parameters Type Name Description Capsule capsule Returns Type Description System.Boolean | Improve this Doc View Source Overlap(Circle) Returns true if shapes surfaces overlap. Declaration public bool Overlap(Circle circle) Parameters Type Name Description Circle circle Returns Type Description System.Boolean | Improve this Doc View Source Overlap(Line) Returns true if shapes surfaces overlap. Declaration public bool Overlap(Line line) Parameters Type Name Description Line line Returns Type Description System.Boolean | Improve this Doc View Source Overlap(Rectangle) Returns true if shapes surfaces overlap. Declaration public bool Overlap(Rectangle rectangle) Parameters Type Name Description Rectangle rectangle Returns Type Description System.Boolean | Improve this Doc View Source ToRay() Converts to ray. Declaration public Ray ToRay() Returns Type Description Ray Operators | Improve this Doc View Source Equality(Line, Line) Declaration public static bool operator ==(Line lhs, Line rhs) Parameters Type Name Description Line lhs Line rhs Returns Type Description System.Boolean | Improve this Doc View Source Implicit(Single to Line) Declaration public static implicit operator Line(float value) Parameters Type Name Description System.Single value Returns Type Description Line | Improve this Doc View Source Inequality(Line, Line) Declaration public static bool operator !=(Line lhs, Line rhs) Parameters Type Name Description Line lhs Line rhs Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "api/ProjectDawn.Geometry2D.LowLevel.Unsafe.html": {
    "href": "api/ProjectDawn.Geometry2D.LowLevel.Unsafe.html",
    "title": "Namespace ProjectDawn.Geometry2D.LowLevel.Unsafe",
    "keywords": "Namespace ProjectDawn.Geometry2D.LowLevel.Unsafe Structs UnsafeVoronoiBuilder Voronoi builder used for construcing varonoi shapes."
  },
  "api/ProjectDawn.Geometry2D.LowLevel.Unsafe.UnsafeVoronoiBuilder.html": {
    "href": "api/ProjectDawn.Geometry2D.LowLevel.Unsafe.UnsafeVoronoiBuilder.html",
    "title": "Struct UnsafeVoronoiBuilder",
    "keywords": "Struct UnsafeVoronoiBuilder Voronoi builder used for construcing varonoi shapes. Implements System.IDisposable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Geometry2D.LowLevel.Unsafe Assembly : ProjectDawn.Geometry.dll Syntax public struct UnsafeVoronoiBuilder : IDisposable Constructors | Improve this Doc View Source UnsafeVoronoiBuilder(Int32, AllocatorManager.AllocatorHandle) Declaration public UnsafeVoronoiBuilder(int initialCapacity, AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description System.Int32 initialCapacity Unity.Collections.AllocatorManager.AllocatorHandle allocator Properties | Improve this Doc View Source NumSites Returns the number of sites. Declaration public int NumSites { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Add(double2) Adds new site into voronoi builder. Returns false if point already exists. Declaration public bool Add(double2 point) Parameters Type Name Description Unity.Mathematics.double2 point New site point. Returns Type Description System.Boolean | Improve this Doc View Source Clear() Removes all elements of this queue. Declaration public void Clear() Remarks Does not change the capacity. | Improve this Doc View Source Construct<T>(ref T) Constructs voronoi and outputs the data into the generic structure. Declaration public void Construct<T>(ref T output) where T : IVoronoiOutput Parameters Type Name Description T output The output. Type Parameters Name Description T Type type of voronoi output. | Improve this Doc View Source Create(Int32, AllocatorManager.AllocatorHandle) Creates a new container with the specified initial capacity and type of memory allocation. Declaration public static UnsafeVoronoiBuilder*Create(int initialCapacity, AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the list. If the list grows larger than its capacity, the internal array is copied to a new, larger array. Unity.Collections.AllocatorManager.AllocatorHandle allocator A member of the Unity.Collections.Allocator enumeration. Returns Type Description UnsafeVoronoiBuilder * | Improve this Doc View Source Destroy(UnsafeVoronoiBuilder*) Destroys container. Declaration public static void Destroy(UnsafeVoronoiBuilder*data) Parameters Type Name Description UnsafeVoronoiBuilder * data | Improve this Doc View Source Dispose() Releases all resources (memory and safety handles). Declaration public void Dispose() Implements System.IDisposable"
  },
  "api/ProjectDawn.Geometry2D.Ray.html": {
    "href": "api/ProjectDawn.Geometry2D.Ray.html",
    "title": "Struct Ray",
    "keywords": "Struct Ray Parametric line that is specified by center and direction. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Geometry2D Assembly : ProjectDawn.Geometry.dll Syntax [Serializable] public struct Ray Constructors | Improve this Doc View Source Ray(float2, float2) Declaration public Ray(float2 origin, float2 direction) Parameters Type Name Description Unity.Mathematics.float2 origin Unity.Mathematics.float2 direction Fields | Improve this Doc View Source Direction Line direction vector. Declaration public float2 Direction Field Value Type Description Unity.Mathematics.float2 | Improve this Doc View Source Origin Line center point. Declaration public float2 Origin Field Value Type Description Unity.Mathematics.float2 Methods | Improve this Doc View Source ClosestPoint(Ray, float2) Returns a point on the perimeter of this rectangle that is closest to the specified point. Declaration public static float2 ClosestPoint(in Ray ray, float2 point) Parameters Type Name Description Ray ray Unity.Mathematics.float2 point Returns Type Description Unity.Mathematics.float2 | Improve this Doc View Source GetPoint(Single) Returns point along the ray at given time. Declaration public float2 GetPoint(float t) Parameters Type Name Description System.Single t Returns Type Description Unity.Mathematics.float2 | Improve this Doc View Source Intersection(Circle, out float2) Returns intersection times between ray and shape. Declaration public bool Intersection(Circle circle, out float2 t) Parameters Type Name Description Circle circle Unity.Mathematics.float2 t Returns Type Description System.Boolean | Improve this Doc View Source Intersection(Line, out Single) Returns intersection time between ray and shape. Declaration public bool Intersection(Line line, out float t) Parameters Type Name Description Line line System.Single t Returns Type Description System.Boolean | Improve this Doc View Source Intersection(Rectangle, out float2) Returns intersection times between ray and shape. Declaration public bool Intersection(Rectangle rectangle, out float2 t) Parameters Type Name Description Rectangle rectangle Unity.Mathematics.float2 t Returns Type Description System.Boolean | Improve this Doc View Source IntersectionLine(Circle, out Line) Returns intersection line between ray and shape. Declaration public bool IntersectionLine(Circle circle, out Line intersection) Parameters Type Name Description Circle circle Line intersection Returns Type Description System.Boolean | Improve this Doc View Source IntersectionLine(Rectangle, out Line) Returns intersection line between ray and shape. Declaration public bool IntersectionLine(Rectangle rectangle, out Line intersection) Parameters Type Name Description Rectangle rectangle Line intersection Returns Type Description System.Boolean | Improve this Doc View Source IntersectionPoint(Ray, Ray, out float2) Returns intersection point between two rays. Declaration public static bool IntersectionPoint(Ray a, Ray b, out float2 point) Parameters Type Name Description Ray a Ray b Unity.Mathematics.float2 point Returns Type Description System.Boolean | Improve this Doc View Source ToLine(float2) Returns line at specific time range. Declaration public Line ToLine(float2 t) Parameters Type Name Description Unity.Mathematics.float2 t Returns Type Description Line"
  },
  "api/ProjectDawn.Geometry2D.Rectangle.html": {
    "href": "api/ProjectDawn.Geometry2D.Rectangle.html",
    "title": "Struct Rectangle",
    "keywords": "Struct Rectangle A rectangle shape. Implements System.IEquatable < Rectangle > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Geometry2D Assembly : ProjectDawn.Geometry.dll Syntax [Serializable] public struct Rectangle : IEquatable<Rectangle> Constructors | Improve this Doc View Source Rectangle(float2, float2) Declaration public Rectangle(float2 position, float2 size) Parameters Type Name Description Unity.Mathematics.float2 position Unity.Mathematics.float2 size Fields | Improve this Doc View Source Position The minimum point of rectangle. Declaration public float2 Position Field Value Type Description Unity.Mathematics.float2 | Improve this Doc View Source Size The size of the rectangle. Declaration public float2 Size Field Value Type Description Unity.Mathematics.float2 Properties | Improve this Doc View Source Area Returns area of the rectangle. Declaration public float Area { get; } Property Value Type Description System.Single | Improve this Doc View Source Center The center of the rectangle. Declaration public float2 Center { get; set; } Property Value Type Description Unity.Mathematics.float2 | Improve this Doc View Source Extent The half size of the rectangle. Declaration public float2 Extent { get; set; } Property Value Type Description Unity.Mathematics.float2 | Improve this Doc View Source Height The height of the rectangle. Declaration public float Height { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Max The maximum point of the rectangle. Declaration public float2 Max { get; set; } Property Value Type Description Unity.Mathematics.float2 | Improve this Doc View Source Min The minimum point of the rectangle. Declaration public float2 Min { get; set; } Property Value Type Description Unity.Mathematics.float2 | Improve this Doc View Source Perimeter Returns perimeter of the rectangle. Declaration public float Perimeter { get; } Property Value Type Description System.Single | Improve this Doc View Source Width The width of the rectangle. Declaration public float Width { get; set; } Property Value Type Description System.Single Methods | Improve this Doc View Source CircumscribedCircle() Returns minimum circle that fully covers shape. Declaration public Circle CircumscribedCircle() Returns Type Description Circle | Improve this Doc View Source ClosestPoint(float2) Returns a point on the perimeter of this rectangle that is closest to the specified point. Declaration public float2 ClosestPoint(float2 point) Parameters Type Name Description Unity.Mathematics.float2 point Returns Type Description Unity.Mathematics.float2 | Improve this Doc View Source Distance(Circle) Returns minimum distance between shapes. Declaration public float Distance(Circle circle) Parameters Type Name Description Circle circle Returns Type Description System.Single | Improve this Doc View Source Distance(Rectangle) Returns minimum distance between shapes. Declaration public float Distance(Rectangle rectangle) Parameters Type Name Description Rectangle rectangle Returns Type Description System.Single | Improve this Doc View Source Equals(Rectangle) Declaration public bool Equals(Rectangle other) Parameters Type Name Description Rectangle other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source GetLines(out Line, out Line, out Line, out Line) Returns rectangle lines. Declaration public void GetLines(out Line a, out Line b, out Line c, out Line d) Parameters Type Name Description Line a Line b Line c Line d | Improve this Doc View Source GetPoints(out float2, out float2, out float2, out float2) Returns rectangle points in clockwise order. First point is rectangle position. Declaration public void GetPoints(out float2 a, out float2 b, out float2 c, out float2 d) Parameters Type Name Description Unity.Mathematics.float2 a Unity.Mathematics.float2 b Unity.Mathematics.float2 c Unity.Mathematics.float2 d | Improve this Doc View Source InscribedCircle() Returns maximum circle that is inside the shape. Declaration public Circle InscribedCircle() Returns Type Description Circle | Improve this Doc View Source Overlap(Capsule) Declaration public bool Overlap(Capsule capsule) Parameters Type Name Description Capsule capsule Returns Type Description System.Boolean | Improve this Doc View Source Overlap(Circle) Returns true if shapes surfaces overlap. Declaration public bool Overlap(Circle circle) Parameters Type Name Description Circle circle Returns Type Description System.Boolean | Improve this Doc View Source Overlap(Line) Returns true if shapes surfaces overlap. Declaration public bool Overlap(Line line) Parameters Type Name Description Line line Returns Type Description System.Boolean | Improve this Doc View Source Overlap(Rectangle) Returns true if shapes surfaces overlap. Declaration public bool Overlap(Rectangle rectangle) Parameters Type Name Description Rectangle rectangle Returns Type Description System.Boolean | Improve this Doc View Source Overlap(float2) Returns true if shapes surfaces overlap. Declaration public bool Overlap(float2 point) Parameters Type Name Description Unity.Mathematics.float2 point Returns Type Description System.Boolean | Improve this Doc View Source Union(Rectangle, Rectangle) Returns minimum bounding rectangle that contains both rectangles. Declaration public static Rectangle Union(Rectangle a, Rectangle b) Parameters Type Name Description Rectangle a Rectangle b Returns Type Description Rectangle Operators | Improve this Doc View Source Equality(Rectangle, Rectangle) Declaration public static bool operator ==(Rectangle lhs, Rectangle rhs) Parameters Type Name Description Rectangle lhs Rectangle rhs Returns Type Description System.Boolean | Improve this Doc View Source Implicit(Rectangle to Rect) Declaration public static implicit operator Rect(Rectangle v) Parameters Type Name Description Rectangle v Returns Type Description UnityEngine.Rect | Improve this Doc View Source Implicit(Rect to Rectangle) Declaration public static implicit operator Rectangle(Rect v) Parameters Type Name Description UnityEngine.Rect v Returns Type Description Rectangle | Improve this Doc View Source Inequality(Rectangle, Rectangle) Declaration public static bool operator !=(Rectangle lhs, Rectangle rhs) Parameters Type Name Description Rectangle lhs Rectangle rhs Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "api/ProjectDawn.Geometry2D.ShapeGizmos.ChartFunction.html": {
    "href": "api/ProjectDawn.Geometry2D.ShapeGizmos.ChartFunction.html",
    "title": "Delegate ShapeGizmos.ChartFunction",
    "keywords": "Delegate ShapeGizmos.ChartFunction Namespace : ProjectDawn.Geometry2D Assembly : ProjectDawn.Geometry.dll Syntax public delegate float ChartFunction(float x); Parameters Type Name Description System.Single x Returns Type Description System.Single"
  },
  "api/ProjectDawn.Geometry2D.ShapeGizmos.html": {
    "href": "api/ProjectDawn.Geometry2D.ShapeGizmos.html",
    "title": "Class ShapeGizmos",
    "keywords": "Class ShapeGizmos Helper class for drawing shapes using gizmos. Inheritance System.Object ShapeGizmos Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ProjectDawn.Geometry2D Assembly : ProjectDawn.Geometry.dll Syntax public static class ShapeGizmos Methods | Improve this Doc View Source DrawChart(ShapeGizmos.ChartFunction, Rectangle, Int32, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawChart(ShapeGizmos.ChartFunction chart, Rectangle bounds, int numSteps, Color color) Parameters Type Name Description ShapeGizmos.ChartFunction chart Rectangle bounds System.Int32 numSteps UnityEngine.Color color | Improve this Doc View Source DrawDottedLine(Line, Single, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawDottedLine(Line line, float screenSpaceSize, Color color) Parameters Type Name Description Line line System.Single screenSpaceSize UnityEngine.Color color | Improve this Doc View Source DrawDottedLine(float2, float2, Single, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawDottedLine(float2 from, float2 to, float screenSpaceSize, Color color) Parameters Type Name Description Unity.Mathematics.float2 from Unity.Mathematics.float2 to System.Single screenSpaceSize UnityEngine.Color color | Improve this Doc View Source DrawLine(Line, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawLine(Line line, Color color) Parameters Type Name Description Line line UnityEngine.Color color | Improve this Doc View Source DrawLine(float2, float2, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawLine(float2 from, float2 to, Color color) Parameters Type Name Description Unity.Mathematics.float2 from Unity.Mathematics.float2 to UnityEngine.Color color | Improve this Doc View Source DrawLineArrow(Line, Single, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawLineArrow(Line line, float size, Color color) Parameters Type Name Description Line line System.Single size UnityEngine.Color color | Improve this Doc View Source DrawSolidCircle(Circle, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawSolidCircle(Circle circle, Color color) Parameters Type Name Description Circle circle UnityEngine.Color color | Improve this Doc View Source DrawSolidCircle(float2, Single, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawSolidCircle(float2 point, float size, Color color) Parameters Type Name Description Unity.Mathematics.float2 point System.Single size UnityEngine.Color color | Improve this Doc View Source DrawSolidRectangle(Rectangle, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawSolidRectangle(Rectangle rectangle, Color color) Parameters Type Name Description Rectangle rectangle UnityEngine.Color color | Improve this Doc View Source DrawText(float2, String, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawText(float2 point, string text, Color color) Parameters Type Name Description Unity.Mathematics.float2 point System.String text UnityEngine.Color color | Improve this Doc View Source DrawWireCapsule(Capsule, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawWireCapsule(Capsule capsule, Color color) Parameters Type Name Description Capsule capsule UnityEngine.Color color | Improve this Doc View Source DrawWireCircle(Circle, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawWireCircle(Circle circle, Color color) Parameters Type Name Description Circle circle UnityEngine.Color color | Improve this Doc View Source DrawWireCircle(float2, Single, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawWireCircle(float2 point, float size, Color color) Parameters Type Name Description Unity.Mathematics.float2 point System.Single size UnityEngine.Color color | Improve this Doc View Source DrawWirePolygon<T>(ConvexPolygon<T>, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawWirePolygon<T>(ConvexPolygon<T> polygon, Color color) where T : struct, ITransformFloat2 Parameters Type Name Description ConvexPolygon <T> polygon UnityEngine.Color color Type Parameters Name Description T | Improve this Doc View Source DrawWireRectangle(Rectangle, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawWireRectangle(Rectangle rectangle, Color color) Parameters Type Name Description Rectangle rectangle UnityEngine.Color color"
  },
  "api/ProjectDawn.Geometry2D.ShapeUtility.html": {
    "href": "api/ProjectDawn.Geometry2D.ShapeUtility.html",
    "title": "Class ShapeUtility",
    "keywords": "Class ShapeUtility Helper class for finding intersection between 2d geometry shapes. Inheritance System.Object ShapeUtility Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ProjectDawn.Geometry2D Assembly : ProjectDawn.Geometry.dll Syntax public static class ShapeUtility Methods | Improve this Doc View Source DistanceCircleAndCircle(Circle, Circle) Returns minimum distance between shapes. Declaration public static float DistanceCircleAndCircle(Circle a, Circle b) Parameters Type Name Description Circle a Circle b Returns Type Description System.Single | Improve this Doc View Source DistanceRectangleAndCircle(Rectangle, Circle) Returns minimum distance between shapes. Declaration public static float DistanceRectangleAndCircle(Rectangle a, Circle b) Parameters Type Name Description Rectangle a Circle b Returns Type Description System.Single | Improve this Doc View Source DistanceRectangleAndRectangle(Rectangle, Rectangle) Returns minimum distance between shapes. Declaration public static float DistanceRectangleAndRectangle(Rectangle a, Rectangle b) Parameters Type Name Description Rectangle a Rectangle b Returns Type Description System.Single | Improve this Doc View Source Intersection(Line, Line, out float2) Declaration public static bool Intersection(Line a, Line b, out float2 point) Parameters Type Name Description Line a Line b Unity.Mathematics.float2 point Returns Type Description System.Boolean | Improve this Doc View Source Intersection(Line, Rectangle, out float2, out float2) Declaration public static bool Intersection(Line line, Rectangle rectangle, out float2 pointA, out float2 pointB) Parameters Type Name Description Line line Rectangle rectangle Unity.Mathematics.float2 pointA Unity.Mathematics.float2 pointB Returns Type Description System.Boolean | Improve this Doc View Source Intersection(Ray, Circle, out Line) Declaration public static bool Intersection(Ray ray, Circle circle, out Line intersection) Parameters Type Name Description Ray ray Circle circle Line intersection Returns Type Description System.Boolean | Improve this Doc View Source Intersection(Ray, Circle, out float2) Declaration public static bool Intersection(Ray ray, Circle circle, out float2 t) Parameters Type Name Description Ray ray Circle circle Unity.Mathematics.float2 t Returns Type Description System.Boolean | Improve this Doc View Source Intersection(Ray, Line, out Single) Declaration public static bool Intersection(Ray a, Line b, out float t) Parameters Type Name Description Ray a Line b System.Single t Returns Type Description System.Boolean | Improve this Doc View Source Intersection(Ray, Ray, out float2) Finds intersection times of two rays. Based on https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection . Declaration public static bool Intersection(Ray a, Ray b, out float2 t) Parameters Type Name Description Ray a Ray b Unity.Mathematics.float2 t Returns Type Description System.Boolean | Improve this Doc View Source Intersection(Ray, Rectangle, out Line) Declaration public static bool Intersection(Ray ray, Rectangle rectangle, out Line intersection) Parameters Type Name Description Ray ray Rectangle rectangle Line intersection Returns Type Description System.Boolean | Improve this Doc View Source Intersection(Ray, Rectangle, out float2) Declaration public static bool Intersection(Ray ray, Rectangle rectangle, out float2 t) Parameters Type Name Description Ray ray Rectangle rectangle Unity.Mathematics.float2 t Returns Type Description System.Boolean | Improve this Doc View Source IntersectionPolygonAndLine<T>(NativeSlice<float2>, T, Line, out float2) Declaration public static bool IntersectionPolygonAndLine<T>(NativeSlice<float2> points, T tranform, Line line, out float2 point) where T : struct, ITransformFloat2 Parameters Type Name Description Unity.Collections.NativeSlice < Unity.Mathematics.float2 > points T tranform Line line Unity.Mathematics.float2 point Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source OverlapCapsuleAndCapsule(Capsule, Capsule) Returns true if shapes surfaces overlap. Declaration public static bool OverlapCapsuleAndCapsule(Capsule a, Capsule b) Parameters Type Name Description Capsule a Capsule b Returns Type Description System.Boolean | Improve this Doc View Source OverlapCapsuleAndCircle(Capsule, Circle) Returns true if shapes surfaces overlap. Declaration public static bool OverlapCapsuleAndCircle(Capsule a, Circle b) Parameters Type Name Description Capsule a Circle b Returns Type Description System.Boolean | Improve this Doc View Source OverlapCapsuleAndLine(Capsule, Line) Returns true if shapes surfaces overlap. Declaration public static bool OverlapCapsuleAndLine(Capsule a, Line b) Parameters Type Name Description Capsule a Line b Returns Type Description System.Boolean | Improve this Doc View Source OverlapCapsuleAndPoint(Capsule, float2) Returns true if shapes surfaces overlap. Declaration public static bool OverlapCapsuleAndPoint(Capsule a, float2 b) Parameters Type Name Description Capsule a Unity.Mathematics.float2 b Returns Type Description System.Boolean | Improve this Doc View Source OverlapCapsuleAndRectangle(Capsule, Rectangle) Returns true if shapes surfaces overlap. Declaration public static bool OverlapCapsuleAndRectangle(Capsule a, Rectangle b) Parameters Type Name Description Capsule a Rectangle b Returns Type Description System.Boolean | Improve this Doc View Source OverlapCircleAndCircle(Circle, Circle) Returns true if shapes surfaces overlap. Declaration public static bool OverlapCircleAndCircle(Circle a, Circle b) Parameters Type Name Description Circle a Circle b Returns Type Description System.Boolean | Improve this Doc View Source OverlapCircleAndLine(Circle, Line) Returns true if shapes surfaces overlap. Declaration public static bool OverlapCircleAndLine(Circle b, Line a) Parameters Type Name Description Circle b Line a Returns Type Description System.Boolean | Improve this Doc View Source OverlapCircleAndPoint(Circle, float2) Returns true if shapes surfaces overlap. Declaration public static bool OverlapCircleAndPoint(Circle circle, float2 point) Parameters Type Name Description Circle circle Unity.Mathematics.float2 point Returns Type Description System.Boolean | Improve this Doc View Source OverlapConvexPolygonAndPoint<T>(NativeSlice<float2>, T, float2) Returns true if shapes surfaces overlap. Declaration [Obsolete(\"Obsolete from 1.3.0, use ConvexPolygonUtility.ContainsPoint\")] public static bool OverlapConvexPolygonAndPoint<T>(NativeSlice<float2> points, T tranform, float2 point2) where T : struct, ITransformFloat2 Parameters Type Name Description Unity.Collections.NativeSlice < Unity.Mathematics.float2 > points T tranform Unity.Mathematics.float2 point2 Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source OverlapLineAndLine(Line, Line) Returns true if shapes surfaces overlap. Declaration public static bool OverlapLineAndLine(Line a, Line b) Parameters Type Name Description Line a Line b Returns Type Description System.Boolean | Improve this Doc View Source OverlapRectangleAndCircle(Rectangle, Circle) Returns true if shapes surfaces overlap. Declaration public static bool OverlapRectangleAndCircle(Rectangle rectangle, Circle circle) Parameters Type Name Description Rectangle rectangle Circle circle Returns Type Description System.Boolean | Improve this Doc View Source OverlapRectangleAndLine(Rectangle, Line) Returns true if shapes surfaces overlap. Declaration public static bool OverlapRectangleAndLine(Rectangle b, Line a) Parameters Type Name Description Rectangle b Line a Returns Type Description System.Boolean | Improve this Doc View Source OverlapRectangleAndPoint(Rectangle, float2) Returns true if shapes surfaces overlap. Declaration public static bool OverlapRectangleAndPoint(Rectangle rectangle, float2 point) Parameters Type Name Description Rectangle rectangle Unity.Mathematics.float2 point Returns Type Description System.Boolean | Improve this Doc View Source OverlapRectangleAndRectangle(Rectangle, Rectangle) Returns true if shapes surfaces overlap. Declaration public static bool OverlapRectangleAndRectangle(Rectangle a, Rectangle b) Parameters Type Name Description Rectangle a Rectangle b Returns Type Description System.Boolean | Improve this Doc View Source RectangleLines(Rectangle, out Line, out Line, out Line, out Line) Returns rectangle lines. Declaration public static void RectangleLines(Rectangle rectangle, out Line a, out Line b, out Line c, out Line d) Parameters Type Name Description Rectangle rectangle Line a Line b Line c Line d"
  },
  "api/ProjectDawn.Geometry2D.VoronoiBuilder.html": {
    "href": "api/ProjectDawn.Geometry2D.VoronoiBuilder.html",
    "title": "Struct VoronoiBuilder",
    "keywords": "Struct VoronoiBuilder Voronoi builder used for construcing varonoi shapes. Implements System.IDisposable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Geometry2D Assembly : ProjectDawn.Geometry.dll Syntax [NativeContainer] public struct VoronoiBuilder : IDisposable Constructors | Improve this Doc View Source VoronoiBuilder(Int32, Allocator) Declaration public VoronoiBuilder(int initialCapacity, Allocator allocator) Parameters Type Name Description System.Int32 initialCapacity Unity.Collections.Allocator allocator Properties | Improve this Doc View Source IsCreated Whether this queue has been allocated (and not yet deallocated). Declaration public bool IsCreated { get; } Property Value Type Description System.Boolean True if this queue has been allocated (and not yet deallocated). | Improve this Doc View Source NumSites Returns the number of sites. Declaration public int NumSites { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Add(double2) Adds new site into voronoi builder. Returns false if point already exists. Declaration public bool Add(double2 point) Parameters Type Name Description Unity.Mathematics.double2 point New site point. Returns Type Description System.Boolean | Improve this Doc View Source Clear() Removes all elements of this queue. Declaration public void Clear() Remarks Does not change the capacity. | Improve this Doc View Source Construct<T>(ref T) Constructs voronoi and outputs the data into the generic structure. Declaration public void Construct<T>(ref T output) where T : IVoronoiOutput Parameters Type Name Description T output The output. Type Parameters Name Description T Type type of voronoi output. | Improve this Doc View Source Dispose() Releases all resources (memory and safety handles). Declaration public void Dispose() Implements System.IDisposable"
  },
  "api/ProjectDawn.Geometry2D.VoronoiCell.html": {
    "href": "api/ProjectDawn.Geometry2D.VoronoiCell.html",
    "title": "Struct VoronoiCell",
    "keywords": "Struct VoronoiCell The cell (a.k.a region) of voronoi diagram. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Geometry2D Assembly : ProjectDawn.Geometry.dll Syntax public struct VoronoiCell Fields | Improve this Doc View Source Begin Iterator to first voronoi edge of this cell. Declaration public NativeLinkedList<VoronoiEdge>.Iterator Begin Field Value Type Description NativeLinkedList.Iterator <> | Improve this Doc View Source End Iterator to end voronoi edge of this cell. This iterator references dummy edge that represent the end. Declaration public NativeLinkedList<VoronoiEdge>.Iterator End Field Value Type Description NativeLinkedList.Iterator <> | Improve this Doc View Source Site The site point that was used for generating this cell. Declaration public float2 Site Field Value Type Description Unity.Mathematics.float2"
  },
  "api/ProjectDawn.Geometry2D.VoronoiDiagram.html": {
    "href": "api/ProjectDawn.Geometry2D.VoronoiDiagram.html",
    "title": "Struct VoronoiDiagram",
    "keywords": "Struct VoronoiDiagram Voronoi diagram composed of cells, edges and vertices. Voronoi diagram is a partition of a plane into regions close to each of a given set of objects. In the simplest case, these objects are just finitely many points in the plane (called seeds, sites, or generators). For each seed there is a corresponding region, called a Voronoi cell, consisting of all points of the plane closer to that seed than to any other. Use Construct<T>(ref T) to construct this voronoi diagram. Implements IVoronoiOutput System.IDisposable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Geometry2D Assembly : ProjectDawn.Geometry.dll Syntax public struct VoronoiDiagram : IVoronoiOutput, IDisposable Constructors | Improve this Doc View Source VoronoiDiagram(Rectangle, Allocator) Declaration public VoronoiDiagram(Rectangle bounds, Allocator allocator) Parameters Type Name Description Rectangle bounds Unity.Collections.Allocator allocator Fields | Improve this Doc View Source Cells List of cells. Declaration public NativeList<VoronoiCell> Cells Field Value Type Description Unity.Collections.NativeList < VoronoiCell > | Improve this Doc View Source Edges List of edges. Declaration public NativeLinkedList<VoronoiEdge> Edges Field Value Type Description NativeLinkedList < VoronoiEdge > | Improve this Doc View Source Vertices List of vertices. Declaration public NativeList<VoronoiVertex> Vertices Field Value Type Description Unity.Collections.NativeList < VoronoiVertex > Methods | Improve this Doc View Source Build() Callback after VoronoiBuilder finished building. Declaration public void Build() | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source ProcessEdge(Double, Double, Double, Int32, Int32, Int32, Int32) Callback after VoronoiBuilder processes the edge. Declaration public void ProcessEdge(double a, double b, double c, int leftVertexIndex, int rightVertexIndex, int leftSiteIndex, int rightSiteIndex) Parameters Type Name Description System.Double a Standard line a coefficient. System.Double b Standard line b coefficient. System.Double c Standard line c coefficient. System.Int32 leftVertexIndex System.Int32 rightVertexIndex System.Int32 leftSiteIndex System.Int32 rightSiteIndex | Improve this Doc View Source ProcessSite(double2, Int32) Callback after VoronoiBuilder processes the site. Declaration public void ProcessSite(double2 point, int index) Parameters Type Name Description Unity.Mathematics.double2 point The point of site. System.Int32 index Index of site. | Improve this Doc View Source ProcessVertex(double2, Int32, Int32, Int32) Callback after VoronoiBuilder processes the vertex. Declaration public int ProcessVertex(double2 point, int siteIndexA, int siteIndexB, int siteIndexC) Parameters Type Name Description Unity.Mathematics.double2 point The point of vertex. System.Int32 siteIndexA System.Int32 siteIndexB System.Int32 siteIndexC Returns Type Description System.Int32 The index of the vertex. Implements IVoronoiOutput System.IDisposable"
  },
  "api/ProjectDawn.Geometry2D.VoronoiEdge.html": {
    "href": "api/ProjectDawn.Geometry2D.VoronoiEdge.html",
    "title": "Struct VoronoiEdge",
    "keywords": "Struct VoronoiEdge The edge of voronoi diagram. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Geometry2D Assembly : ProjectDawn.Geometry.dll Syntax public struct VoronoiEdge Fields | Improve this Doc View Source FromVertexIndex Index of voronoi vertex from. Declaration public int FromVertexIndex Field Value Type Description System.Int32 | Improve this Doc View Source ToVertexIndex Index of voronoi vertex to. Declaration public int ToVertexIndex Field Value Type Description System.Int32"
  },
  "api/ProjectDawn.Geometry2D.VoronoiVertex.html": {
    "href": "api/ProjectDawn.Geometry2D.VoronoiVertex.html",
    "title": "Struct VoronoiVertex",
    "keywords": "Struct VoronoiVertex Vertex of voronoi diagram. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Geometry2D Assembly : ProjectDawn.Geometry.dll Syntax public struct VoronoiVertex Fields | Improve this Doc View Source Point Declaration public float2 Point Field Value Type Description Unity.Mathematics.float2 | Improve this Doc View Source Type Declaration public VoronoiVertexType Type Field Value Type Description VoronoiVertexType"
  },
  "api/ProjectDawn.Geometry2D.VoronoiVertexType.html": {
    "href": "api/ProjectDawn.Geometry2D.VoronoiVertexType.html",
    "title": "Enum VoronoiVertexType",
    "keywords": "Enum VoronoiVertexType The type of voronoi vertex. Namespace : ProjectDawn.Geometry2D Assembly : ProjectDawn.Geometry.dll Syntax public enum VoronoiVertexType Fields Name Description BorderBottom Bounds and voronoi edge intersection vertex. BorderLeft Bounds and voronoi edge intersection vertex. BorderRight Bounds and voronoi edge intersection vertex. BorderUp Bounds and voronoi edge intersection vertex. Corner Bounds corner. Default True voronoi vertex."
  },
  "api/ProjectDawn.Geometry3D.Box.html": {
    "href": "api/ProjectDawn.Geometry3D.Box.html",
    "title": "Struct Box",
    "keywords": "Struct Box A box shape. Implements System.IEquatable < Box > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Geometry3D Assembly : ProjectDawn.Geometry.dll Syntax [Serializable] public struct Box : IEquatable<Box> Constructors | Improve this Doc View Source Box(float3, float3) Declaration public Box(float3 position, float3 size) Parameters Type Name Description Unity.Mathematics.float3 position Unity.Mathematics.float3 size Fields | Improve this Doc View Source Position The minimum point of box. Declaration public float3 Position Field Value Type Description Unity.Mathematics.float3 | Improve this Doc View Source Size The size of the box. Declaration public float3 Size Field Value Type Description Unity.Mathematics.float3 Properties | Improve this Doc View Source Area Returns area of the box. Declaration public float Area { get; } Property Value Type Description System.Single | Improve this Doc View Source Center The center of the box. Declaration public float3 Center { get; set; } Property Value Type Description Unity.Mathematics.float3 | Improve this Doc View Source Extent The half size of the box. Declaration public float3 Extent { get; set; } Property Value Type Description Unity.Mathematics.float3 | Improve this Doc View Source Height The height of the box. Declaration public float Height { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Max The maximum point of the box. Declaration public float3 Max { get; set; } Property Value Type Description Unity.Mathematics.float3 | Improve this Doc View Source Min The minimum point of the box. Declaration public float3 Min { get; set; } Property Value Type Description Unity.Mathematics.float3 | Improve this Doc View Source Volume Returns volume of the box. Declaration public float Volume { get; } Property Value Type Description System.Single | Improve this Doc View Source Width The width of the box. Declaration public float Width { get; set; } Property Value Type Description System.Single Methods | Improve this Doc View Source CircumscribedSphere() Returns minimum sphere that fully covers shape. Declaration public Sphere CircumscribedSphere() Returns Type Description Sphere | Improve this Doc View Source ClosestPoint(float3) Returns a point on the perimeter of this box that is closest to the specified point. Declaration public float3 ClosestPoint(float3 point) Parameters Type Name Description Unity.Mathematics.float3 point Returns Type Description Unity.Mathematics.float3 | Improve this Doc View Source Equals(Box) Declaration public bool Equals(Box other) Parameters Type Name Description Box other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source InscribedSphere() Returns maximum sphere that is inside the shape. Declaration public Sphere InscribedSphere() Returns Type Description Sphere | Improve this Doc View Source Overlap(Box) Returns true if shapes surfaces overlap. Declaration public bool Overlap(Box box) Parameters Type Name Description Box box Returns Type Description System.Boolean | Improve this Doc View Source Overlap(Capsule) Declaration public bool Overlap(Capsule capsule) Parameters Type Name Description Capsule capsule Returns Type Description System.Boolean | Improve this Doc View Source Overlap(Plane) Returns true if shapes surfaces overlap. Declaration public bool Overlap(Plane plane) Parameters Type Name Description Plane plane Returns Type Description System.Boolean | Improve this Doc View Source Overlap(Sphere) Returns true if shapes surfaces overlap. Declaration public bool Overlap(Sphere sphere) Parameters Type Name Description Sphere sphere Returns Type Description System.Boolean | Improve this Doc View Source Overlap(float3) Returns true if shapes surfaces overlap. Declaration public bool Overlap(float3 point) Parameters Type Name Description Unity.Mathematics.float3 point Returns Type Description System.Boolean | Improve this Doc View Source Union(Box, Box) Returns minimum bounding box that contains both boxes. Declaration public static Box Union(Box a, Box b) Parameters Type Name Description Box a Box b Returns Type Description Box Operators | Improve this Doc View Source Equality(Box, Box) Declaration public static bool operator ==(Box lhs, Box rhs) Parameters Type Name Description Box lhs Box rhs Returns Type Description System.Boolean | Improve this Doc View Source Implicit(Box to Bounds) Declaration public static implicit operator Bounds(Box v) Parameters Type Name Description Box v Returns Type Description UnityEngine.Bounds | Improve this Doc View Source Implicit(Bounds to Box) Declaration public static implicit operator Box(Bounds v) Parameters Type Name Description UnityEngine.Bounds v Returns Type Description Box | Improve this Doc View Source Inequality(Box, Box) Declaration public static bool operator !=(Box lhs, Box rhs) Parameters Type Name Description Box lhs Box rhs Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "api/ProjectDawn.Geometry3D.Capsule.html": {
    "href": "api/ProjectDawn.Geometry3D.Capsule.html",
    "title": "Struct Capsule",
    "keywords": "Struct Capsule A capsule is a sphere that is extended across the line. Implements System.IEquatable < Capsule > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Geometry3D Assembly : ProjectDawn.Geometry.dll Syntax [Serializable] public struct Capsule : IEquatable<Capsule> Constructors | Improve this Doc View Source Capsule(Line, Single) Declaration public Capsule(Line line, float radius) Parameters Type Name Description Line line System.Single radius | Improve this Doc View Source Capsule(float3, Single, Single) Declaration public Capsule(float3 center, float height, float radius) Parameters Type Name Description Unity.Mathematics.float3 center System.Single height System.Single radius Fields | Improve this Doc View Source Line Line through capsule extends. Declaration public Line Line Field Value Type Description Line | Improve this Doc View Source Radius Radius of the capsule. Declaration public float Radius Field Value Type Description System.Single Properties | Improve this Doc View Source Center Center of the capsule. Declaration public float3 Center { get; } Property Value Type Description Unity.Mathematics.float3 | Improve this Doc View Source Diameter Diameter of the capsule. Diameter = 2 * Radius. Declaration public float Diameter { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Height Height of the capsule; Declaration public float Height { get; } Property Value Type Description System.Single Methods | Improve this Doc View Source Equals(Capsule) Declaration public bool Equals(Capsule other) Parameters Type Name Description Capsule other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Overlap(Box) Returns true if shapes surfaces overlap. Declaration public bool Overlap(Box rectangle) Parameters Type Name Description Box rectangle Returns Type Description System.Boolean | Improve this Doc View Source Overlap(Capsule) Returns true if shapes surfaces overlap. Declaration public bool Overlap(Capsule capsule) Parameters Type Name Description Capsule capsule Returns Type Description System.Boolean | Improve this Doc View Source Overlap(Line) Returns true if shapes surfaces overlap. Declaration public bool Overlap(Line line) Parameters Type Name Description Line line Returns Type Description System.Boolean | Improve this Doc View Source Overlap(Sphere) Returns true if shapes surfaces overlap. Declaration public bool Overlap(Sphere circle) Parameters Type Name Description Sphere circle Returns Type Description System.Boolean | Improve this Doc View Source Overlap(float3) Returns true if shapes surfaces overlap. Declaration public bool Overlap(float3 point) Parameters Type Name Description Unity.Mathematics.float3 point Returns Type Description System.Boolean Operators | Improve this Doc View Source Equality(Capsule, Capsule) Declaration public static bool operator ==(Capsule lhs, Capsule rhs) Parameters Type Name Description Capsule lhs Capsule rhs Returns Type Description System.Boolean | Improve this Doc View Source Inequality(Capsule, Capsule) Declaration public static bool operator !=(Capsule lhs, Capsule rhs) Parameters Type Name Description Capsule lhs Capsule rhs Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "api/ProjectDawn.Geometry3D.html": {
    "href": "api/ProjectDawn.Geometry3D.html",
    "title": "Namespace ProjectDawn.Geometry3D",
    "keywords": "Namespace ProjectDawn.Geometry3D Classes MeshExtensions MeshSurfaceGeneration ShapeGizmos Helper class for drawing shapes using gizmos. ShapeUtility Helper class for finding intersection between 2d geometry shapes. VertexAttributeUtility Vertex attribute utility functions. Structs Box A box shape. Capsule A capsule is a sphere that is extended across the line. Line Line segment that has start and end points. MeshSurface Mesh data structure. Used for modifying mesh data and reading/writing back to UnityEngine.Mesh . Plane A plane represented by a normal vector and a distance along the normal from the origin. Ray Parametric line that is specified by center and direction. Sphere A sphere is a shape consisting of all points in a plane that are at a given distance from a given point, the centre. SurfaceLineIntersection Intersection line of the surface. SurfacePointIntersection Intersection point of the surface. Triangle A triangle is a polygon with three edges and three vertices. It is one of the basic shapes in geometry. A triangle with vertices A, B, and C is denoted. TriangularSurface<T> VertexData An managed, resizable vertex data. Stores generic vertex information in interleaved array. As example if structure is created with Position+Normal attributes as result data will be stored in memory as follows: position0/normal0/position1/normal1... Interfaces ITransformFloat3 Enums VertexAttributes Vertex attributes enum flags. Same as UnityEngine.Rendering.VertexAttribute just as flags."
  },
  "api/ProjectDawn.Geometry3D.ITransformFloat3.html": {
    "href": "api/ProjectDawn.Geometry3D.ITransformFloat3.html",
    "title": "Interface ITransformFloat3",
    "keywords": "Interface ITransformFloat3 Namespace : ProjectDawn.Geometry3D Assembly : ProjectDawn.Geometry.dll Syntax public interface ITransformFloat3 Methods | Improve this Doc View Source Transform(float3) Returns transformed point. Declaration float3 Transform(float3 point) Parameters Type Name Description Unity.Mathematics.float3 point Returns Type Description Unity.Mathematics.float3"
  },
  "api/ProjectDawn.Geometry3D.Line.html": {
    "href": "api/ProjectDawn.Geometry3D.Line.html",
    "title": "Struct Line",
    "keywords": "Struct Line Line segment that has start and end points. Implements System.IEquatable < Line > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Geometry3D Assembly : ProjectDawn.Geometry.dll Syntax [Serializable] public struct Line : IEquatable<Line> Constructors | Improve this Doc View Source Line(float3, float3) Declaration public Line(float3 from, float3 to) Parameters Type Name Description Unity.Mathematics.float3 from Unity.Mathematics.float3 to Fields | Improve this Doc View Source From Line start position. Declaration public float3 From Field Value Type Description Unity.Mathematics.float3 | Improve this Doc View Source To Line end position. Declaration public float3 To Field Value Type Description Unity.Mathematics.float3 Properties | Improve this Doc View Source Direction Returns direction of the line. Declaration public float3 Direction { get; } Property Value Type Description Unity.Mathematics.float3 | Improve this Doc View Source Length Returns length of the line. Declaration public float Length { get; } Property Value Type Description System.Single | Improve this Doc View Source MidPoint Mid point of the line. Declaration public float3 MidPoint { get; } Property Value Type Description Unity.Mathematics.float3 | Improve this Doc View Source Towards Line vector. Declaration public float3 Towards { get; } Property Value Type Description Unity.Mathematics.float3 Methods | Improve this Doc View Source ClosestPoint(float3) Returns a point on the perimeter of this rectangle that is closest to the specified point. Declaration public float3 ClosestPoint(float3 point) Parameters Type Name Description Unity.Mathematics.float3 point Returns Type Description Unity.Mathematics.float3 | Improve this Doc View Source Equals(Line) Declaration public bool Equals(Line other) Parameters Type Name Description Line other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Intersection(Triangle, out float3) Returns true if line intersects triangle. Declaration public bool Intersection(Triangle triangle, out float3 point) Parameters Type Name Description Triangle triangle Triangle. Unity.Mathematics.float3 point Intersection point. Returns Type Description System.Boolean Returns true if line intersects triangle. | Improve this Doc View Source ToRay() Converts to ray. Declaration public Ray ToRay() Returns Type Description Ray Operators | Improve this Doc View Source Equality(Line, Line) Declaration public static bool operator ==(Line lhs, Line rhs) Parameters Type Name Description Line lhs Line rhs Returns Type Description System.Boolean | Improve this Doc View Source Implicit(Single to Line) Declaration public static implicit operator Line(float value) Parameters Type Name Description System.Single value Returns Type Description Line | Improve this Doc View Source Inequality(Line, Line) Declaration public static bool operator !=(Line lhs, Line rhs) Parameters Type Name Description Line lhs Line rhs Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "api/ProjectDawn.Geometry3D.LowLevel.Unsafe.html": {
    "href": "api/ProjectDawn.Geometry3D.LowLevel.Unsafe.html",
    "title": "Namespace ProjectDawn.Geometry3D.LowLevel.Unsafe",
    "keywords": "Namespace ProjectDawn.Geometry3D.LowLevel.Unsafe Structs UnsafeVertexData An managed, resizable vertex data, without any thread safety check features. Stores generic vertex information in interleaved array. As example if structure is created with Position+Normal attributes as result data will be stored in memory as follows: position0/normal0/position1/normal1..."
  },
  "api/ProjectDawn.Geometry3D.LowLevel.Unsafe.UnsafeVertexData.html": {
    "href": "api/ProjectDawn.Geometry3D.LowLevel.Unsafe.UnsafeVertexData.html",
    "title": "Struct UnsafeVertexData",
    "keywords": "Struct UnsafeVertexData An managed, resizable vertex data, without any thread safety check features. Stores generic vertex information in interleaved array. As example if structure is created with Position+Normal attributes as result data will be stored in memory as follows: position0/normal0/position1/normal1... Implements System.IDisposable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Geometry3D.LowLevel.Unsafe Assembly : ProjectDawn.Geometry.dll Syntax public struct UnsafeVertexData : IDisposable Constructors | Improve this Doc View Source UnsafeVertexData(Int32, NativeArray<VertexAttributeDescriptor>, AllocatorManager.AllocatorHandle) Declaration public UnsafeVertexData(int initialCapacity, NativeArray<VertexAttributeDescriptor> attributes, AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description System.Int32 initialCapacity Unity.Collections.NativeArray < UnityEngine.Rendering.VertexAttributeDescriptor > attributes Unity.Collections.AllocatorManager.AllocatorHandle allocator Properties | Improve this Doc View Source AttributesLength Vertex attribute count. Declaration public int AttributesLength { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Capacity The number of elements that fit in the current allocation. Declaration public int Capacity { get; } Property Value Type Description System.Int32 The number of elements that fit in the current allocation. Exceptions Type Condition System.ArgumentOutOfRangeException Thrown if the new capacity is smaller than the length. | Improve this Doc View Source Flags Vertex attribute mask used for creating this vertex data. Declaration public VertexAttributes Flags { get; } Property Value Type Description VertexAttributes | Improve this Doc View Source IsCreated Whether this the vertex data has been allocated (and not yet deallocated). Declaration public bool IsCreated { get; } Property Value Type Description System.Boolean True if this the vertex data has been allocated (and not yet deallocated). | Improve this Doc View Source IsEmpty Whether the vertex data is empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean True if the list is empty or the list has not been constructed. | Improve this Doc View Source Length The count of elements. Declaration public int Length { get; } Property Value Type Description System.Int32 The current count of elements. Always less than or equal to the capacity. Remarks To decrease the memory used by a list, set Capacity after reducing the length of the list. | Improve this Doc View Source Size Size of the single vertex. It is a sum of all attributes size. Declaration public int Size { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Clear() Clears the container. Declaration public void Clear() Remarks Stack Capacity remains unchanged. | Improve this Doc View Source Create(Int32, NativeArray<VertexAttributeDescriptor>, AllocatorManager.AllocatorHandle) Creates a new container with the specified initial capacity and type of memory allocation. Declaration public static UnsafeVertexData*Create(int initialCapacity, NativeArray<VertexAttributeDescriptor> attributes, AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the list. If the list grows larger than its capacity, the internal array is copied to a new, larger array. Unity.Collections.NativeArray < UnityEngine.Rendering.VertexAttributeDescriptor > attributes Unity.Collections.AllocatorManager.AllocatorHandle allocator A member of the Unity.Collections.Allocator enumeration. Returns Type Description UnsafeVertexData * | Improve this Doc View Source Destroy(UnsafeVertexData*) Destroys container. Declaration public static void Destroy(UnsafeVertexData*data) Parameters Type Name Description UnsafeVertexData * data | Improve this Doc View Source Dispose() Releases all resources (memory and safety handles). Declaration public void Dispose() | Improve this Doc View Source ElementPointerAt(Int32) Returns pointer to element at index. Declaration public void *ElementPointerAt(int index) Parameters Type Name Description System.Int32 index An index. Returns Type Description System.Void * Returns pointer to element at index. | Improve this Doc View Source GetUnsafePointer() Returns pointer to data. Declaration public void *GetUnsafePointer() Returns Type Description System.Void * Returns pointer to data. | Improve this Doc View Source GetVertexAttributesPointer() Returns pointer to attributes. Declaration public VertexAttributeDescriptor*GetVertexAttributesPointer() Returns Type Description UnityEngine.Rendering.VertexAttributeDescriptor * Returns pointer to attributes. | Improve this Doc View Source Resize(Int32, NativeArrayOptions) Sets the length of this vertex data, increasing the capacity if necessary. Declaration public void Resize(int length, NativeArrayOptions options = NativeArrayOptions.UninitializedMemory) Parameters Type Name Description System.Int32 length The new length of this vertex data. Unity.Collections.NativeArrayOptions options Whether to clear any newly allocated bytes to all zeroes. | Improve this Doc View Source SetCapacity(Int32) Sets the capacity. Declaration public void SetCapacity(int capacity) Parameters Type Name Description System.Int32 capacity The new capacity. Implements System.IDisposable"
  },
  "api/ProjectDawn.Geometry3D.MeshExtensions.html": {
    "href": "api/ProjectDawn.Geometry3D.MeshExtensions.html",
    "title": "Class MeshExtensions",
    "keywords": "Class MeshExtensions Inheritance System.Object MeshExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ProjectDawn.Geometry3D Assembly : ProjectDawn.Geometry.dll Syntax public static class MeshExtensions Methods | Improve this Doc View Source ToMesh<T>(TriangularSurface<T>) Declaration public static Mesh ToMesh<T>(this TriangularSurface<T> surface) where T : struct, ITransformFloat3 Parameters Type Name Description TriangularSurface <T> surface Returns Type Description UnityEngine.Mesh Type Parameters Name Description T | Improve this Doc View Source ToTriangularSurface<T>(Mesh, Allocator, T) Declaration public static TriangularSurface<T> ToTriangularSurface<T>(this Mesh mesh, Allocator allocator, T transform = default(T)) where T : struct, ITransformFloat3 Parameters Type Name Description UnityEngine.Mesh mesh Unity.Collections.Allocator allocator T transform Returns Type Description TriangularSurface <T> Type Parameters Name Description T"
  },
  "api/ProjectDawn.Geometry3D.MeshSurface.html": {
    "href": "api/ProjectDawn.Geometry3D.MeshSurface.html",
    "title": "Struct MeshSurface",
    "keywords": "Struct MeshSurface Mesh data structure. Used for modifying mesh data and reading/writing back to UnityEngine.Mesh . Implements Unity.Collections.INativeDisposable System.IDisposable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Geometry3D Assembly : ProjectDawn.Geometry.dll Syntax public struct MeshSurface : INativeDisposable, IDisposable Constructors | Improve this Doc View Source MeshSurface(Int32, NativeArray<VertexAttributeDescriptor>, Allocator) Declaration public MeshSurface(int initialCapacity, NativeArray<VertexAttributeDescriptor> attributes, Allocator allocator) Parameters Type Name Description System.Int32 initialCapacity Unity.Collections.NativeArray < UnityEngine.Rendering.VertexAttributeDescriptor > attributes Unity.Collections.Allocator allocator Fields | Improve this Doc View Source Indices Index list of the surface. Declaration public NativeList<int3> Indices Field Value Type Description Unity.Collections.NativeList < Unity.Mathematics.int3 > | Improve this Doc View Source SubMeshes Sub meshes of the surface. Declaration public NativeList<SubMeshDescriptor> SubMeshes Field Value Type Description Unity.Collections.NativeList < UnityEngine.Rendering.SubMeshDescriptor > | Improve this Doc View Source VertexData Vertex Data of the surface. Declaration public VertexData VertexData Field Value Type Description VertexData Properties | Improve this Doc View Source IsCreated Returns if the surface is allocated. Declaration public bool IsCreated { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsEmpty Whether the surface is empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean True if the surface is empty or the surface has not been constructed. Methods | Improve this Doc View Source BoundingBox() Returns minimum box that fully covers sub meshes. Declaration public Box BoundingBox() Returns Type Description Box | Improve this Doc View Source Clear() Clears the container. Declaration public void Clear() Remarks MeshSurface Capacity remains unchanged. | Improve this Doc View Source Dispose() Releases all resources (memory and safety handles). Declaration public void Dispose() | Improve this Doc View Source Dispose(JobHandle) Creates and schedules a job that releases all resources (memory and safety handles) of this vertex data. Declaration public JobHandle Dispose(JobHandle inputDeps) Parameters Type Name Description Unity.Jobs.JobHandle inputDeps The dependency for the new job. Returns Type Description Unity.Jobs.JobHandle The handle of the new job. The job depends upon inputDeps and releases all resources (memory and safety handles) of this vertex data. | Improve this Doc View Source Read(Mesh.MeshData, JobHandle) Writes UnityEngine.Mesh.MeshData into MeshSurface . Declaration public JobHandle Read(Mesh.MeshData meshData, JobHandle dependency) Parameters Type Name Description UnityEngine.Mesh.MeshData meshData Output. Unity.Jobs.JobHandle dependency The dependency for the new job. Returns Type Description Unity.Jobs.JobHandle The handle of the new job. | Improve this Doc View Source RecalculateBounds(JobHandle) Recalculates sub meshes bounds. Declaration public JobHandle RecalculateBounds(JobHandle dependency) Parameters Type Name Description Unity.Jobs.JobHandle dependency The dependency for the new job. Returns Type Description Unity.Jobs.JobHandle The handle of the new job. | Improve this Doc View Source Write(Mesh.MeshData, MeshUpdateFlags, JobHandle) Writes MeshSurface into UnityEngine.Mesh.MeshData . Declaration public JobHandle Write(Mesh.MeshData meshData, MeshUpdateFlags flags, JobHandle dependency) Parameters Type Name Description UnityEngine.Mesh.MeshData meshData Output. UnityEngine.Rendering.MeshUpdateFlags flags Mesh update flags. Unity.Jobs.JobHandle dependency The dependency for the new job. Returns Type Description Unity.Jobs.JobHandle The handle of the new job. Implements Unity.Collections.INativeDisposable System.IDisposable Extension Methods MeshSurfaceGeneration.Icocapsule(MeshSurface, Capsule, Int32, JobHandle) MeshSurfaceGeneration.Icocapsule(MeshSurface, Capsule, Int32) MeshSurfaceGeneration.Box(MeshSurface, Box, JobHandle) MeshSurfaceGeneration.Box(MeshSurface, Box) MeshSurfaceGeneration.Icosahedron(MeshSurface, Sphere) MeshSurfaceGeneration.Icosphere(MeshSurface, Sphere, Int32, JobHandle) MeshSurfaceGeneration.Icosphere(MeshSurface, Sphere, Int32)"
  },
  "api/ProjectDawn.Geometry3D.MeshSurfaceGeneration.html": {
    "href": "api/ProjectDawn.Geometry3D.MeshSurfaceGeneration.html",
    "title": "Class MeshSurfaceGeneration",
    "keywords": "Class MeshSurfaceGeneration Inheritance System.Object MeshSurfaceGeneration Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ProjectDawn.Geometry3D Assembly : ProjectDawn.Geometry.dll Syntax public static class MeshSurfaceGeneration Methods | Improve this Doc View Source Box(MeshSurface, Box) Creates Box inside mesh surface. Declaration public static void Box(this MeshSurface surface, Box box) Parameters Type Name Description MeshSurface surface Box box | Improve this Doc View Source Box(MeshSurface, Box, JobHandle) Creates Box inside mesh surface. Declaration public static JobHandle Box(this MeshSurface surface, Box box, JobHandle dependency) Parameters Type Name Description MeshSurface surface Box box Unity.Jobs.JobHandle dependency Returns Type Description Unity.Jobs.JobHandle | Improve this Doc View Source Icocapsule(MeshSurface, Capsule, Int32) Creates Icocapsule inside mesh surface. Declaration public static void Icocapsule(this MeshSurface surface, Capsule capsule, int subdivisions) Parameters Type Name Description MeshSurface surface Capsule capsule System.Int32 subdivisions | Improve this Doc View Source Icocapsule(MeshSurface, Capsule, Int32, JobHandle) Creates Icocapsule inside mesh surface. Declaration public static JobHandle Icocapsule(this MeshSurface surface, Capsule capsule, int subdivisions, JobHandle dependency) Parameters Type Name Description MeshSurface surface Capsule capsule System.Int32 subdivisions Unity.Jobs.JobHandle dependency Returns Type Description Unity.Jobs.JobHandle | Improve this Doc View Source Icosahedron(MeshSurface, Sphere) Creates Icosahedron inside mesh surface. Declaration public static void Icosahedron(this MeshSurface surface, Sphere sphere) Parameters Type Name Description MeshSurface surface Sphere sphere | Improve this Doc View Source Icosphere(MeshSurface, Sphere, Int32) Creates Icosphere inside mesh surface. Declaration public static void Icosphere(this MeshSurface surface, Sphere sphere, int subdivisions = 1) Parameters Type Name Description MeshSurface surface Sphere sphere System.Int32 subdivisions | Improve this Doc View Source Icosphere(MeshSurface, Sphere, Int32, JobHandle) Creates Icosphere inside mesh surface. Declaration public static JobHandle Icosphere(this MeshSurface surface, Sphere sphere, int subdivisions, JobHandle dependency) Parameters Type Name Description MeshSurface surface Sphere sphere System.Int32 subdivisions Unity.Jobs.JobHandle dependency Returns Type Description Unity.Jobs.JobHandle"
  },
  "api/ProjectDawn.Geometry3D.Plane.html": {
    "href": "api/ProjectDawn.Geometry3D.Plane.html",
    "title": "Struct Plane",
    "keywords": "Struct Plane A plane represented by a normal vector and a distance along the normal from the origin. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Geometry3D Assembly : ProjectDawn.Geometry.dll Syntax [Serializable] public struct Plane Remarks A plane splits the 3D space in half. The normal vector points to the positive half and the other half is considered negative. Constructors | Improve this Doc View Source Plane(Single, Single, Single, Single) Constructs a Plane from arbitrary coefficients A, B, C, D of the plane equation Ax + By + Cz + Dw = 0. Declaration public Plane(float coefficientA, float coefficientB, float coefficientC, float coefficientD) Parameters Type Name Description System.Single coefficientA Coefficient A from plane equation. System.Single coefficientB Coefficient B from plane equation. System.Single coefficientC Coefficient C from plane equation. System.Single coefficientD Coefficient D from plane equation. Remarks The constructed plane will be the normalized form of the plane specified by the given coefficients. | Improve this Doc View Source Plane(float3, Single) Constructs a plane with a normal vector and distance from the origin. Declaration public Plane(float3 normal, float distance) Parameters Type Name Description Unity.Mathematics.float3 normal A non-zero vector that is perpendicular to the plane. It may be any length. System.Single distance Distance from the origin along the normal. A negative value moves the plane in the same direction as the normal while a positive value moves it in the opposite direction. Remarks The constructed plane will be the normalized form of the plane specified by the inputs. | Improve this Doc View Source Plane(float3, float3) Constructs a plane with a normal vector and a point that lies in the plane. Declaration public Plane(float3 normal, float3 pointInPlane) Parameters Type Name Description Unity.Mathematics.float3 normal A non-zero vector that is perpendicular to the plane. It may be any length. Unity.Mathematics.float3 pointInPlane A point that lies in the plane. Remarks The constructed plane will be the normalized form of the plane specified by the inputs. | Improve this Doc View Source Plane(float3, float3, float3) Constructs a plane with two vectors and a point that all lie in the plane. Declaration public Plane(float3 vector1InPlane, float3 vector2InPlane, float3 pointInPlane) Parameters Type Name Description Unity.Mathematics.float3 vector1InPlane A non-zero vector that lies in the plane. It may be any length. Unity.Mathematics.float3 vector2InPlane A non-zero vector that lies in the plane. It may be any length and must not be a scalar multiple of vector1InPlane . Unity.Mathematics.float3 pointInPlane A point that lies in the plane. Remarks The constructed plane will be the normalized form of the plane specified by the inputs. Fields | Improve this Doc View Source NormalAndDistance A plane in the form Ax + By + Cz + Dw = 0. Declaration public float4 NormalAndDistance Field Value Type Description Unity.Mathematics.float4 Remarks Stores the plane coefficients A, B, C, D where (A, B, C) is a unit normal vector and D is the distance from the origin. A plane stored with a unit normal vector is called a normalized plane. Properties | Improve this Doc View Source Distance Get/set the distance of the plane from the origin. May be a negative value. Declaration public float Distance { get; set; } Property Value Type Description System.Single Remarks It is assumed that the normal is unit length. If you set a new plane such that Ax + By + Cz + Dw = 0 but (A, B, C) is not unit length, then you must normalize the plane by calling Normalize(Plane) . | Improve this Doc View Source Flipped Flips the plane so the normal points in the opposite direction. Declaration public Plane Flipped { get; } Property Value Type Description Plane | Improve this Doc View Source Normal Get/set the normal vector of the plane. Declaration public float3 Normal { get; set; } Property Value Type Description Unity.Mathematics.float3 Remarks It is assumed that the normal is unit length. If you set a new plane such that Ax + By + Cz + Dw = 0 but (A, B, C) is not unit length, then you must normalize the plane by calling Normalize(Plane) . Methods | Improve this Doc View Source CreateFromUnitNormalAndDistance(float3, Single) Creates a normalized Plane directly without normalization cost. Declaration public static Plane CreateFromUnitNormalAndDistance(float3 unitNormal, float distance) Parameters Type Name Description Unity.Mathematics.float3 unitNormal A non-zero vector that is perpendicular to the plane. It must be unit length. System.Single distance Distance from the origin along the normal. A negative value moves the plane in the same direction as the normal while a positive value moves it in the opposite direction. Returns Type Description Plane Normalized Plane constructed from given inputs. Remarks If you have a unit length normal vector, you can create a Plane faster than using one of its constructors by calling this function. | Improve this Doc View Source CreateFromUnitNormalAndPointInPlane(float3, float3) Creates a normalized Plane without normalization cost. Declaration public static Plane CreateFromUnitNormalAndPointInPlane(float3 unitNormal, float3 pointInPlane) Parameters Type Name Description Unity.Mathematics.float3 unitNormal A non-zero vector that is perpendicular to the plane. It must be unit length. Unity.Mathematics.float3 pointInPlane A point that lies in the plane. Returns Type Description Plane Normalized Plane constructed from given inputs. Remarks If you have a unit length normal vector, you can create a Plane faster than using one of its constructors by calling this function. | Improve this Doc View Source Normalize(Plane) Normalizes the given Plane. Declaration public static Plane Normalize(Plane plane) Parameters Type Name Description Plane plane Plane to normalize. Returns Type Description Plane Normalized Plane. | Improve this Doc View Source Normalize(float4) Normalizes the plane represented by the given plane coefficients. Declaration public static float4 Normalize(float4 planeCoefficients) Parameters Type Name Description Unity.Mathematics.float4 planeCoefficients Plane coefficients A, B, C, D stored in x, y, z, w (respectively). Returns Type Description Unity.Mathematics.float4 Normalized plane coefficients. Remarks The plane coefficients are A, B, C, D and stored in that order in the Unity.Mathematics.float4 . | Improve this Doc View Source Projection(float3) Projects the given point onto the plane. Declaration public float3 Projection(float3 point) Parameters Type Name Description Unity.Mathematics.float3 point Point to project onto the plane. Returns Type Description Unity.Mathematics.float3 Projected point that's inside the plane. Remarks Plane must be normalized prior to calling this function. The result is the position closest to the point that still lies in the plane. | Improve this Doc View Source SignedDistanceToPoint(float3) Get the signed distance from the point to the plane. Declaration public float SignedDistanceToPoint(float3 point) Parameters Type Name Description Unity.Mathematics.float3 point Point to find the signed distance with. Returns Type Description System.Single Signed distance of the point from the plane. Remarks Plane must be normalized prior to calling this function. Distance is positive if point is on side of the plane the normal points to, negative if on the opposite side and zero if the point lies in the plane. Avoid comparing equality with 0.0f when testing if a point lies exactly in the plane and use an approximate comparison instead. Operators | Improve this Doc View Source Implicit(Plane to float4) Implicitly converts a Plane to Unity.Mathematics.float4 . Declaration public static implicit operator float4(Plane plane) Parameters Type Name Description Plane plane Plane to convert. Returns Type Description Unity.Mathematics.float4 A Unity.Mathematics.float4 representing the plane."
  },
  "api/ProjectDawn.Geometry3D.Ray.html": {
    "href": "api/ProjectDawn.Geometry3D.Ray.html",
    "title": "Struct Ray",
    "keywords": "Struct Ray Parametric line that is specified by center and direction. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Geometry3D Assembly : ProjectDawn.Geometry.dll Syntax [Serializable] public struct Ray Constructors | Improve this Doc View Source Ray(float3, float3) Declaration public Ray(float3 origin, float3 direction) Parameters Type Name Description Unity.Mathematics.float3 origin Unity.Mathematics.float3 direction Fields | Improve this Doc View Source Direction Line direction vector. Declaration public float3 Direction Field Value Type Description Unity.Mathematics.float3 | Improve this Doc View Source Origin Line center point. Declaration public float3 Origin Field Value Type Description Unity.Mathematics.float3 Methods | Improve this Doc View Source GetPoint(Single) Returns point along the ray at given time. Declaration public float3 GetPoint(float t) Parameters Type Name Description System.Single t Returns Type Description Unity.Mathematics.float3 | Improve this Doc View Source Intersection(Triangle, out Single) Returns true if ray intersects triangle. Based on https://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm . Declaration public bool Intersection(Triangle triangle, out float t) Parameters Type Name Description Triangle triangle Triangle. System.Single t Intersection time. Returns Type Description System.Boolean Returns true if ray intersects triangle. | Improve this Doc View Source Intersection<T>(TriangularSurface<T>, out SurfacePointIntersection) Returns true if ray intersects surface. Declaration public bool Intersection<T>(TriangularSurface<T> surface, out SurfacePointIntersection intersection) where T : struct, ITransformFloat3 Parameters Type Name Description TriangularSurface <T> surface Surface. SurfacePointIntersection intersection Intersection data. Returns Type Description System.Boolean Returns true if ray intersects surface. Type Parameters Name Description T"
  },
  "api/ProjectDawn.Geometry3D.ShapeGizmos.html": {
    "href": "api/ProjectDawn.Geometry3D.ShapeGizmos.html",
    "title": "Class ShapeGizmos",
    "keywords": "Class ShapeGizmos Helper class for drawing shapes using gizmos. Inheritance System.Object ShapeGizmos Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ProjectDawn.Geometry3D Assembly : ProjectDawn.Geometry.dll Syntax public static class ShapeGizmos Methods | Improve this Doc View Source DrawDottedLine(Line, Single, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawDottedLine(Line line, float screenSpaceSize, Color color) Parameters Type Name Description Line line System.Single screenSpaceSize UnityEngine.Color color | Improve this Doc View Source DrawDottedLine(float3, float3, Single, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawDottedLine(float3 from, float3 to, float screenSpaceSize, Color color) Parameters Type Name Description Unity.Mathematics.float3 from Unity.Mathematics.float3 to System.Single screenSpaceSize UnityEngine.Color color | Improve this Doc View Source DrawLine(Line, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawLine(Line line, Color color) Parameters Type Name Description Line line UnityEngine.Color color | Improve this Doc View Source DrawLine(float3, float3, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawLine(float3 from, float3 to, Color color) Parameters Type Name Description Unity.Mathematics.float3 from Unity.Mathematics.float3 to UnityEngine.Color color | Improve this Doc View Source DrawSolidBox(Box, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawSolidBox(Box box, Color color) Parameters Type Name Description Box box UnityEngine.Color color | Improve this Doc View Source DrawSolidSphere(Sphere, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawSolidSphere(Sphere circle, Color color) Parameters Type Name Description Sphere circle UnityEngine.Color color | Improve this Doc View Source DrawSolidSphere(float3, Single, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawSolidSphere(float3 point, float size, Color color) Parameters Type Name Description Unity.Mathematics.float3 point System.Single size UnityEngine.Color color | Improve this Doc View Source DrawWireBox(Box, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawWireBox(Box box, Color color) Parameters Type Name Description Box box UnityEngine.Color color | Improve this Doc View Source DrawWireSphere(Sphere, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawWireSphere(Sphere sphere, Color color) Parameters Type Name Description Sphere sphere UnityEngine.Color color | Improve this Doc View Source DrawWireSphere(float3, Single, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawWireSphere(float3 point, float size, Color color) Parameters Type Name Description Unity.Mathematics.float3 point System.Single size UnityEngine.Color color"
  },
  "api/ProjectDawn.Geometry3D.ShapeUtility.html": {
    "href": "api/ProjectDawn.Geometry3D.ShapeUtility.html",
    "title": "Class ShapeUtility",
    "keywords": "Class ShapeUtility Helper class for finding intersection between 2d geometry shapes. Inheritance System.Object ShapeUtility Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ProjectDawn.Geometry3D Assembly : ProjectDawn.Geometry.dll Syntax public static class ShapeUtility Methods | Improve this Doc View Source IntersectionLineAndTriangle(Line, Triangle, out float3) Returns true if line intersects triangle. Declaration public static bool IntersectionLineAndTriangle(Line line, Triangle triangle, out float3 point) Parameters Type Name Description Line line Line. Triangle triangle Triangle. Unity.Mathematics.float3 point Intersection point. Returns Type Description System.Boolean Returns true if line intersects triangle. | Improve this Doc View Source IntersectionRayAndTriangle(Ray, Triangle, out Single) Returns true if ray intersects triangle. Based on https://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm . Declaration public static bool IntersectionRayAndTriangle(Ray ray, Triangle triangle, out float t) Parameters Type Name Description Ray ray Ray. Triangle triangle Triangle. System.Single t Intersection time. Returns Type Description System.Boolean Returns true if ray intersects triangle. | Improve this Doc View Source IntersectionRayAndTriangularSurface<T>(Ray, TriangularSurface<T>, out SurfacePointIntersection) Returns true if ray intersects surface. Declaration public static bool IntersectionRayAndTriangularSurface<T>(Ray ray, TriangularSurface<T> surface, out SurfacePointIntersection intersection) where T : struct, ITransformFloat3 Parameters Type Name Description Ray ray Ray. TriangularSurface <T> surface Surface. SurfacePointIntersection intersection Intersection data. Returns Type Description System.Boolean Returns true if ray intersects surface. Type Parameters Name Description T | Improve this Doc View Source IntersectionTriangleAndTriangle(Triangle, Triangle, out Line) Returns true if triangles intersect. Declaration public static bool IntersectionTriangleAndTriangle(Triangle a, Triangle b, out Line line) Parameters Type Name Description Triangle a First triangle. Triangle b Second triangle. Line line Intersection line. Returns Type Description System.Boolean Returns true if triangles intersect. | Improve this Doc View Source IntersectionTriangularSurfaceAndTriangularSurface<T>(TriangularSurface<T>, TriangularSurface<T>, NativeList<SurfaceLineIntersection>) Returns surfaces intersections. Declaration public static void IntersectionTriangularSurfaceAndTriangularSurface<T>(TriangularSurface<T> a, TriangularSurface<T> b, NativeList<SurfaceLineIntersection> intersections) where T : struct, ITransformFloat3 Parameters Type Name Description TriangularSurface <T> a TriangularSurface <T> b Unity.Collections.NativeList < SurfaceLineIntersection > intersections Intersection data. Type Parameters Name Description T | Improve this Doc View Source OverlapBoxAndBox(Box, Box) Returns true if shapes surfaces overlap. Declaration public static bool OverlapBoxAndBox(Box a, Box b) Parameters Type Name Description Box a Box b Returns Type Description System.Boolean | Improve this Doc View Source OverlapBoxAndPoint(Box, float3) Returns true if shapes surfaces overlap. Declaration public static bool OverlapBoxAndPoint(Box rectangle, float3 point) Parameters Type Name Description Box rectangle Unity.Mathematics.float3 point Returns Type Description System.Boolean | Improve this Doc View Source OverlapBoxAndSphere(Box, Sphere) Returns true if shapes surfaces overlap. Declaration public static bool OverlapBoxAndSphere(Box rectangle, Sphere circle) Parameters Type Name Description Box rectangle Sphere circle Returns Type Description System.Boolean | Improve this Doc View Source OverlapCapsuleAndBox(Capsule, Box) Returns true if shapes surfaces overlap. Declaration public static bool OverlapCapsuleAndBox(Capsule a, Box b) Parameters Type Name Description Capsule a Box b Returns Type Description System.Boolean | Improve this Doc View Source OverlapCapsuleAndCapsule(Capsule, Capsule) Returns true if shapes surfaces overlap. Declaration public static bool OverlapCapsuleAndCapsule(Capsule a, Capsule b) Parameters Type Name Description Capsule a Capsule b Returns Type Description System.Boolean | Improve this Doc View Source OverlapCapsuleAndLine(Capsule, Line) Returns true if shapes surfaces overlap. Declaration public static bool OverlapCapsuleAndLine(Capsule a, Line b) Parameters Type Name Description Capsule a Line b Returns Type Description System.Boolean | Improve this Doc View Source OverlapCapsuleAndPoint(Capsule, float3) Returns true if shapes surfaces overlap. Declaration public static bool OverlapCapsuleAndPoint(Capsule a, float3 b) Parameters Type Name Description Capsule a Unity.Mathematics.float3 b Returns Type Description System.Boolean | Improve this Doc View Source OverlapCapsuleAndSphere(Capsule, Sphere) Returns true if shapes surfaces overlap. Declaration public static bool OverlapCapsuleAndSphere(Capsule a, Sphere b) Parameters Type Name Description Capsule a Sphere b Returns Type Description System.Boolean | Improve this Doc View Source OverlapPlaneAndBox(Plane, Box) Returns true if shapes surfaces overlap. Declaration public static bool OverlapPlaneAndBox(Plane plane, Box box) Parameters Type Name Description Plane plane Box box Returns Type Description System.Boolean | Improve this Doc View Source OverlapSphereAndPoint(Sphere, float3) Returns true if shapes surfaces overlap. Declaration public static bool OverlapSphereAndPoint(Sphere circle, float3 point) Parameters Type Name Description Sphere circle Unity.Mathematics.float3 point Returns Type Description System.Boolean | Improve this Doc View Source OverlapSphereAndSphere(Sphere, Sphere) Returns true if shapes surfaces overlap. Declaration public static bool OverlapSphereAndSphere(Sphere a, Sphere b) Parameters Type Name Description Sphere a Sphere b Returns Type Description System.Boolean"
  },
  "api/ProjectDawn.Geometry3D.Sphere.html": {
    "href": "api/ProjectDawn.Geometry3D.Sphere.html",
    "title": "Struct Sphere",
    "keywords": "Struct Sphere A sphere is a shape consisting of all points in a plane that are at a given distance from a given point, the centre. Implements System.IEquatable < Sphere > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Geometry3D Assembly : ProjectDawn.Geometry.dll Syntax [Serializable] public struct Sphere : IEquatable<Sphere> Constructors | Improve this Doc View Source Sphere(float3, Single) Declaration public Sphere(float3 center, float radius) Parameters Type Name Description Unity.Mathematics.float3 center System.Single radius Fields | Improve this Doc View Source Center Center of the sphere. Declaration public float3 Center Field Value Type Description Unity.Mathematics.float3 | Improve this Doc View Source Radius Radius of the sphere. Declaration public float Radius Field Value Type Description System.Single Properties | Improve this Doc View Source Area Returns the area of the sphere. Declaration public float Area { get; } Property Value Type Description System.Single | Improve this Doc View Source Diameter Diameter of the sphere. Diameter = 2 * Radius. Declaration public float Diameter { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Unit Returns unit sphere. Declaration public static Sphere Unit { get; } Property Value Type Description Sphere | Improve this Doc View Source Volume Returns the volume of the sphere. Declaration public float Volume { get; } Property Value Type Description System.Single Methods | Improve this Doc View Source BoundingBox() Returns minimum rectangle that fully covers shape. Declaration public Box BoundingBox() Returns Type Description Box | Improve this Doc View Source ClosestPoint(float3) Returns a point on the perimeter of this sphere that is closest to the specified point. Declaration public float3 ClosestPoint(float3 point) Parameters Type Name Description Unity.Mathematics.float3 point Returns Type Description Unity.Mathematics.float3 | Improve this Doc View Source Equals(Sphere) Declaration public bool Equals(Sphere other) Parameters Type Name Description Sphere other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Overlap(Box) Declaration public bool Overlap(Box rectangle) Parameters Type Name Description Box rectangle Returns Type Description System.Boolean | Improve this Doc View Source Overlap(Capsule) Declaration public bool Overlap(Capsule capsule) Parameters Type Name Description Capsule capsule Returns Type Description System.Boolean | Improve this Doc View Source Overlap(Sphere) Declaration public bool Overlap(Sphere sphere) Parameters Type Name Description Sphere sphere Returns Type Description System.Boolean | Improve this Doc View Source Overlap(float3) Returns true if shapes surfaces overlap. Declaration public bool Overlap(float3 pointb) Parameters Type Name Description Unity.Mathematics.float3 pointb Returns Type Description System.Boolean | Improve this Doc View Source Union(Sphere, Sphere) Returns minimum bounding sphere that contains both spheres. Declaration public static Sphere Union(Sphere a, Sphere b) Parameters Type Name Description Sphere a Sphere b Returns Type Description Sphere Operators | Improve this Doc View Source Equality(Sphere, Sphere) Declaration public static bool operator ==(Sphere lhs, Sphere rhs) Parameters Type Name Description Sphere lhs Sphere rhs Returns Type Description System.Boolean | Improve this Doc View Source Inequality(Sphere, Sphere) Declaration public static bool operator !=(Sphere lhs, Sphere rhs) Parameters Type Name Description Sphere lhs Sphere rhs Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "api/ProjectDawn.Geometry3D.SurfaceLineIntersection.html": {
    "href": "api/ProjectDawn.Geometry3D.SurfaceLineIntersection.html",
    "title": "Struct SurfaceLineIntersection",
    "keywords": "Struct SurfaceLineIntersection Intersection line of the surface. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Geometry3D Assembly : ProjectDawn.Geometry.dll Syntax public struct SurfaceLineIntersection Fields | Improve this Doc View Source Line Intersection line. Declaration public Line Line Field Value Type Description Line | Improve this Doc View Source TriangleIndexA The index of the triangle that was hit. Declaration public int TriangleIndexA Field Value Type Description System.Int32 | Improve this Doc View Source TriangleIndexB The index of the triangle that was hit. Declaration public int TriangleIndexB Field Value Type Description System.Int32"
  },
  "api/ProjectDawn.Geometry3D.SurfacePointIntersection.html": {
    "href": "api/ProjectDawn.Geometry3D.SurfacePointIntersection.html",
    "title": "Struct SurfacePointIntersection",
    "keywords": "Struct SurfacePointIntersection Intersection point of the surface. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Geometry3D Assembly : ProjectDawn.Geometry.dll Syntax public struct SurfacePointIntersection Fields | Improve this Doc View Source Time The time at which ray hits the surface. Declaration public float Time Field Value Type Description System.Single | Improve this Doc View Source TriangleIndex The index of the triangle that was hit. Declaration public int TriangleIndex Field Value Type Description System.Int32 Methods | Improve this Doc View Source GetBarycentric<T>(Ray, TriangularSurface<T>) Returns the barycentric coordinate of the triangle we hit. Declaration public float3 GetBarycentric<T>(Ray ray, TriangularSurface<T> surface) where T : struct, ITransformFloat3 Parameters Type Name Description Ray ray TriangularSurface <T> surface Returns Type Description Unity.Mathematics.float3 Type Parameters Name Description T | Improve this Doc View Source GetDistance(Ray) The distance from the ray's origin to the impact point. Declaration public float GetDistance(Ray ray) Parameters Type Name Description Ray ray Returns Type Description System.Single | Improve this Doc View Source GetNormal<T>(TriangularSurface<T>) Returns the normal of the surface the ray hit. Declaration public float3 GetNormal<T>(TriangularSurface<T> surface) where T : struct, ITransformFloat3 Parameters Type Name Description TriangularSurface <T> surface Returns Type Description Unity.Mathematics.float3 Type Parameters Name Description T | Improve this Doc View Source GetPoint(Ray) Returns intersection point. Declaration public float3 GetPoint(Ray ray) Parameters Type Name Description Ray ray Returns Type Description Unity.Mathematics.float3"
  },
  "api/ProjectDawn.Geometry3D.Triangle.html": {
    "href": "api/ProjectDawn.Geometry3D.Triangle.html",
    "title": "Struct Triangle",
    "keywords": "Struct Triangle A triangle is a polygon with three edges and three vertices. It is one of the basic shapes in geometry. A triangle with vertices A, B, and C is denoted. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Geometry3D Assembly : ProjectDawn.Geometry.dll Syntax [Serializable] public struct Triangle Constructors | Improve this Doc View Source Triangle(float3, float3, float3) Declaration public Triangle(float3 a, float3 b, float3 c) Parameters Type Name Description Unity.Mathematics.float3 a Unity.Mathematics.float3 b Unity.Mathematics.float3 c Fields | Improve this Doc View Source VertexA Declaration public float3 VertexA Field Value Type Description Unity.Mathematics.float3 | Improve this Doc View Source VertexB Declaration public float3 VertexB Field Value Type Description Unity.Mathematics.float3 | Improve this Doc View Source VertexC Declaration public float3 VertexC Field Value Type Description Unity.Mathematics.float3 Properties | Improve this Doc View Source Area Returns the area of the triangle. Declaration public float Area { get; } Property Value Type Description System.Single | Improve this Doc View Source Center Returns center of triangle. Declaration public float3 Center { get; } Property Value Type Description Unity.Mathematics.float3 | Improve this Doc View Source Normal Returns normal of triangle. Normal direction depends from triangle clockwise order. Declaration public float3 Normal { get; } Property Value Type Description Unity.Mathematics.float3 | Improve this Doc View Source Perimeter Returns the perimeter of the triangle. Declaration public float Perimeter { get; } Property Value Type Description System.Single Methods | Improve this Doc View Source BarycentricCoordinates(float3) Returns point barycentric coordinates. Declaration public float3 BarycentricCoordinates(float3 point) Parameters Type Name Description Unity.Mathematics.float3 point Point coverted to barycentric. Returns Type Description Unity.Mathematics.float3 | Improve this Doc View Source BoundingBox() Returns minimum rectangle that fully covers shape. Declaration public Box BoundingBox() Returns Type Description Box | Improve this Doc View Source GetLines(out Line, out Line, out Line) Returns triangle lines. Declaration public void GetLines(out Line a, out Line b, out Line c) Parameters Type Name Description Line a Line b Line c | Improve this Doc View Source Intersection(Triangle, out Line) Returns true if triangles intersect. Declaration public bool Intersection(Triangle triangle, out Line line) Parameters Type Name Description Triangle triangle Triangle. Line line Intersection line. Returns Type Description System.Boolean Returns true if triangles intersect. | Improve this Doc View Source IsClockwise() Returns if triangle vertices are clockwise ordered. Declaration public bool IsClockwise() Returns Type Description System.Boolean | Improve this Doc View Source IsCounterClockwise() Returns if triangle vertices are counter clockwise ordered. Declaration public bool IsCounterClockwise() Returns Type Description System.Boolean | Improve this Doc View Source IsValid() Returns true if triangle is valid. Declaration public bool IsValid() Returns Type Description System.Boolean Returns true if triangle is valid."
  },
  "api/ProjectDawn.Geometry3D.TriangularSurface-1.html": {
    "href": "api/ProjectDawn.Geometry3D.TriangularSurface-1.html",
    "title": "Struct TriangularSurface<T>",
    "keywords": "Struct TriangularSurface<T> Implements System.IDisposable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Geometry3D Assembly : ProjectDawn.Geometry.dll Syntax public struct TriangularSurface<T> : IDisposable where T : struct, ITransformFloat3 Type Parameters Name Description T Constructors | Improve this Doc View Source TriangularSurface(Allocator, T) Declaration public TriangularSurface(Allocator allocator, T transform = default(T)) Parameters Type Name Description Unity.Collections.Allocator allocator T transform Fields | Improve this Doc View Source Indices Surfaces triangles. Declaration public NativeList<int3> Indices Field Value Type Description Unity.Collections.NativeList < Unity.Mathematics.int3 > | Improve this Doc View Source Transform Surface transformer. Declaration public T Transform Field Value Type Description T | Improve this Doc View Source Vertices Surface vertices. Declaration public NativeList<float3> Vertices Field Value Type Description Unity.Collections.NativeList < Unity.Mathematics.float3 > Properties | Improve this Doc View Source IsCreated Returns if the surface is allocated. Declaration public bool IsCreated { get; } Property Value Type Description System.Boolean | Improve this Doc View Source NumTriangles Returns the number of triangles. Declaration public int NumTriangles { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source GetTriangle(Int32) Returns world space triangle at index. Declaration public Triangle GetTriangle(int triangleIndex) Parameters Type Name Description System.Int32 triangleIndex Index of triangle Returns Type Description Triangle Returns world space triangle at index. | Improve this Doc View Source Intersection(TriangularSurface<T>, NativeList<SurfaceLineIntersection>) Returns surfaces intersections. Declaration public void Intersection(TriangularSurface<T> surface, NativeList<SurfaceLineIntersection> intersections) Parameters Type Name Description TriangularSurface <T> surface Surface. Unity.Collections.NativeList < SurfaceLineIntersection > intersections Intersection data. Implements System.IDisposable Extension Methods MeshExtensions.ToMesh<T>(TriangularSurface<T>)"
  },
  "api/ProjectDawn.Geometry3D.VertexAttributes.html": {
    "href": "api/ProjectDawn.Geometry3D.VertexAttributes.html",
    "title": "Enum VertexAttributes",
    "keywords": "Enum VertexAttributes Vertex attributes enum flags. Same as UnityEngine.Rendering.VertexAttribute just as flags. Namespace : ProjectDawn.Geometry3D Assembly : ProjectDawn.Geometry.dll Syntax [Flags] public enum VertexAttributes Fields Name Description BlendIndices BlendWeight Color None Normal Position Tangent TexCoord0 TexCoord1 TexCoord2 TexCoord3 TexCoord4 TexCoord5 TexCoord6 TexCoord7 Extension Methods VertexAttributeUtility.ContainsFlag(VertexAttributes)"
  },
  "api/ProjectDawn.Geometry3D.VertexAttributeUtility.html": {
    "href": "api/ProjectDawn.Geometry3D.VertexAttributeUtility.html",
    "title": "Class VertexAttributeUtility",
    "keywords": "Class VertexAttributeUtility Vertex attribute utility functions. Inheritance System.Object VertexAttributeUtility Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ProjectDawn.Geometry3D Assembly : ProjectDawn.Geometry.dll Syntax public static class VertexAttributeUtility Methods | Improve this Doc View Source ContainsFlag(VertexAttributes, VertexAttributes) Returns true if contains flag. Declaration public static bool ContainsFlag(this VertexAttributes flags, VertexAttributes flag) Parameters Type Name Description VertexAttributes flags VertexAttributes flag Returns Type Description System.Boolean | Improve this Doc View Source SizeOf(VertexAttributeFormat) Returns size in bytes of vertex attribute format. Declaration public static int SizeOf(this VertexAttributeFormat attribute) Parameters Type Name Description UnityEngine.Rendering.VertexAttributeFormat attribute Returns Type Description System.Int32 | Improve this Doc View Source ToFlag(VertexAttribute) Converts vertex attribute to flag. Declaration public static VertexAttributes ToFlag(this VertexAttribute attribute) Parameters Type Name Description UnityEngine.Rendering.VertexAttribute attribute Returns Type Description VertexAttributes"
  },
  "api/ProjectDawn.Geometry3D.VertexData.html": {
    "href": "api/ProjectDawn.Geometry3D.VertexData.html",
    "title": "Struct VertexData",
    "keywords": "Struct VertexData An managed, resizable vertex data. Stores generic vertex information in interleaved array. As example if structure is created with Position+Normal attributes as result data will be stored in memory as follows: position0/normal0/position1/normal1... Implements Unity.Collections.INativeDisposable System.IDisposable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ProjectDawn.Geometry3D Assembly : ProjectDawn.Geometry.dll Syntax [NativeContainer] public struct VertexData : INativeDisposable, IDisposable Constructors | Improve this Doc View Source VertexData(Int32, NativeArray<VertexAttributeDescriptor>, Allocator) Declaration public VertexData(int initialCapacity, NativeArray<VertexAttributeDescriptor> attributes, Allocator allocator) Parameters Type Name Description System.Int32 initialCapacity Unity.Collections.NativeArray < UnityEngine.Rendering.VertexAttributeDescriptor > attributes Unity.Collections.Allocator allocator Properties | Improve this Doc View Source Capacity The number of elements that fit in the current allocation. Declaration public int Capacity { get; set; } Property Value Type Description System.Int32 The number of elements that fit in the current allocation. Exceptions Type Condition System.ArgumentOutOfRangeException Thrown if the new capacity is smaller than the length. | Improve this Doc View Source Flags Vertex attribute flags used for creating this vertex data. Declaration public VertexAttributes Flags { get; } Property Value Type Description VertexAttributes | Improve this Doc View Source IsCreated Whether this the vertex data has been allocated (and not yet deallocated). Declaration public bool IsCreated { get; } Property Value Type Description System.Boolean True if this the vertex data has been allocated (and not yet deallocated). | Improve this Doc View Source IsEmpty Whether the vertex data is empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean True if the list is empty or the list has not been constructed. | Improve this Doc View Source Length The count of elements. Declaration public int Length { get; set; } Property Value Type Description System.Int32 The current count of elements. Always less than or equal to the capacity. Remarks To decrease the memory used by a list, set Capacity after reducing the length of the list. | Improve this Doc View Source Size Size of the single vertex. It is a sum of all attributes size. Declaration public int Size { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source AsArray<T>() Returns a native array that aliases the array at the index. Declaration public NativeArray<T> AsArray<T>() where T : struct Returns Type Description Unity.Collections.NativeArray <T> A native array that aliases the content of this list. Type Parameters Name Description T | Improve this Doc View Source Clear() Clears the container. Declaration public void Clear() Remarks VertexData Capacity remains unchanged. | Improve this Doc View Source Dispose() Releases all resources (memory and safety handles). Declaration public void Dispose() | Improve this Doc View Source Dispose(JobHandle) Creates and schedules a job that releases all resources (memory and safety handles) of this vertex data. Declaration public JobHandle Dispose(JobHandle inputDeps) Parameters Type Name Description Unity.Jobs.JobHandle inputDeps The dependency for the new job. Returns Type Description Unity.Jobs.JobHandle The handle of the new job. The job depends upon inputDeps and releases all resources (memory and safety handles) of this vertex data. | Improve this Doc View Source ElementAt<T>(Int32) Returns a reference to the element at an index. Declaration public T ElementAt<T>(int index) where T : struct Parameters Type Name Description System.Int32 index An index. Returns Type Description T A reference to the element at the index. Type Parameters Name Description T Exceptions Type Condition System.IndexOutOfRangeException Thrown if index is out of bounds. | Improve this Doc View Source GetUnsafeVertexData() Returns the internal unsafe vertex data. Declaration public UnsafeVertexData*GetUnsafeVertexData() Returns Type Description UnsafeVertexData * The internal unsafe vertex data. Remarks Internally, the elements of a VertexData are stored in an UnsafeVertexData. | Improve this Doc View Source GetVertexAt(Int32) Returns vertex position at index. Declaration public float3 GetVertexAt(int index) Parameters Type Name Description System.Int32 index An index. Returns Type Description Unity.Mathematics.float3 Returns vertex position at index. | Improve this Doc View Source GetVertexAttributes() Returns a native array of attributes used to create this vertex data structure. Declaration public NativeArray<VertexAttributeDescriptor> GetVertexAttributes() Returns Type Description Unity.Collections.NativeArray < UnityEngine.Rendering.VertexAttributeDescriptor > Returns a native array of attributes used to create this vertex data structure. | Improve this Doc View Source Resize(Int32, NativeArrayOptions) Sets the length of this vertex data, increasing the capacity if necessary. Declaration public void Resize(int length, NativeArrayOptions options) Parameters Type Name Description System.Int32 length The new length of this vertex data. Unity.Collections.NativeArrayOptions options Whether to clear any newly allocated bytes to all zeroes. | Improve this Doc View Source ResizeUninitialized(Int32) Sets the length of this list, increasing the capacity if necessary. Declaration public void ResizeUninitialized(int length) Parameters Type Name Description System.Int32 length The new length of this list. Remarks Does not clear newly allocated bytes. | Improve this Doc View Source SetCapacity(Int32) Sets the capacity. Declaration public void SetCapacity(int capacity) Parameters Type Name Description System.Int32 capacity The new capacity. Implements Unity.Collections.INativeDisposable System.IDisposable"
  },
  "api/ProjectDawn.Mathematics.fastmath.html": {
    "href": "api/ProjectDawn.Mathematics.fastmath.html",
    "title": "Class fastmath",
    "keywords": "Class fastmath A static class to contain various fast math functions that has lower precision. Inheritance System.Object fastmath Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ProjectDawn.Mathematics Assembly : ProjectDawn.Mathematics.dll Syntax public static class fastmath Methods | Improve this Doc View Source cos(Single) Returns cosine of value. Based on Maclaurin Series 4 iterations https://blogs.ubc.ca/infiniteseriesmodule/units/unit-3-power-series/taylor-series/the-maclaurin-expansion-of-cosx/ . Declaration public static float cos(float x) Parameters Type Name Description System.Single x Returns Type Description System.Single | Improve this Doc View Source rsqrt(Single) Returns 1/sqrt(value). Based on https://en.wikipedia.org/wiki/Fast_inverse_square_root . Declaration public static float rsqrt(float value) Parameters Type Name Description System.Single value Returns Type Description System.Single | Improve this Doc View Source sin(Single) Returns cosine of value. Based on Maclaurin Series 4 iterations https://blogs.ubc.ca/infiniteseriesmodule/units/unit-3-power-series/taylor-series/the-maclaurin-expansion-of-cosx/ . Declaration public static float sin(float x) Parameters Type Name Description System.Single x Returns Type Description System.Single"
  },
  "api/ProjectDawn.Mathematics.html": {
    "href": "api/ProjectDawn.Mathematics.html",
    "title": "Namespace ProjectDawn.Mathematics",
    "keywords": "Namespace ProjectDawn.Mathematics Classes fastmath A static class to contain various fast math functions that has lower precision. math2 A static class to contain various math functions."
  },
  "api/ProjectDawn.Mathematics.math2.html": {
    "href": "api/ProjectDawn.Mathematics.math2.html",
    "title": "Class math2",
    "keywords": "Class math2 A static class to contain various math functions. Inheritance System.Object math2 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ProjectDawn.Mathematics Assembly : ProjectDawn.Mathematics.dll Syntax public static class math2 Fields | Improve this Doc View Source PI2 PI multiplied by two. Declaration public const float PI2 = 6.28318548F Field Value Type Description System.Single | Improve this Doc View Source PI2_D PI multiplied by two. Declaration public const double PI2_D = 6.2831853071795862 Field Value Type Description System.Double Methods | Improve this Doc View Source angle(float2) Returns angle of direction vector. Declaration public static float angle(float2 direction) Parameters Type Name Description Unity.Mathematics.float2 direction Direction vector used for finding angle. Returns Type Description System.Single Returns angle of direction vector. | Improve this Doc View Source angle(float2, float2) Returns minimum angle between two direction vectors. Declaration public static float angle(float2 a, float2 b) Parameters Type Name Description Unity.Mathematics.float2 a Direction vector used for finding angle. Unity.Mathematics.float2 b Direction vector used for finding angle. Returns Type Description System.Single Returns minimum angle between two direction vectors. | Improve this Doc View Source asfloat(Vector2) Declaration public static float2 asfloat(this Vector2 value) Parameters Type Name Description UnityEngine.Vector2 value Returns Type Description Unity.Mathematics.float2 | Improve this Doc View Source asfloat(Vector3) Declaration public static float3 asfloat(this Vector3 value) Parameters Type Name Description UnityEngine.Vector3 value Returns Type Description Unity.Mathematics.float3 | Improve this Doc View Source asfloat(Vector4) Declaration public static float4 asfloat(this Vector4 value) Parameters Type Name Description UnityEngine.Vector4 value Returns Type Description Unity.Mathematics.float4 | Improve this Doc View Source asfloat3(float2) Declaration public static float3 asfloat3(this float2 value) Parameters Type Name Description Unity.Mathematics.float2 value Returns Type Description Unity.Mathematics.float3 | Improve this Doc View Source asfloat4(float2) Declaration public static float4 asfloat4(this float2 value) Parameters Type Name Description Unity.Mathematics.float2 value Returns Type Description Unity.Mathematics.float4 | Improve this Doc View Source asfloat4(float3) Declaration public static float4 asfloat4(this float3 value) Parameters Type Name Description Unity.Mathematics.float3 value Returns Type Description Unity.Mathematics.float4 | Improve this Doc View Source asvector3(float2) Declaration public static Vector3 asvector3(this float2 value) Parameters Type Name Description Unity.Mathematics.float2 value Returns Type Description UnityEngine.Vector3 | Improve this Doc View Source asvector4(float2) Declaration public static Vector4 asvector4(this float2 value) Parameters Type Name Description Unity.Mathematics.float2 value Returns Type Description UnityEngine.Vector4 | Improve this Doc View Source asvector4(float3) Declaration public static Vector4 asvector4(this float3 value) Parameters Type Name Description Unity.Mathematics.float3 value Returns Type Description UnityEngine.Vector4 | Improve this Doc View Source barycentric(float2, float2, float2, float2) Returns barycentric coordinates of triangle point. Based on Christer Ericson's Real-Time Collision Detection. Declaration public static float3 barycentric(float2 a, float2 b, float2 c, float2 p) Parameters Type Name Description Unity.Mathematics.float2 a Triangle point. Unity.Mathematics.float2 b Triangle point. Unity.Mathematics.float2 c Triangle point. Unity.Mathematics.float2 p Point inside the triangle Returns Type Description Unity.Mathematics.float3 Returns barycentric coordinates of triangle point. | Improve this Doc View Source barycentric(float3, float3, float3, float3) Returns barycentric coordinates of triangle point. Based on Christer Ericson's Real-Time Collision Detection. Declaration public static float3 barycentric(float3 a, float3 b, float3 c, float3 p) Parameters Type Name Description Unity.Mathematics.float3 a Triangle point. Unity.Mathematics.float3 b Triangle point. Unity.Mathematics.float3 c Triangle point. Unity.Mathematics.float3 p Point inside the triangle Returns Type Description Unity.Mathematics.float3 Returns barycentric coordinates of triangle point. | Improve this Doc View Source bazier(float2, float2, Single) Returns sampled linear bazier curve at t. Based on https://en.wikipedia.org/wiki/B%C3%A9zier_curve . Declaration public static float2 bazier(float2 a, float2 b, float t) Parameters Type Name Description Unity.Mathematics.float2 a Unity.Mathematics.float2 b System.Single t Returns Type Description Unity.Mathematics.float2 | Improve this Doc View Source bazier(float2, float2, float2, Single) Returns sampled quadratic bazier curve at t. Based on https://en.wikipedia.org/wiki/B%C3%A9zier_curve . Declaration public static float2 bazier(float2 a, float2 b, float2 c, float t) Parameters Type Name Description Unity.Mathematics.float2 a Unity.Mathematics.float2 b Unity.Mathematics.float2 c System.Single t Returns Type Description Unity.Mathematics.float2 | Improve this Doc View Source bazier(float2, float2, float2, float2, Single) Returns sampled cubic bazier curve at t. Based on https://en.wikipedia.org/wiki/B%C3%A9zier_curve . Declaration public static float2 bazier(float2 a, float2 b, float2 c, float2 d, float t) Parameters Type Name Description Unity.Mathematics.float2 a Unity.Mathematics.float2 b Unity.Mathematics.float2 c Unity.Mathematics.float2 d System.Single t Returns Type Description Unity.Mathematics.float2 | Improve this Doc View Source blend(float2, float2, float2, float3) Returns blended point between triangle points using barycentric coordinates. It is basically lerp for three points. Declaration public static float2 blend(float2 a, float2 b, float2 c, float3 barycentric) Parameters Type Name Description Unity.Mathematics.float2 a Triangle point. Unity.Mathematics.float2 b Triangle point. Unity.Mathematics.float2 c Triangle point. Unity.Mathematics.float3 barycentric Barycentric coordinates of triangle point. Returns Type Description Unity.Mathematics.float2 Returns blended point between triangle points using barycentric coordinates. | Improve this Doc View Source blend(float3, float3, float3, float3) Returns blended point between triangle points using barycentric coordinates. It is basically lerp for three points. Declaration public static float3 blend(float3 a, float3 b, float3 c, float3 barycentric) Parameters Type Name Description Unity.Mathematics.float3 a Triangle point. Unity.Mathematics.float3 b Triangle point. Unity.Mathematics.float3 c Triangle point. Unity.Mathematics.float3 barycentric Barycentric coordinates of triangle point. Returns Type Description Unity.Mathematics.float3 Returns blended point between triangle points using barycentric coordinates. | Improve this Doc View Source cross(float2, float2) Returns cross product of two vectors. Declaration public static float2 cross(float2 a, float2 b) Parameters Type Name Description Unity.Mathematics.float2 a Unity.Mathematics.float2 b Returns Type Description Unity.Mathematics.float2 | Improve this Doc View Source determinant(double2, double2) Returns determinant of two vectors. Sum of cross product elements. Declaration public static double determinant(double2 a, double2 b) Parameters Type Name Description Unity.Mathematics.double2 a Unity.Mathematics.double2 b Returns Type Description System.Double | Improve this Doc View Source determinant(double3, double3) Returns determinant of two vectors. Sum of cross product elements. Declaration public static double determinant(double3 a, double3 b) Parameters Type Name Description Unity.Mathematics.double3 a Unity.Mathematics.double3 b Returns Type Description System.Double | Improve this Doc View Source determinant(float2, float2) Returns determinant of two vectors. Sum of cross product elements. Declaration public static float determinant(float2 a, float2 b) Parameters Type Name Description Unity.Mathematics.float2 a Unity.Mathematics.float2 b Returns Type Description System.Single | Improve this Doc View Source determinant(float3, float3) Returns determinant of two vectors. Sum of cross product elements. Declaration public static float determinant(float3 a, float3 b) Parameters Type Name Description Unity.Mathematics.float3 a Unity.Mathematics.float3 b Returns Type Description System.Single | Improve this Doc View Source direction(Single) Returns direction from the angle. Declaration public static float2 direction(float angle) Parameters Type Name Description System.Single angle Angle in radians used to construct direction. Returns Type Description Unity.Mathematics.float2 Returns direction from the angle. | Improve this Doc View Source even(Int32) Declaration public static bool even(this int value) Parameters Type Name Description System.Int32 value Returns Type Description System.Boolean | Improve this Doc View Source even(Single) Declaration public static bool even(this float value) Parameters Type Name Description System.Single value Returns Type Description System.Boolean | Improve this Doc View Source even(float2) Declaration public static bool2 even(this float2 value) Parameters Type Name Description Unity.Mathematics.float2 value Returns Type Description Unity.Mathematics.bool2 | Improve this Doc View Source even(float3) Declaration public static bool3 even(this float3 value) Parameters Type Name Description Unity.Mathematics.float3 value Returns Type Description Unity.Mathematics.bool3 | Improve this Doc View Source even(float4) Declaration public static bool4 even(this float4 value) Parameters Type Name Description Unity.Mathematics.float4 value Returns Type Description Unity.Mathematics.bool4 | Improve this Doc View Source even(int2) Declaration public static bool2 even(this int2 value) Parameters Type Name Description Unity.Mathematics.int2 value Returns Type Description Unity.Mathematics.bool2 | Improve this Doc View Source even(int3) Declaration public static bool3 even(this int3 value) Parameters Type Name Description Unity.Mathematics.int3 value Returns Type Description Unity.Mathematics.bool3 | Improve this Doc View Source even(int4) Declaration public static bool4 even(this int4 value) Parameters Type Name Description Unity.Mathematics.int4 value Returns Type Description Unity.Mathematics.bool4 | Improve this Doc View Source factorial(Int32) Returns factorial of the value (etc 0! = 1, 1! = 1, 2! = 2, 3! = 6, 4! = 24 ...) Based on https://en.wikipedia.org/wiki/Factorial . Declaration public static int factorial(int value) Parameters Type Name Description System.Int32 value Returns Type Description System.Int32 | Improve this Doc View Source hyperbola(Single, Single) Returns solved hyperbola equation a/x = y for y. Declaration public static float hyperbola(float a, float x) Parameters Type Name Description System.Single a System.Single x Returns Type Description System.Single | Improve this Doc View Source invlerp(Single, Single, Single) Inverse lerp returns a fraction, based on a value between start and end values. As example InvLerp(0.5, 1, 0.75) will result in 0.5, because it is middle of range 0.5 and 1. This is quite useful function if you want linear falloff that has start and end values. Declaration public static float invlerp(float start, float end, float value) Parameters Type Name Description System.Single start The start value. System.Single end The end value. System.Single value The value between start and end. Returns Type Description System.Single | Improve this Doc View Source invlerp(float2, float2, float2) Inverse lerp returns a fraction, based on a value between start and end values. As example InvLerp(0.5, 1, 0.75) will result in 0.5, because it is middle of range 0.5 and 1. This is quite useful function if you want linear falloff that has start and end values. Declaration public static float2 invlerp(float2 start, float2 end, float2 value) Parameters Type Name Description Unity.Mathematics.float2 start The start value. Unity.Mathematics.float2 end The end value. Unity.Mathematics.float2 value The value between start and end. Returns Type Description Unity.Mathematics.float2 | Improve this Doc View Source invlerp(float3, float3, float3) Inverse lerp returns a fraction, based on a value between start and end values. As example InvLerp(0.5, 1, 0.75) will result in 0.5, because it is middle of range 0.5 and 1. This is quite useful function if you want linear falloff that has start and end values. Declaration public static float3 invlerp(float3 start, float3 end, float3 value) Parameters Type Name Description Unity.Mathematics.float3 start The start value. Unity.Mathematics.float3 end The end value. Unity.Mathematics.float3 value The value between start and end. Returns Type Description Unity.Mathematics.float3 | Improve this Doc View Source isbarycentric(float3) Returns true if value is barycentric coordinates. Declaration public static bool isbarycentric(float3 value) Parameters Type Name Description Unity.Mathematics.float3 value Value used for finding if its barycentric coordinates. Returns Type Description System.Boolean Returns true if value is barycentric coordinates. | Improve this Doc View Source iscclockwise(float2, float2, float2) Returns true if points ordered counter clockwise. Declaration public static bool iscclockwise(float2 a, float2 b, float2 c) Parameters Type Name Description Unity.Mathematics.float2 a Unity.Mathematics.float2 b Unity.Mathematics.float2 c Returns Type Description System.Boolean | Improve this Doc View Source iscclockwise(float3, float3, float3) Returns true if points ordered counter clockwise. Declaration public static bool iscclockwise(float3 a, float3 b, float3 c) Parameters Type Name Description Unity.Mathematics.float3 a Unity.Mathematics.float3 b Unity.Mathematics.float3 c Returns Type Description System.Boolean | Improve this Doc View Source isclockwise(float2, float2, float2) Returns true if points ordered clockwise. Declaration public static bool isclockwise(float2 a, float2 b, float2 c) Parameters Type Name Description Unity.Mathematics.float2 a Unity.Mathematics.float2 b Unity.Mathematics.float2 c Returns Type Description System.Boolean | Improve this Doc View Source isclockwise(float3, float3, float3) Returns true if points ordered clockwise. Declaration public static bool isclockwise(float3 a, float3 b, float3 c) Parameters Type Name Description Unity.Mathematics.float3 a Unity.Mathematics.float3 b Unity.Mathematics.float3 c Returns Type Description System.Boolean | Improve this Doc View Source iscollinear(float2, float2) Returns perpendicular from left side to direction. Declaration public static bool iscollinear(float2 a, float2 b) Parameters Type Name Description Unity.Mathematics.float2 a Unity.Mathematics.float2 b Returns Type Description System.Boolean | Improve this Doc View Source iscollinear(float3, float3) Returns perpendicular from left side to direction. Declaration public static bool iscollinear(float3 a, float3 b) Parameters Type Name Description Unity.Mathematics.float3 a Unity.Mathematics.float3 b Returns Type Description System.Boolean | Improve this Doc View Source isdelaunay(float2, float2, float2, float2) Returns if quad meets the Delaunay condition. Where a, b, c forms clockwise sorted triangle. Based on https://en.wikipedia.org/wiki/Delaunay_triangulation . Declaration public static bool isdelaunay(float2 a, float2 b, float2 c, float2 d) Parameters Type Name Description Unity.Mathematics.float2 a Unity.Mathematics.float2 b Unity.Mathematics.float2 c Unity.Mathematics.float2 d Returns Type Description System.Boolean | Improve this Doc View Source istriangle(Single, Single, Single) Returns true if valid triangle exists knowing three edge lengths. Declaration public static bool istriangle(float a, float b, float c) Parameters Type Name Description System.Single a System.Single b System.Single c Returns Type Description System.Boolean | Improve this Doc View Source line(Single, Single, Single, Single) Returns solved standard/linear line equation ax + by = c for y. Declaration public static float line(float a, float b, float c, float x) Parameters Type Name Description System.Single a System.Single b System.Single c System.Single x Returns Type Description System.Single | Improve this Doc View Source odd(Int32) Declaration public static bool odd(this int value) Parameters Type Name Description System.Int32 value Returns Type Description System.Boolean | Improve this Doc View Source odd(Single) Declaration public static bool odd(this float value) Parameters Type Name Description System.Single value Returns Type Description System.Boolean | Improve this Doc View Source odd(float2) Declaration public static bool2 odd(this float2 value) Parameters Type Name Description Unity.Mathematics.float2 value Returns Type Description Unity.Mathematics.bool2 | Improve this Doc View Source odd(float3) Declaration public static bool3 odd(this float3 value) Parameters Type Name Description Unity.Mathematics.float3 value Returns Type Description Unity.Mathematics.bool3 | Improve this Doc View Source odd(float4) Declaration public static bool4 odd(this float4 value) Parameters Type Name Description Unity.Mathematics.float4 value Returns Type Description Unity.Mathematics.bool4 | Improve this Doc View Source odd(int2) Declaration public static bool2 odd(this int2 value) Parameters Type Name Description Unity.Mathematics.int2 value Returns Type Description Unity.Mathematics.bool2 | Improve this Doc View Source odd(int3) Declaration public static bool3 odd(this int3 value) Parameters Type Name Description Unity.Mathematics.int3 value Returns Type Description Unity.Mathematics.bool3 | Improve this Doc View Source odd(int4) Declaration public static bool4 odd(this int4 value) Parameters Type Name Description Unity.Mathematics.int4 value Returns Type Description Unity.Mathematics.bool4 | Improve this Doc View Source parabola(Single, Single) Returns solved hyperbola equation ax^2 = y for y. Declaration public static float parabola(float a, float x) Parameters Type Name Description System.Single a System.Single x Returns Type Description System.Single | Improve this Doc View Source parabola(Single, Single, Single, Single) Returns solved hyperbola equation ax^2 + bx + c = y for y. Declaration public static float parabola(float a, float b, float c, float x) Parameters Type Name Description System.Single a System.Single b System.Single c System.Single x Returns Type Description System.Single | Improve this Doc View Source perpendicularleft(double2) Returns perpendicular from left side to direction. Declaration public static double2 perpendicularleft(double2 direction) Parameters Type Name Description Unity.Mathematics.double2 direction Returns Type Description Unity.Mathematics.double2 | Improve this Doc View Source perpendicularleft(float2) Returns perpendicular from left side to direction. Declaration public static float2 perpendicularleft(float2 direction) Parameters Type Name Description Unity.Mathematics.float2 direction Returns Type Description Unity.Mathematics.float2 | Improve this Doc View Source perpendicularright(double2) Returns perpendicular from right side to direction. Declaration public static double2 perpendicularright(double2 direction) Parameters Type Name Description Unity.Mathematics.double2 direction Returns Type Description Unity.Mathematics.double2 | Improve this Doc View Source perpendicularright(float2) Returns perpendicular from right side to direction. Declaration public static float2 perpendicularright(float2 direction) Parameters Type Name Description Unity.Mathematics.float2 direction Returns Type Description Unity.Mathematics.float2 | Improve this Doc View Source rotate(float2, Single) Returns point that is rotated by the angle. Declaration public static float2 rotate(float2 value, float angle) Parameters Type Name Description Unity.Mathematics.float2 value Point to rotate. System.Single angle Rotation angle in radians. Returns Type Description Unity.Mathematics.float2 Returns point that is rotated by the angle. | Improve this Doc View Source sangle(float2, float2) Returns minimum angle needed to rotate from direction a to direction b. Declaration public static float sangle(float2 a, float2 b) Parameters Type Name Description Unity.Mathematics.float2 a Direction vector used for finding angle. Unity.Mathematics.float2 b Direction vector used for finding angle. Returns Type Description System.Single Returns minimum angle needed to rotate from direction a to direction b. | Improve this Doc View Source sort(float2) Declaration public static float2 sort(float2 value) Parameters Type Name Description Unity.Mathematics.float2 value Returns Type Description Unity.Mathematics.float2 | Improve this Doc View Source sort(float3) Declaration public static float3 sort(float3 value) Parameters Type Name Description Unity.Mathematics.float3 value Returns Type Description Unity.Mathematics.float3 | Improve this Doc View Source sort(float4) Declaration public static float4 sort(float4 value) Parameters Type Name Description Unity.Mathematics.float4 value Returns Type Description Unity.Mathematics.float4 | Improve this Doc View Source sort(int2) Declaration public static int2 sort(int2 value) Parameters Type Name Description Unity.Mathematics.int2 value Returns Type Description Unity.Mathematics.int2 | Improve this Doc View Source sort(int3) Declaration public static int3 sort(int3 value) Parameters Type Name Description Unity.Mathematics.int3 value Returns Type Description Unity.Mathematics.int3 | Improve this Doc View Source sort(int4) Declaration public static int4 sort(int4 value) Parameters Type Name Description Unity.Mathematics.int4 value Returns Type Description Unity.Mathematics.int4 | Improve this Doc View Source sq(Int32) Declaration public static int sq(this int value) Parameters Type Name Description System.Int32 value Returns Type Description System.Int32 | Improve this Doc View Source sq(Single) Declaration public static float sq(this float value) Parameters Type Name Description System.Single value Returns Type Description System.Single | Improve this Doc View Source sum(float2) Declaration public static float sum(this float2 value) Parameters Type Name Description Unity.Mathematics.float2 value Returns Type Description System.Single | Improve this Doc View Source sum(float3) Declaration public static float sum(this float3 value) Parameters Type Name Description Unity.Mathematics.float3 value Returns Type Description System.Single | Improve this Doc View Source sum(float4) Declaration public static float sum(this float4 value) Parameters Type Name Description Unity.Mathematics.float4 value Returns Type Description System.Single | Improve this Doc View Source sum(int2) Declaration public static int sum(this int2 value) Parameters Type Name Description Unity.Mathematics.int2 value Returns Type Description System.Int32 | Improve this Doc View Source sum(int3) Declaration public static int sum(this int3 value) Parameters Type Name Description Unity.Mathematics.int3 value Returns Type Description System.Int32 | Improve this Doc View Source sum(int4) Declaration public static int sum(this int4 value) Parameters Type Name Description Unity.Mathematics.int4 value Returns Type Description System.Int32 | Improve this Doc View Source swap<T>(ref T, ref T) Exchanges the values of a and b. Declaration public static void swap<T>(ref T a, ref T b) Parameters Type Name Description T a T b Type Parameters Name Description T"
  },
  "changelog.html": {
    "href": "changelog.html",
    "title": "Changelog",
    "keywords": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog [1.7.1] - 2023-1-4 Changed documentation from physical to webpage [1.7.0] - 2022-12-21 Added NativeHeapPriorityQueue that uses heap Added NativeLinkedPriorityQueue that uses linked list Deprecated NativePriorityQueue should use now either NativeHeapPriorityQueue or NativeLinkedPriorityQueue [1.6.0] - 2022-10-23 Added to AABBTree methods: CountLeafs, GetDepth, GetBalancedTreeFactor [1.5.0] - 2022-09-27 Changed IVoronoiOutput.ProcessVertex signature Improved performance of DelaunayTriangulation drastically Added VertexData structure for processing vertex information Added MesSurface structure for processing/reading/writing Mesh Added box/icosphere/icohedron/icocapsule generation suing MeshSurface Added NativeStructureList/UnsafeStructureList for building SoA (structure of array) Added Plane structure (Exposed from Unity Collection package) Added 3d/2s Capsule structure [1.4.1] - 2022-09-21 Fixed AABBTree failing compilation in player build [1.4.0] - 2022-08-25 Changed geometry overlap/intersection not include borders Changed overlap logic to be more faster Added to geometry structures debug display Added AABBTree [1.3.0] - 2022-08-10 Changed NativeLinkedList Add/Insert to return iterator Changed com.unity.burst dependency version from 1.3.0-preview.12 to 1.6.6 Changed com.unity.mathematics dependency version from 1.1.0 to 1.2.1 Changed com.unity.collections dependency version from 0.9.0-preview.6 to 1.4.0 Added Sort/Middle/Count to NativeLinkedList Added EnqueueUnique to the NativePriorityQueue Added new helper class ShapeGizmos for drawing 2d geometry Added VoronoiBuilder/DelaunayTriangulation/VoronoiDiagram Added to math functions isclockwise/iscclockwise/iscollinear/sq/sort/line/curve/parabola/bazier/swap Added Voronoi sample Added Curves sample [1.2.0] - 2022-08-03 Adding geometry 3d [1.1.0] - 2022-08-01 Fixed compilation errors for 2021 [1.0.0] - 2022-07-28 Package released"
  },
  "index.html": {
    "href": "index.html",
    "title": "Dots Plus",
    "keywords": "Dots Plus This package contains essentials needed to develop DOTS projects. It is built to be used as an extension for existing Unity builtin packages (etc. SIMD mathematics, Collections, Jobs and Burst compiler)."
  },
  "manual/collections.html": {
    "href": "manual/collections.html",
    "title": "Collections",
    "keywords": "Collections This assembly follows similar standard like unity collection package so it is important to check pages: https://docs.unity3d.com/Packages/com.unity.collections@1.3/manual/index.html https://docs.unity3d.com/Packages/com.unity.collections@1.3/manual/collection-types.html https://docs.unity3d.com/Packages/com.unity.collections@1.3/manual/allocation.html Native vs Unsafe The Native types perform safety checks to ensure that indexes passed to their methods are in bounds, but the other types in most cases do not. Check page for more information https://docs.unity3d.com/Packages/com.unity.collections@1.3/manual/index.html . NativeLinkedList/UnsafeLinkedList An unmanaged, resizable linked list. Linked list is efficient at inserting and removing elements. However, not so efficient with cache usage. Linked list is implemented using double linked nodes, where each node knows its next-node link and previous-node link. var list = new NativeLinkedList<int>(Allocator.Temp); list.Add(0); var itr = list.Add(1); list.Add(2); list.RemoveAt(itr); Assert.AreEqual(list.Begin, 0); Assert.AreEqual(list.Begin.Next, 2); list.Dispose(); Note: Linked list is recommended to be used if you plan to keep added elements iteration position. NativeStack/UnsafeStack An managed, resizable stack. Limited version of NativeList that only operates with the last element at the time. var stack = new NativeStack<int>(Allocator.Temp); stack.Push(0); stack.Push(1); stack.Push(2); stack.Push(3); Assert.AreEqual(3, stack.Pop()); Assert.AreEqual(2, stack.Pop()); Assert.AreEqual(1, stack.Pop()); Assert.AreEqual(0, stack.Pop()); stack.Dispose(); NativeLinkedPriorityQueue/UnsafeLinkedPriorityQueue An unmanaged, resizable priority queue. Priority queue main difference from regular queue that before element enqueue it executes insert sort. It is implemented using linked list. Peek = O(1), Enqueue = O(n), Dequeue = O(1). struct AscendingOrder : IComparer<int> { public int Compare(int x, int y) => x.CompareTo(y); } var queue = new NativeLinkedPriorityQueue<int, AscendingOrder>(Allocator.Temp, new AscendingOrder()); queue.Enqueue(2); queue.Enqueue(1); Assert.AreEqual(1, queue.Dequeue()); Assert.AreEqual(2, queue.Dequeue()); queue.Dispose(); NativeHeapPriorityQueue/UnsafeHeapPriorityQueue An unmanaged, resizable priority queue. Priority queue main difference from regular queue that it is sorted. It is implemented using heap. Peek = O(1), Enqueue = O(log n), Dequeue = O(log n). var queue = new NativeHeapPriorityQueue<int, int>(Allocator.Temp); queue.Enqueue(2, 2); queue.Enqueue(1, 1); Assert.AreEqual(1, queue.Dequeue()); Assert.AreEqual(2, queue.Dequeue()); queue.Dispose(); NativeKdTree/UnsafeKdTree K-d tree (short for k-dimensional tree) is a space-partitioning data structure for organizing points in a k-dimensional space. K-d trees are a useful data structure for several applications, such as searches involving a multidimensional search key (e.g. range searches and nearest neighbor searches) and creating point clouds. K-d trees are a special case of binary space partitioning trees. struct TreeComparer : IKdTreeComparer<float2> { public int Compare(float2 x, float2 y, int depth) { int axis = depth % 2; return x[axis].CompareTo(y[axis]); } public float DistanceSq(float2 x, float2 y) { return math.distancesq(x, y); } public float DistanceToSplitSq(float2 x, float2 y, int depth) { int axis = depth % 2; return (x[axis] - y[axis]) * (x[axis] - y[axis]); } } var tree = new NativeKdTree<float2, TreeComparer>(1, Allacator.Temp, new TreeComparer()); tree.Add(new float2(1, 1)); tree.Add(new float2(2, 2)); Assert.AreEqual(1, FindNearest(new float2(0, 0), out _).Value); tree.Dispose(); Note: K-D tree operations like nearest neighbor search have overhead. As a result, it is recommended to use it when you have lots of points in space. NativeAABBTree/UnsafeAABBTree An unmanaged, resizable aabb tree. AABB tree (short for axis aligned bounding box tree) is a space-partitioning data structure for organizing bounding shapes in space. As structure uses generic it is not only usable for boxes, but any shape that implements interfaces. AABB trees are a useful data structure for fast searching bounding shapes in space. AABB trees are a special case of binary space partitioning trees. Based on https://box2d.org/files/ErinCatto_DynamicBVH_GDC2019.pdf . struct AABRectangle : ISurfaceArea<AABRectangle>, IUnion<AABRectangle>, IOverlap<AABRectangle> { public Rectangle Rectangle; public AABRectangle(Rectangle rectangle) { Rectangle = rectangle; } public float SurfaceArea() => Rectangle.Perimeter; public AABRectangle Union(AABRectangle value) => new AABRectangle(Rectangle.Union(Rectangle, value.Rectangle)); public bool Overlap(AABRectangle value) => Rectangle.Overlap(value.Rectangle); } ... var tree = new UnsafeAABBTree<AABRectangle>(1, Allocator.Temp); // Construct tree: // N // / \\ // N N // / \\ / \\ // a b c d var a = tree.Add(new AABRectangle(new Rectangle(new float2(5, 5), new float2(1, 1)))); var b = tree.Add(new AABRectangle(new Rectangle(new float2(6, 6), new float2(1, 1)))); var c = tree.Add(new AABRectangle(new Rectangle(new float2(-5, -5), new float2(1, 1)))); var d = tree.Add(new AABRectangle(new Rectangle(new float2(-6, -6), new float2(1, 1)))); Assert.AreEqual(tree.Right(tree.Right(tree.Root)), d); Assert.AreEqual(tree.Left(tree.Right(tree.Root)), c); Assert.AreEqual(tree.Right(tree.Left(tree.Root)), b); Assert.AreEqual(tree.Left(tree.Left(tree.Root)), a); var result = new NativeList<AABRectangle>(2, Allocator.Temp); tree.FindOverlap(new AABRectangle(new Rectangle(new float2(5, 5), new float2(2, 2))), ref result); Assert.AreEqual(2, result.Length); Assert.IsTrue(tree[a].Rectangle == result[0].Rectangle); Assert.IsTrue(tree[b].Rectangle == result[1].Rectangle); result.Dispose(); tree.Dispose();"
  },
  "manual/Documentation.html": {
    "href": "manual/Documentation.html",
    "title": "Project Dawn | Dots Plus | Tool",
    "keywords": "Version 1.7.0 Project Dawn | Dots Plus | Tool Overview This package contains essentials needed to develop DOTS projects. It is built to be used as an extension for existing Unity builtin packages (etc. SIMD mathematics, Collections, Jobs and Burst compiler). Library is developed to fit well with Unity DOTS standards. This includes performance by default, simplicity and most importantly, readability of the code. Driven to take the best HPC# can offer. Collections This assembly follows similar standard like unity collection package so it is important to check pages: https://docs.unity3d.com/Packages/com.unity.collections@1.3/manual/index.html https://docs.unity3d.com/Packages/com.unity.collections@1.3/manual/collection-types.html https://docs.unity3d.com/Packages/com.unity.collections@1.3/manual/allocation.html Native vs Unsafe The Native types perform safety checks to ensure that indexes passed to their methods are in bounds, but the other types in most cases do not. Check page for more information https://docs.unity3d.com/Packages/com.unity.collections@1.3/manual/index.html . NativeLinkedList/UnsafeLinkedList An unmanaged, resizable linked list. Linked list is efficient at inserting and removing elements. However, not so efficient with cache usage. Linked list is implemented using double linked nodes, where each node knows its next-node link and previous-node link. var list = new NativeLinkedList<int>(Allocator.Temp); list.Add(0); var itr = list.Add(1); list.Add(2); list.RemoveAt(itr); Assert.AreEqual(list.Begin, 0); Assert.AreEqual(list.Begin.Next, 2); list.Dispose(); Note: Linked list is recommended to be used if you plan to keep added elements iteration position. NativeStack/UnsafeStack An managed, resizable stack. Limited version of NativeList that only operates with the last element at the time. var stack = new NativeStack<int>(Allocator.Temp); stack.Push(0); stack.Push(1); stack.Push(2); stack.Push(3); Assert.AreEqual(3, stack.Pop()); Assert.AreEqual(2, stack.Pop()); Assert.AreEqual(1, stack.Pop()); Assert.AreEqual(0, stack.Pop()); stack.Dispose(); NativeLinkedPriorityQueue/UnsafeLinkedPriorityQueue An unmanaged, resizable priority queue. Priority queue main difference from regular queue that before element enqueue it executes insert sort. It is implemented using linked list. Peek = O(1), Enqueue = O(n), Dequeue = O(1). struct AscendingOrder : IComparer<int> { public int Compare(int x, int y) => x.CompareTo(y); } var queue = new NativeLinkedPriorityQueue<int, AscendingOrder>(Allocator.Temp, new AscendingOrder()); queue.Enqueue(2); queue.Enqueue(1); Assert.AreEqual(1, queue.Dequeue()); Assert.AreEqual(2, queue.Dequeue()); queue.Dispose(); NativeHeapPriorityQueue/UnsafeHeapPriorityQueue An unmanaged, resizable priority queue. Priority queue main difference from regular queue that it is sorted. It is implemented using heap. Peek = O(1), Enqueue = O(log n), Dequeue = O(log n). var queue = new NativeHeapPriorityQueue<int, int>(Allocator.Temp); queue.Enqueue(2, 2); queue.Enqueue(1, 1); Assert.AreEqual(1, queue.Dequeue()); Assert.AreEqual(2, queue.Dequeue()); queue.Dispose(); NativeKdTree/UnsafeKdTree K-d tree (short for k-dimensional tree) is a space-partitioning data structure for organizing points in a k-dimensional space. K-d trees are a useful data structure for several applications, such as searches involving a multidimensional search key (e.g. range searches and nearest neighbor searches) and creating point clouds. K-d trees are a special case of binary space partitioning trees. struct TreeComparer : IKdTreeComparer<float2> { public int Compare(float2 x, float2 y, int depth) { int axis = depth % 2; return x[axis].CompareTo(y[axis]); } public float DistanceSq(float2 x, float2 y) { return math.distancesq(x, y); } public float DistanceToSplitSq(float2 x, float2 y, int depth) { int axis = depth % 2; return (x[axis] - y[axis]) * (x[axis] - y[axis]); } } var tree = new NativeKdTree<float2, TreeComparer>(1, Allacator.Temp, new TreeComparer()); tree.Add(new float2(1, 1)); tree.Add(new float2(2, 2)); Assert.AreEqual(1, FindNearest(new float2(0, 0), out _).Value); tree.Dispose(); Note: K-D tree operations like nearest neighbor search have overhead. As a result, it is recommended to use it when you have lots of points in space. NativeAABBTree/UnsafeAABBTree An unmanaged, resizable aabb tree. AABB tree (short for axis aligned bounding box tree) is a space-partitioning data structure for organizing bounding shapes in space. As structure uses generic it is not only usable for boxes, but any shape that implements interfaces. AABB trees are a useful data structure for fast searching bounding shapes in space. AABB trees are a special case of binary space partitioning trees. Based on https://box2d.org/files/ErinCatto_DynamicBVH_GDC2019.pdf . struct AABRectangle : ISurfaceArea<AABRectangle>, IUnion<AABRectangle>, IOverlap<AABRectangle> { public Rectangle Rectangle; public AABRectangle(Rectangle rectangle) { Rectangle = rectangle; } public float SurfaceArea() => Rectangle.Perimeter; public AABRectangle Union(AABRectangle value) => new AABRectangle(Rectangle.Union(Rectangle, value.Rectangle)); public bool Overlap(AABRectangle value) => Rectangle.Overlap(value.Rectangle); } ... var tree = new UnsafeAABBTree<AABRectangle>(1, Allocator.Temp); // Construct tree: // N // / \\ // N N // / \\ / \\ // a b c d var a = tree.Add(new AABRectangle(new Rectangle(new float2(5, 5), new float2(1, 1)))); var b = tree.Add(new AABRectangle(new Rectangle(new float2(6, 6), new float2(1, 1)))); var c = tree.Add(new AABRectangle(new Rectangle(new float2(-5, -5), new float2(1, 1)))); var d = tree.Add(new AABRectangle(new Rectangle(new float2(-6, -6), new float2(1, 1)))); Assert.AreEqual(tree.Right(tree.Right(tree.Root)), d); Assert.AreEqual(tree.Left(tree.Right(tree.Root)), c); Assert.AreEqual(tree.Right(tree.Left(tree.Root)), b); Assert.AreEqual(tree.Left(tree.Left(tree.Root)), a); var result = new NativeList<AABRectangle>(2, Allocator.Temp); tree.FindOverlap(new AABRectangle(new Rectangle(new float2(5, 5), new float2(2, 2))), ref result); Assert.AreEqual(2, result.Length); Assert.IsTrue(tree[a].Rectangle == result[0].Rectangle); Assert.IsTrue(tree[b].Rectangle == result[1].Rectangle); result.Dispose(); tree.Dispose(); Mathematics This assembly follows similar standard like unity mathematics package, so it is important to check pages: https://docs.unity3d.com/Packages/com.unity.mathematics@1.2/manual/index.html Why lower case naming convention? The main reason is that Unity mathematics follows the same conventions. Only worse thing than bad syntax is inconsistent syntax Fast Math There is a small helper class ProjectDawn.Mathematics.fastmath that contains several faster math functions at the expense of precision. Geometry 2D This assembly provides common 2d shapes used in game development (etc. circle, rectangle, line, capsule, convex polygon...). Those shapes contain useful functions like: Testing if shapes Overlap . Finding minimum Distance between shapes. Finding BoundingRectangle , InscribedCircle , CircumscribedCircle on the shape. Finding Intersection of shape and ray. Convex Polygon There are two APIs for executing convex polygon operations. ConvexPolygon container that needs to be allocated. ConvexPolygonUtility static class that can be used with already allocated points array. Voronoi Voronoi is a partition of a plane into regions close to each of a given set of objects. In the simplest case, these objects are just finitely many points in the plane (called seeds, sites, or generators). For each seed there is a corresponding region, called a Voronoi cell, consisting of all points of the plane closer to that seed than to any other. Voronoi generated from 5 sites named A, B, C, D, E. Voronoi logic is separated into two structures: VoronoiBuilder - used for gathering sites and constructing voronoi shape. IVoronoiOutput - the interface used for ouputing voronoi shape. Voronoi Builder Structure used for building voronoi. The usage of API is quite simple. // Allocating builder var builder = new VoronoiBuilder(1, Allocator.Temp); // Adding site at point 0, 0 builder.Add(new double2(0, 0)); // Outputing the voronoi into `IVoronoiOutput` builder.Construct(ref output); // Destroying builder.Dispose() IVoronoiOutput This interface is used by VoronoiBuilder to call specific callback for constructing voronoi. // Callback after VoronoiBuilder processes the site. void ProcessSite(double2 point, int index); // Callback after VoronoiBuilder processes the vertex. int ProcessVertex(double2 point); // Callback after VoronoiBuilder processes the edge. void ProcessEdge(double a, double b, double c, int leftVertexIndex, int rightVertexIndex, int leftSiteIndex, int rightSiteIndex); // Callback after VoronoiBuilder finished building. void Build(); Here is very simple example that draws wireframe of voronoi. struct CustomVoronoiOutput : IVoronoiOutput { NativeList<float2> m_Vertices; public CustomVoronoiOutput(Allocator allocator) { m_Vertices = new NativeList<float2>(allocator); } public void Dispose() { m_Vertices.Dispose(); } public void ProcessSite(double2 point, int siteIndex) { ShapeGizmos.DrawText((float2)point, $\"{(char)(65 + siteIndex)}\", Color.white); } public void ProcessEdge(double a, double b, double c, int leftVertexIndex, int rightVertexIndex, int leftSiteIndex, int rightSiteIndex) { float extent = 120; float2 leftVertex = leftVertexIndex != -1 ? m_Vertices[leftVertexIndex] : new float2(-extent, line((float)a, (float)b, (float)c, -extent)); float2 rightVertex = rightVertexIndex != -1 ? m_Vertices[rightVertexIndex] : new float2(extent, line((float)a, (float)b, (float)c, extent)); ShapeGizmos.DrawLine(leftVertex, rightVertex, Color.green); } public int ProcessVertex(double2 point) { ShapeGizmos.DrawSolidCircle((float2)point, 0.1f, Color.green); m_Vertices.Add((float2)point); return m_Vertices.Length - 1; } public void Build() { } } VoronoiDiagram Structure used for constructing cells, edges and vertices that implements IVoronoiOutput . DelaunayTriangulation Structure used for constructing delaunay dual that implements IVoronoiOutput . Quite useful for mesh triangulation. Geometry 3D This assembly provides common 3d shapes used in game development (etc. box, sphere, capsule, line, triangle, trinagular surface, ray...). Those shapes contain useful functions like: Testing if shapes Overlap . Triangle and Ray intersection time. Triangle and Triangle intersection lines. TriangularSurface similar to mesh. VertexData/UnsafeVertexData Structure used for containing vertex data (etc. position, normal, uv ...). Array supports generic data and depends on attributes passed during structure creation. As example it allows having only positions vertex or positions and normals or other setup. All vertex data is stored in interleaved array. As example VertexData with three attributes - position, normal, uv, would be stored in memory as follows: | a| b| c| d| e| f|...| |--|--|--|--|--|--|--| | position0 | normal0 | uv0 | position1 | normal1 | uv1 | ... | MeshSurface/UnsafeMeshSurface Structure equivalent of Unity Mesh class. Mainly it has three purposes: Read - copy Mesh into MeshSurface . Write - copy MeshSurface into Mesh . Modify its VertexData , Indices and Submeshes . Here is small example of creating box Mesh using MeshSurface : var attributes = new NativeArray<VertexAttributeDescriptor>(1, Allocator.Temp); attributes[0] = new VertexAttributeDescriptor(VertexAttribute.Position, VertexAttributeFormat.Float32, 3); var surface = new MeshSurface(1, attributes, Allocator.TempJob); JobHandle dependency = surface.Box(Box, default); if (TryGetComponent(out MeshFilter meshFilter)) { var meshDataArray = Mesh.AllocateWritableMeshData(1); dependency = surface.Write(meshDataArray[0], MeshUpdateFlags.Default, dependency); dependency.Complete(); if (meshFilter.sharedMesh == null) meshFilter.sharedMesh = new Mesh(); Mesh.ApplyAndDisposeWritableMeshData(meshDataArray, meshFilter.sharedMesh); } attributes.Dispose(); surface.Dispose(); Gizmos Both 2d and 3d contains helper class ShapeGizmos that have methods for drawing shapes in gizmos. It is very useful for debug purpose or drawing gizmos in general. Here is small example drawing red rectangle: void OnDrawGizmos() { ShapeGizmos.DrawWireRectangle(new Rectangle(new float2(0, 0), new float2(1, 1)), Color.red); } Tests and Samples The package contains samples and tests, so it is quite recommended to check them to get an overall sense of API usage. Dependencies Tested with Unity 2020.3 Package com.unity.mathematics@1.2 Package com.unity.collections@0.9 Package com.unity.burst@1.4 Support If you have questions, bugs or feature requests use Discord . Current API selection comes from what I personally needed during Unity DOTS project development. This package expected to grow based on the users request. Final goal is to have a library that would make every DOTS developer's life easier (etc. C++ Boost)."
  },
  "manual/geometry2d.html": {
    "href": "manual/geometry2d.html",
    "title": "Geometry 2D",
    "keywords": "Geometry 2D This assembly provides common 2d shapes used in game development (etc. circle, rectangle, line, capsule, convex polygon...). Those shapes contain useful functions like: Testing if shapes Overlap . Finding minimum Distance between shapes. Finding BoundingRectangle , InscribedCircle , CircumscribedCircle on the shape. Finding Intersection of shape and ray. Convex Polygon There are two APIs for executing convex polygon operations. ConvexPolygon container that needs to be allocated. ConvexPolygonUtility static class that can be used with already allocated points array. Voronoi Voronoi is a partition of a plane into regions close to each of a given set of objects. In the simplest case, these objects are just finitely many points in the plane (called seeds, sites, or generators). For each seed there is a corresponding region, called a Voronoi cell, consisting of all points of the plane closer to that seed than to any other. Voronoi generated from 5 sites named A, B, C, D, E. Voronoi logic is separated into two structures: VoronoiBuilder - used for gathering sites and constructing voronoi shape. IVoronoiOutput - the interface used for ouputing voronoi shape. Voronoi Builder Structure used for building voronoi. The usage of API is quite simple. // Allocating builder var builder = new VoronoiBuilder(1, Allocator.Temp); // Adding site at point 0, 0 builder.Add(new double2(0, 0)); // Outputing the voronoi into `IVoronoiOutput` builder.Construct(ref output); // Destroying builder.Dispose() IVoronoiOutput This interface is used by VoronoiBuilder to call specific callback for constructing voronoi. // Callback after VoronoiBuilder processes the site. void ProcessSite(double2 point, int index); // Callback after VoronoiBuilder processes the vertex. int ProcessVertex(double2 point); // Callback after VoronoiBuilder processes the edge. void ProcessEdge(double a, double b, double c, int leftVertexIndex, int rightVertexIndex, int leftSiteIndex, int rightSiteIndex); // Callback after VoronoiBuilder finished building. void Build(); Here is very simple example that draws wireframe of voronoi. struct CustomVoronoiOutput : IVoronoiOutput { NativeList<float2> m_Vertices; public CustomVoronoiOutput(Allocator allocator) { m_Vertices = new NativeList<float2>(allocator); } public void Dispose() { m_Vertices.Dispose(); } public void ProcessSite(double2 point, int siteIndex) { ShapeGizmos.DrawText((float2)point, $\"{(char)(65 + siteIndex)}\", Color.white); } public void ProcessEdge(double a, double b, double c, int leftVertexIndex, int rightVertexIndex, int leftSiteIndex, int rightSiteIndex) { float extent = 120; float2 leftVertex = leftVertexIndex != -1 ? m_Vertices[leftVertexIndex] : new float2(-extent, line((float)a, (float)b, (float)c, -extent)); float2 rightVertex = rightVertexIndex != -1 ? m_Vertices[rightVertexIndex] : new float2(extent, line((float)a, (float)b, (float)c, extent)); ShapeGizmos.DrawLine(leftVertex, rightVertex, Color.green); } public int ProcessVertex(double2 point) { ShapeGizmos.DrawSolidCircle((float2)point, 0.1f, Color.green); m_Vertices.Add((float2)point); return m_Vertices.Length - 1; } public void Build() { } } VoronoiDiagram Structure used for constructing cells, edges and vertices that implements IVoronoiOutput . DelaunayTriangulation Structure used for constructing delaunay dual that implements IVoronoiOutput . Quite useful for mesh triangulation."
  },
  "manual/geometry3d.html": {
    "href": "manual/geometry3d.html",
    "title": "Geometry 3D",
    "keywords": "Geometry 3D This assembly provides common 3d shapes used in game development (etc. box, sphere, capsule, line, triangle, trinagular surface, ray...). Those shapes contain useful functions like: Testing if shapes Overlap . Triangle and Ray intersection time. Triangle and Triangle intersection lines. TriangularSurface similar to mesh. VertexData/UnsafeVertexData Structure used for containing vertex data (etc. position, normal, uv ...). Array supports generic data and depends on attributes passed during structure creation. As example it allows having only positions vertex or positions and normals or other setup. All vertex data is stored in interleaved array. As example VertexData with three attributes - position, normal, uv, would be stored in memory as follows: | a| b| c| d| e| f|...| |--|--|--|--|--|--|--| | position0 | normal0 | uv0 | position1 | normal1 | uv1 | ... | MeshSurface/UnsafeMeshSurface Structure equivalent of Unity Mesh class. Mainly it has three purposes: Read - copy Mesh into MeshSurface . Write - copy MeshSurface into Mesh . Modify its VertexData , Indices and Submeshes . Here is small example of creating box Mesh using MeshSurface : var attributes = new NativeArray<VertexAttributeDescriptor>(1, Allocator.Temp); attributes[0] = new VertexAttributeDescriptor(VertexAttribute.Position, VertexAttributeFormat.Float32, 3); var surface = new MeshSurface(1, attributes, Allocator.TempJob); JobHandle dependency = surface.Box(Box, default); if (TryGetComponent(out MeshFilter meshFilter)) { var meshDataArray = Mesh.AllocateWritableMeshData(1); dependency = surface.Write(meshDataArray[0], MeshUpdateFlags.Default, dependency); dependency.Complete(); if (meshFilter.sharedMesh == null) meshFilter.sharedMesh = new Mesh(); Mesh.ApplyAndDisposeWritableMeshData(meshDataArray, meshFilter.sharedMesh); } attributes.Dispose(); surface.Dispose();"
  },
  "manual/gizmos.html": {
    "href": "manual/gizmos.html",
    "title": "Gizmos",
    "keywords": "Gizmos Both 2d and 3d contains helper class ShapeGizmos that have methods for drawing shapes in gizmos. It is very useful for debug purpose or drawing gizmos in general. Here is small example drawing red rectangle: void OnDrawGizmos() { ShapeGizmos.DrawWireRectangle(new Rectangle(new float2(0, 0), new float2(1, 1)), Color.red); }"
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Dots Plus",
    "keywords": "Dots Plus This package contains essentials needed to develop DOTS projects. It is built to be used as an extension for existing Unity builtin packages (etc. SIMD mathematics, Collections, Jobs and Burst compiler). Library is developed to fit well with Unity DOTS standards. This includes performance by default, simplicity and most importantly, readability of the code. Driven to take the best HPC# can offer. Tests and Samples The package contains samples and tests, so it is quite recommended to check them to get an overall sense of API usage. Dependencies Tested with Unity 2020.3 Package com.unity.mathematics@1.2 Package com.unity.collections@0.9 Package com.unity.burst@1.4 Support If you have questions, bugs or feature requests use Discord . Current API selection comes from what I personally needed during Unity DOTS project development. This package expected to grow based on the users request. Final goal is to have a library that would make every DOTS developer's life easier (etc. C++ Boost)."
  },
  "manual/mathematics.html": {
    "href": "manual/mathematics.html",
    "title": "Mathematics",
    "keywords": "Mathematics This assembly follows similar standard like unity mathematics package, so it is important to check pages: https://docs.unity3d.com/Packages/com.unity.mathematics@1.2/manual/index.html Why lower case naming convention? The main reason is that Unity mathematics follows the same conventions. Only worse thing than bad syntax is inconsistent syntax Fast Math There is a small helper class ProjectDawn.Mathematics.fastmath that contains several faster math functions at the expense of precision."
  }
}